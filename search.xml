<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>go笔记</title>
      <link href="/2023/10/13/go%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/10/13/go%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>由一串固定长度的字符连接起来的字符序列，Go的字符串是由单个UTF-8表示的字节连接起来的，由于该编码的不定性，字符串可能根据需要占用1~4byte；即字符串是字节的定长数组</p><p>字符串为不可变类型，故不能直接修改字符串的内容，如需修改，则需要将字符串内容复制到一个可写的变量中（一般是<code>[]byte</code>或<code>[]rune</code>），然后进行修改</p><h4 id="字符串的转义"><a href="#字符串的转义" class="headerlink" title="字符串的转义"></a>字符串的转义</h4><ul><li>双引号创建可解析的字符串，支持转义，但不能用来引用多行</li><li>反引号创建原生的字符串字面量，可由多行组成，不支持转义，且可包含除反引号外的所有字符</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str1 := <span class="string">&quot;\&quot;Go web\&quot;,I love you \n&quot;</span></span><br><span class="line">str2 := <span class="string">`&quot;Go web&quot;,</span></span><br><span class="line"><span class="string">I love you \n`</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;Go web&quot;</span>,I love you</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;Go web&quot;</span>,</span><br><span class="line">I love you \n</span><br></pre></td></tr></table></figure><h4 id="字符串的修改"><a href="#字符串的修改" class="headerlink" title="字符串的修改"></a>字符串的修改</h4><ul><li><p>修改字节（用[]byte）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str := <span class="string">&quot;Hi 世界!&quot;</span></span><br><span class="line">by := []<span class="type">byte</span>(str)</span><br><span class="line">by[<span class="number">2</span>] = <span class="string">&#x27;,&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Hi,世界</span></span><br></pre></td></tr></table></figure></li><li><p>修改字符（用[]rune）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str := <span class="string">&quot;Hi 世界&quot;</span></span><br><span class="line">by := []<span class="type">rune</span>(str)</span><br><span class="line">by[<span class="number">3</span>] = <span class="string">&#x27;中&#x27;</span></span><br><span class="line">by[<span class="number">4</span>] = <span class="string">&#x27;国&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Hi 中国</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>Go 里面有三种类型的函数，函数参数、返回值以及它们的类型被统称为函数签名：  </p><ul><li>普通的带有名字的函数</li><li>匿名函数或者lambda函数</li><li>方法（Methods）</li></ul><p>这样是不正确的 Go 代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">g</span><span class="params">()</span></span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它必须是这样的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">g</span><span class="params">()</span></span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数重载 (function overloading) 指的是可以编写多个同名函数，只要它们拥有不同的形参&#x2F;或者不同的返回值，在 Go 里面函数重载是不被允许的</p><p>函数值之间可以比较：若引用的是相同函数或都是 <code>nil</code> ，则认为是相同的函数</p><h3 id="函数的参数和返回值"><a href="#函数的参数和返回值" class="headerlink" title="函数的参数和返回值"></a>函数的参数和返回值</h3><p>任何一个有返回值（单个或多个）的函数都必须以 <code>return</code> 或 <code>panic</code>结尾</p><p>在函数调用时，切片 (slice)、字典 (map)、接口 (interface)、通道 (channel) 这样的引用类型都是默认使用引用传递（即使没有显式的指出指针）</p><h4 id="命名返回值"><a href="#命名返回值" class="headerlink" title="命名返回值"></a>命名返回值</h4><p>命名返回值作为结果形参被初始化为相应类型的零值，当需要返回的时候，我们只需要一条简单的不带参数的 <code>return</code> 语句，即使只有一个命名返回值也需用括号括起来；当有多个非命名返回值时需用括号括起来，如<code>(int,int)</code>，任何一个非命名返回值在<code>return</code>中都要指出返回值变量或是一个可计算的值</p><h4 id="传递变长参数"><a href="#传递变长参数" class="headerlink" title="传递变长参数"></a>传递变长参数</h4><p>若变长参数的类型并不都相同时的传递方法：</p><ol><li><p>定义一个结构类型，假设它叫 <code>Options</code>，用以存储所有可能的参数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Options <span class="keyword">struct</span> &#123;</span><br><span class="line">par1 type1,</span><br><span class="line">par2 type2,</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数 <code>F1()</code> 可以使用正常的参数 <code>a</code> 和 <code>b</code>，以及一个没有任何初始化的 <code>Options</code> 结构： <code>F1(a, b, Options &#123;&#125;)</code>。如果需要对选项进行初始化，则可以使用 <code>F1(a, b, Options &#123;par1:val1, par2:val2&#125;)</code></p></li><li><p>使用空接口：</p><p>若一个变长参数的类型没有被指定，则可以使用默认的空接口<code>interface&#123;&#125;</code>，该方案不仅可以用于长度未知的参数，还可以用于任何不确定类型的参数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">typecheck</span><span class="params">(..,..,values … <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> values &#123;</span><br><span class="line"><span class="keyword">switch</span> v := value.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="type">int</span>: …</span><br><span class="line"><span class="keyword">case</span> float: …</span><br><span class="line"><span class="keyword">case</span> <span class="type">string</span>: …</span><br><span class="line"><span class="keyword">case</span> <span class="type">bool</span>: …</span><br><span class="line"><span class="keyword">default</span>: …</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="defer和追踪"><a href="#defer和追踪" class="headerlink" title="defer和追踪"></a>defer和追踪</h3><p>关键字 <code>defer</code> 允许我们推迟到函数返回之前（或任意位置执行 <code>return</code> 语句之后）一刻才执行某个语句或函数</p><p>当有多个 <code>defer</code> 行为被注册时，它们会以逆序执行（类似栈，即后进先出）</p><p>关键字 <code>defer</code> 允许我们进行一些函数执行完成后的收尾工作</p><h4 id="使用defer实现代码追踪"><a href="#使用defer实现代码追踪" class="headerlink" title="使用defer实现代码追踪"></a>使用<code>defer</code>实现代码追踪</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">trace</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;entering:&quot;</span>, s)</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">un</span><span class="params">(s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;leaving:&quot;</span>, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> un(trace(<span class="string">&quot;a&quot;</span>))</span><br><span class="line">fmt.Println(<span class="string">&quot;in a&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">b</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> un(trace(<span class="string">&quot;b&quot;</span>))</span><br><span class="line">fmt.Println(<span class="string">&quot;in b&quot;</span>)</span><br><span class="line">a()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">b()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">entering: b</span><br><span class="line">in b</span><br><span class="line">entering: a</span><br><span class="line">in a</span><br><span class="line">leaving: a</span><br><span class="line">leaving: b</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="使用-defer-语句记录函数的参数与返回值"><a href="#使用-defer-语句记录函数的参数与返回值" class="headerlink" title="使用 defer 语句记录函数的参数与返回值"></a>使用 <code>defer</code> 语句记录函数的参数与返回值</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func1</span><span class="params">(s <span class="type">string</span>)</span></span> (n <span class="type">int</span>, err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;func1(%q) = %d, %v&quot;</span>, s, n, err)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> <span class="number">7</span>, io.EOF</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">func1(<span class="string">&quot;Go&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Output: 2011/10/04 10:46:11 func1(&quot;Go&quot;) = 7, EOF</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td><code>close()</code></td><td>用于管道通信</td></tr><tr><td><code>len()</code>、<code>cap()</code></td><td><code>len()</code> 用于返回某类型的长度或数量（字符串、数组、切片、<code>map</code> 和管道）；<code>cap()</code> 用于返回某个类型的最大容量（只能用于数组、切片和管道，不能用于 <code>map</code>）</td></tr><tr><td><code>new()</code>、<code>make()</code></td><td>分配内存，<code>new()</code> 值类型和自定义类型，<code>make</code> 内置引用类型（切片、<code>map</code> 和管道）</td></tr><tr><td><code>copy()</code>、<code>append()</code></td><td>用于复制和连接切片</td></tr><tr><td><code>panic()</code>、<code>recover()</code></td><td>均用于错误处理机制</td></tr><tr><td><code>print()</code>、<code>println()</code></td><td>底层打印函数，在部署环境中建议使用<code>fmt</code>包</td></tr><tr><td><code>complex()</code>、<code>real ()</code>、<code>imag()</code></td><td>用于创建和操作复数</td></tr></tbody></table><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>可以将匿名函数赋值给变量，即保存函数的地址到变量中，然后通过变量名对函数进行调用，也可以直接对匿名函数进行调用，匿名函数也被称为闭包：</p><p><code>func(x, y int) int &#123; return x + y &#125; (3, 4)</code></p><h4 id="应用闭包：将参数作为返回值"><a href="#应用闭包：将参数作为返回值" class="headerlink" title="应用闭包：将参数作为返回值"></a>应用闭包：将参数作为返回值</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> f = Adder()</span><br><span class="line">    fmt.Print(f(<span class="number">1</span>),<span class="string">&quot;-&quot;</span>)</span><br><span class="line">    fmt.Print(f(<span class="number">20</span>),<span class="string">&quot;-&quot;</span>)</span><br><span class="line">    fmt.Print(f(<span class="number">300</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Adder</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x <span class="type">int</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(delta <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        x += delta</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="comment">//1 - 21 - 321</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>闭包函数保存并积累其中的变量的值，不管外部函数退出与否，它都能够继续操作外部函数中的局部变量</p><h5 id="工厂函数"><a href="#工厂函数" class="headerlink" title="工厂函数"></a>工厂函数</h5><p>一个返回值为另一个函数的函数；在创建一系列相似函数时非常有用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MakeAddSuffix</span><span class="params">(suffix <span class="type">string</span>)</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(name <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> !strings.HasSuffix(name, suffix) &#123;</span><br><span class="line"><span class="keyword">return</span> name + suffix</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addBmp := MakeAddSuffix(<span class="string">&quot;.bmp&quot;</span>)</span><br><span class="line">addJpeg := MakeAddSuffix(<span class="string">&quot;.jpeg&quot;</span>)</span><br><span class="line">addBmp(<span class="string">&quot;file&quot;</span>) <span class="comment">// returns: file.bmp</span></span><br><span class="line">addJpeg(<span class="string">&quot;file&quot;</span>) <span class="comment">// returns: file.jpeg</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="使用闭包调试"><a href="#使用闭包调试" class="headerlink" title="使用闭包调试"></a>使用闭包调试</h4><p>在分析和调试复杂的程序时，无数个函数在不同的代码文件中相互调用，如果这时候能够准确地知道哪个文件中的具体哪个函数正在执行，对于调试是十分有帮助的；包 <code>runtime</code> 中的函数 <code>Caller()</code> 提供了相应的信息，因此可以在需要的时候实现一个 <code>where()</code> 闭包函数来打印函数执行的位置：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">where := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    _,file,line,_ := runtime.Caller(<span class="number">1</span>)</span><br><span class="line">    log.Printf(<span class="string">&quot;%s:%d&quot;</span>,file,line)</span><br><span class="line">&#125;</span><br><span class="line">where()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="通过内存缓存提升性能"><a href="#通过内存缓存提升性能" class="headerlink" title="通过内存缓存提升性能"></a>通过内存缓存提升性能</h4><p>在大量计算时，提升性能最直接有效的方式即避免重复计算，在缓存重复利用相同计算的结果称为内存缓存</p><p>如斐波那契数列，要计算数列中第 n 个数字，需要先得到之前两个数的值，但很明显绝大多数情况下前两个数的值都是已经计算过的，此时将第 n 个数的值存在数组中索引为 n 的位置</p><h2 id="数组和切片"><a href="#数组和切片" class="headerlink" title="数组和切片"></a>数组和切片</h2><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>数组是具有相同 <strong>唯一类型</strong> 的一组已编号且长度固定的数据项序列，声明格式为：</p><p><code>var arr1 [5]int</code></p><p>数组的长度是数组类型的一个组成部分，因此[3]int和[4]int是两种不同的数组类型。数组的长度必须是常量表达式，因为数组的长度需要在编译阶段确定</p><p>go数组是值类型，可通过<code>new()</code>创建：<code>var arr1 = new([5]int)</code>，故在函数中作为参数传入时不修改原始数组，若想修改，则需使用<code>&amp;</code>操作符以引用方式传入</p><p>该种方式和 <code>var arr2 [5]int</code> 的区别是：<code>arr1</code> 的类型是 <code>*[5]int</code>，而 <code>arr2</code> 的类型是 <code>[5]int</code>；这样的结果就是当把一个数组赋值给另一个时，需要再做一次数组内存的拷贝操作：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr2 := *arr1</span><br><span class="line">arr2[<span class="number">2</span>] = <span class="number">100</span></span><br><span class="line"><span class="comment">//这样两个数组就有了不同的值，在赋值后修改 arr2 不会对 arr1 生效</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><p>切片提供了计算容量的函数 <code>cap()</code> 可以测量切片最长可以达到多少：切片的长度 + 数组除切片之外的长度。若<code>s</code> 是一个切片，<code>cap(s)</code> 就是从 <code>s[0]</code> 到数组末尾的数组长度：<code>0 &lt;= len(s) &lt;= cap(s)</code></p><p>slice由三个部分构成：指针、长度和容量</p><p>slice不能直接用<code>==</code>进行比较，对于字节型slice可以使用<code>bytes.Equal</code>函数判断是否相等，对于其它类型需要展开每个元素比较（slice允许与nil比较）</p><p>一个nil值的slice的行为和其它任意0长度的slice一样；若需要判断一个slice是否为空，需要使用len(s) &#x3D;&#x3D; 0 判断，不应该使用s &#x3D;&#x3D; nil</p><p>可以将 <code>s2</code> 向后移动一位 <code>s2 = s2[1:]</code>，但是<code>s2 = s2[-1:]</code> 会导致编译错误，切片不能被重新分片获取数组的前一个元素</p><h5 id="创建切片"><a href="#创建切片" class="headerlink" title="创建切片"></a>创建切片</h5><p>当相关数组未定义时，可以用 <code>make()</code> 创建切片，同时创建好相关数组：<code>var slice1 []type = make([]type, len)</code>；可以简写为<code>slice1 := make([]type,len)</code>，<code>len</code>是数组的长度且是<code>slice</code>的初始长度</p><p>故定义<code>s2 := make([]int,10)</code>，则<code>cap(s2)==len(s2)==10</code></p><p>若想创建一个 <code>slice1</code>不占用整个数组，只占用以 <code>len</code> 为个数个项，那么只要：<code>slice1 := make([]type, len, cap)</code></p><p><code>make()</code> 的使用方式是：<code>func make([]T, len, cap)</code>，其中 <code>cap</code> 是可选参数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">50</span>, <span class="number">100</span>)</span><br><span class="line"><span class="built_in">new</span>([<span class="number">100</span>]<span class="type">int</span>)[<span class="number">0</span>:<span class="number">50</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="切片的扩容"><a href="#切片的扩容" class="headerlink" title="切片的扩容"></a>切片的扩容</h5><h6 id="扩容函数"><a href="#扩容函数" class="headerlink" title="扩容函数"></a>扩容函数</h6><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">growslice</span><span class="params">(et *_type,old slice,<span class="built_in">cap</span> <span class="type">int</span>)</span></span> slice &#123;</span><br><span class="line">    newcap := old.<span class="built_in">cap</span></span><br><span class="line">    doublecap := newcap + newcap</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">cap</span> &gt; doublecap &#123;</span><br><span class="line">        newcap = <span class="built_in">cap</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> old.<span class="built_in">cap</span> &lt; <span class="number">1024</span> &#123;</span><br><span class="line">            newcap = doublecap</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span> <span class="number">0</span> &lt; newcap &amp;&amp; newcap &lt; <span class="built_in">cap</span> &#123;</span><br><span class="line">                newcap += newcap/<span class="number">4</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> newcap &lt;= <span class="number">0</span> &#123;</span><br><span class="line">                newcap = <span class="built_in">cap</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="扩容原理"><a href="#扩容原理" class="headerlink" title="扩容原理"></a>扩容原理</h6><ul><li>当前所需容量（cap）大于原容量两倍（doublecap），则最终申请容量（newcap）为当前所需容量（cap）</li><li>若不大于原容量两倍时<ol><li>原切片长度小于1024则申请原容量的两倍</li><li>否则，最终申请容量（newcap，初始值等于 old.cap）每次增加newcap&#x2F;4，直到大于所需容量（cap）为止，然后判断最终容量是否溢出，若溢出，最终申请容量等于所需容量</li></ol></li></ul><h6 id="go切片扩容为什么是2倍"><a href="#go切片扩容为什么是2倍" class="headerlink" title="go切片扩容为什么是2倍"></a>go切片扩容为什么是2倍</h6><ol><li><p>确定切片的大致容量</p></li><li><p>根据元素所占字节大小，最终确定容量</p><p>当元素所占字节大小为1、8或2的倍数时，会执行内存对齐操作</p></li></ol><h5 id="多维切片"><a href="#多维切片" class="headerlink" title="多维切片"></a>多维切片</h5><p> Go 的多维切片可以任意切分，而且，内层的切片必须单独分配</p><h5 id="bytes包"><a href="#bytes包" class="headerlink" title="bytes包"></a>bytes包</h5><p><code>bytes</code> 包和字符串包十分类似，而且还包含一个十分有用的类型 <code>Buffer</code></p><p>长度可变的 <code>bytes</code> 的 buffer，提供 <code>Read()</code> 和 <code>Write()</code> 方法，读写长度未知的 <code>bytes</code> 最好使用 <code>buffer</code></p><h6 id="buffer定义"><a href="#buffer定义" class="headerlink" title="buffer定义"></a>buffer定义</h6><ul><li><code>var buffer bytes.Buffer</code></li><li><code>var r *bytes.Buffer = new(bytes.Buffer)</code></li><li><code>func NewBuffer(buf []byte) *Buffer</code>；<code>NewBuffer</code> 最好用在从 <code>buf</code> 读取的时候</li></ul><h6 id="通过buffer串联字符串"><a href="#通过buffer串联字符串" class="headerlink" title="通过buffer串联字符串"></a>通过buffer串联字符串</h6><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buffer bytes.Buffer</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> s,ok := getNextString();ok&#123;</span><br><span class="line">        buffer.WriteString(s)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Print(buffer.String(), <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该方式比使用<code>+=</code>更节省内存和CPU，尤其是串联的字符串数目较多时</p><h4 id="new-和make-的区别"><a href="#new-和make-的区别" class="headerlink" title="new()和make()的区别"></a>new()和make()的区别</h4><p>两者都在堆上分配内存，但它们的行为不同，适用于不同类型</p><ul><li><code>new(T)</code> 为每个新类型 <code>T</code> 分配一片内存，初始化为 <code>0</code> 并且返回类型为 <code>*T</code> 的内存地址：这种方法 <strong>返回一个指向类型为 <code>T</code>，值为 <code>0</code> 的地址的指针</strong>，它适用于值类型如数组和结构体，相当于 <code>&amp;T&#123;&#125;</code></li><li><code>make(T)</code> <strong>返回一个类型为 T 的初始值</strong>，它只适用于 3 种内建的引用类型：切片、<code>map</code> 和 <code>channel</code></li></ul><p>即<code>new()</code>分配内存，<code>make()</code>初始化，如下图所示：</p><img src="https://s1.ax1x.com/2023/03/09/ppm4rY6.png" style="zoom:50%"/><h4 id="for-range结构"><a href="#for-range结构" class="headerlink" title="for-range结构"></a>for-range结构</h4><p>可以应用于数组和切片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ix, value := <span class="keyword">range</span> slice1 &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一个返回值 <code>ix</code> 是数组或者切片的索引，第二个是在该索引位置的值</p><p><code>value</code> 只是 <code>slice1</code> 某个索引位置的值的一个拷贝，不能用来修改 <code>slice1</code> 该索引位置的值</p><h4 id="切片重组"><a href="#切片重组" class="headerlink" title="切片重组"></a>切片重组</h4><p>在切片达到容量上限后扩容改变切片长度的过程</p><h4 id="切片的复制与追加"><a href="#切片的复制与追加" class="headerlink" title="切片的复制与追加"></a>切片的复制与追加</h4><p>如果想增加切片的容量，必须创建一个更大的切片并把原分片的内容都拷贝过来</p><p>可以使用<code>copy()</code>和<code>append()</code>函数，追加的元素必须和原切片元素是同类型</p><h5 id="append"><a href="#append" class="headerlink" title="append"></a>append</h5><p>如果 <code>s</code> 的容量不足以存储新增元素，<code>append()</code> 会分配新的切片来保证已有切片元素和新增元素的存储。因此，返回的切片可能已经指向一个不同的相关数组，<code>append()</code> 方法总是返回成功，除非系统内存耗尽</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AppendByte</span><span class="params">(slice []<span class="type">byte</span>, data ...<span class="type">byte</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">    m := <span class="built_in">len</span>(slice)</span><br><span class="line">    n := m + <span class="built_in">len</span>(data)</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="built_in">cap</span>(slice) &#123;</span><br><span class="line">        newSlice := <span class="built_in">make</span>([]<span class="type">byte</span>,(n+<span class="number">1</span>)*<span class="number">2</span>)</span><br><span class="line">        <span class="built_in">copy</span>(newSlice,slice)</span><br><span class="line">        slice = newSlice</span><br><span class="line">    &#125;</span><br><span class="line">    slice = slice[<span class="number">0</span>:n]</span><br><span class="line">    <span class="built_in">copy</span>(slice[m:n],data)</span><br><span class="line">    <span class="keyword">return</span> slice</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="append常见操作"><a href="#append常见操作" class="headerlink" title="append常见操作"></a>append常见操作</h6><ol><li><p>将切片 <code>b</code> 的元素追加到切片 <code>a</code> 之后：<code>a = append(a, b...)</code></p></li><li><p>复制切片 <code>a</code> 的元素到新的切片 <code>b</code> 上：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="built_in">make</span>([]T, <span class="built_in">len</span>(a))</span><br><span class="line"><span class="built_in">copy</span>(b, a)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>删除位于索引 <code>i</code> 的元素：<code>a = append(a[:i], a[i+1:]...)</code></p></li><li><p>切除切片 <code>a</code> 中从索引 <code>i</code> 至 <code>j</code> 位置的元素：<code>a = append(a[:i], a[j:]...)</code></p></li><li><p>为切片 <code>a</code> 扩展 <code>j</code> 个元素长度：<code>a = append(a, make([]T, j)...)</code></p></li><li><p>在索引 <code>i</code> 的位置插入元素 <code>x</code>：<code>a = append(a[:i], append([]T&#123;x&#125;, a[i:]...)...)</code></p></li><li><p>在索引 <code>i</code> 的位置插入长度为 <code>j</code> 的新切片：<code>a = append(a[:i], append(make([]T, j), a[i:]...)...)</code></p></li><li><p>在索引 <code>i</code> 的位置插入切片 <code>b</code> 的所有元素：<code>a = append(a[:i], append(b, a[i:]...)...)</code></p></li><li><p>取出位于切片 <code>a</code> 最末尾的元素 <code>x</code>：<code>x, a = a[len(a)-1], a[:len(a)-1]</code></p></li><li><p>将元素 <code>x</code> 追加到切片 <code>a</code>：<code>a = append(a, x)</code></p></li></ol><h5 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h5><p><code>func copy(dst, src []T) int</code> 方法将类型为 <code>T</code> 的切片从源地址 <code>src</code> 拷贝到目标地址 <code>dst</code>，覆盖 <code>dst</code> 的相关元素，并且返回拷贝的元素个数。源地址和目标地址可能会有重叠。拷贝个数是 <code>src</code> 和 <code>dst</code> 的长度最小值。若 <code>src</code> 是字符串则元素类型就是 <code>byte</code>。若还想继续使用 <code>src</code>，在拷贝结束后执行 <code>src = dst</code></p><h4 id="字符串生成字节切片"><a href="#字符串生成字节切片" class="headerlink" title="字符串生成字节切片"></a>字符串生成字节切片</h4><p>可以通过<code>c := []byte(s)</code>获取一个字节的切片<code>c</code>，还可以通过 <code>copy()</code> 函数来达到相同的目的：<code>copy(dst []byte, src string)</code></p><p>将一个字符串追加到某一个字节切片的尾部：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b []<span class="type">byte</span></span><br><span class="line"><span class="keyword">var</span> s <span class="type">string</span></span><br><span class="line">b = <span class="built_in">append</span>(b, s...)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="字符串和切片的内存结构"><a href="#字符串和切片的内存结构" class="headerlink" title="字符串和切片的内存结构"></a>字符串和切片的内存结构</h4><p>在内存中，一个字符串实际上是一个双字结构，即一个指向实际数据的指针和记录字符串长度的整数。因为指针对用户来说是完全不可见，因此我们可以依旧把字符串看做是一个值类型，也就是一个字符数组</p><p>字符串 <code>string s = &quot;hello&quot;</code> 和子字符串 <code>t = s[2:3]</code> 在内存中的结构可以用下图表示：</p><img src="https://s1.ax1x.com/2023/03/09/ppmHohn.png" style="zoom:50%"/><h4 id="修改字符串的某个字符"><a href="#修改字符串的某个字符" class="headerlink" title="修改字符串的某个字符"></a>修改字符串的某个字符</h4><p>Go 中字符串不可变，即 <code>str[index]</code> 这样的表达式是不可以被放在等号左侧的</p><p>因此必须先将字符串转换成字节数组，然后再通过修改数组中的元素值来达到修改字符串的目的，最后将字节数组转换回字符串格式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="string">&quot;hello&quot;</span></span><br><span class="line">c := []<span class="type">byte</span>(s)</span><br><span class="line">c[<span class="number">0</span>] = <span class="string">&#x27;c&#x27;</span></span><br><span class="line">s2 := <span class="type">string</span>(c)<span class="comment">//s2 == &quot;cello&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="字节数组对比函数"><a href="#字节数组对比函数" class="headerlink" title="字节数组对比函数"></a>字节数组对比函数</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Compare</span><span class="params">(a, b[]<span class="type">byte</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i &lt; <span class="built_in">len</span>(a) &amp;&amp; i &lt; <span class="built_in">len</span>(b); i++ &#123;</span><br><span class="line">        <span class="keyword">switch</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> a[i] &gt; b[i]:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">case</span> a[i] &lt; b[i]:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 数组的长度可能不同</span></span><br><span class="line">    <span class="keyword">switch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="built_in">len</span>(a) &lt; <span class="built_in">len</span>(b):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">case</span> <span class="built_in">len</span>(a) &gt; <span class="built_in">len</span>(b):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="comment">// 数组相等</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="搜索及排序切片和数组"><a href="#搜索及排序切片和数组" class="headerlink" title="搜索及排序切片和数组"></a>搜索及排序切片和数组</h4><p>标准库提供了 <code>sort</code> 包实现常见的搜索和排序操作。可以使用 <code>sort</code> 包中的函数 <code>func Ints(a []int)</code> 实现对 <code>int</code> 类型的切片排序。例如 <code>sort.Ints(arri)</code>，其中变量 <code>arri</code> 就是需要被升序排序的数组或切片。为了检查某个数组是否已经被排序，可通过函数 <code>IntsAreSorted(a []int) bool</code> 检查，若返回 <code>true</code> 则表示已经被排序</p><p>类似的，可以使用函数 <code>func Float64s(a []float64)</code> 来排序 <code>float64</code> 的元素，或使用函数 <code>func Strings(a []string)</code> 排序字符串元素</p><p>想要在数组或切片中搜索一个元素，该数组或切片必须先被排序（因为标准库的搜索算法使用的是二分法）。使用函数 <code>func SearchInts(a []int, n int) int</code> 进行搜索，并返回对应结果的索引值</p><p>当然，还可以搜索 <code>float64</code> 和字符串：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SearchFloat64s</span><span class="params">(a []<span class="type">float64</span>, x <span class="type">float64</span>)</span></span> <span class="type">int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SearchStrings</span><span class="params">(a []<span class="type">string</span>, x <span class="type">string</span>)</span></span> <span class="type">int</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="切片和垃圾回收"><a href="#切片和垃圾回收" class="headerlink" title="切片和垃圾回收"></a>切片和垃圾回收</h4><p>只有在没有任何切片指向的时候，底层的数组内存才会被释放，这种特性有时会导致程序占用多余的内存</p><p><strong>示例</strong> 函数 <code>FindDigits()</code> 将一个文件加载到内存，然后搜索其中所有的数字并返回一个切片。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> digitRegexp = regexp.MustCompile(<span class="string">&quot;[0-9]+&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FindDigits</span><span class="params">(filename <span class="type">string</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">    b, _ := ioutil.ReadFile(filename)</span><br><span class="line">    <span class="keyword">return</span> digitRegexp.Find(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这段代码可以顺利运行，但返回的 <code>[]byte</code> 指向的底层是整个文件的数据。只要该返回的切片不被释放，垃圾回收器就不能释放整个文件所占用的内存。换句话说，一点点有用的数据却占用了整个文件的内存。</p><p>想要避免这个问题，可以通过拷贝我们需要的部分到一个新的切片中：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FindDigits</span><span class="params">(filename <span class="type">string</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">   b, _ := ioutil.ReadFile(filename)</span><br><span class="line">   b = digitRegexp.Find(b)</span><br><span class="line">   c := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="built_in">len</span>(b))</span><br><span class="line">   <span class="built_in">copy</span>(c, b)</span><br><span class="line">   <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>事实上，上面这段代码只能找到第一个匹配正则表达式的数字串。要想找到所有的数字，可以尝试下面这段代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FindFileDigits</span><span class="params">(filename <span class="type">string</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">   fileBytes, _ := ioutil.ReadFile(filename)</span><br><span class="line">   b := digitRegexp.FindAll(fileBytes, <span class="built_in">len</span>(fileBytes))</span><br><span class="line">   c := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">0</span>)</span><br><span class="line">   <span class="keyword">for</span> _, bytes := <span class="keyword">range</span> b &#123;</span><br><span class="line">      c = <span class="built_in">append</span>(c, bytes...)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="键值对元素"><a href="#键值对元素" class="headerlink" title="键值对元素"></a>键值对元素</h3><p><code>val1,isPresent = map1[key1]</code></p><p><code>isPresent</code>返回一个<code>bool</code>值：若 <code>key1</code> 存在于 <code>map1</code>，<code>val1</code> 就是 <code>key1</code> 对应的 <code>value</code> 值，并且 <code>isPresent</code> 为 <code>true</code>；若<code>key1</code> 不存在，<code>val1</code> 就是一个空值，且 <code>isPresent</code> 返回 <code>false</code></p><p>判断某个<code>key</code>是否存在的常规方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> _, ok := map1[key1]; ok &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>map1</code>中删除<code>key1</code>：<code>delete(map1,key1)</code>；若<code>key1</code>不存在，该操作不会产生错误</p><p> <code>map</code> 不是按照 key 的顺序排列的，也不是按照 value 的序排列的</p><blockquote><p>map 的本质是散列表，而 map 的增长扩容会导致重新进行散列，这就可能使 map 的遍历结果在扩容前后变得不可靠，Go 设计者为了让大家不依赖遍历的顺序，每次遍历的起点–即起始 bucket 的位置不一样，即不让遍历都从某个固定的 bucket0 开始，所以即使未扩容时我们遍历出来的 map 也总是无序的</p></blockquote><h3 id="map类型的切片"><a href="#map类型的切片" class="headerlink" title="map类型的切片"></a>map类型的切片</h3><p>获取一个 <code>map</code> 类型的切片，必须使用两次 <code>make()</code> 函数，第一次分配切片，第二次分配切片中每个 <code>map</code> 元素</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Version A:</span></span><br><span class="line">    items := <span class="built_in">make</span>([]<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>,<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> items &#123;</span><br><span class="line">        items[i] = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>, <span class="number">1</span>)</span><br><span class="line">items[i][<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Version A: Value of items: %v\n&quot;</span>, items)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Version B: NOT GOOD!</span></span><br><span class="line">items2 := <span class="built_in">make</span>([]<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> items2 &#123;</span><br><span class="line">item = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>, <span class="number">1</span>) <span class="comment">// item is only a copy of the slice element.</span></span><br><span class="line">item[<span class="number">1</span>] = <span class="number">2</span> <span class="comment">// This &#x27;item&#x27; will be lost on the next iteration.</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Version B: Value of items: %v\n&quot;</span>, items2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Version A: Value of items: [map[1:2] map[1:2] map[1:2] map[1:2] map[1:2]]</span><br><span class="line">Version B: Value of items: [map[] map[] map[] map[] map[]]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> A 通过索引使用切片的 <code>map</code> 元素。 B 中获得的项只是 <code>map</code> 值的一个拷贝，所以真正的 <code>map</code> 元素没有得到初始化</p><h3 id="将map的键值对调"><a href="#将map的键值对调" class="headerlink" title="将map的键值对调"></a>将map的键值对调</h3><p>若<code>map</code>的值类型可以作为key且所有value是唯一的，则可以通过下面的方法对调：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">barVal = <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;alpha&quot;</span>: <span class="number">34</span>, <span class="string">&quot;bravo&quot;</span>: <span class="number">56</span>, <span class="string">&quot;charlie&quot;</span>: <span class="number">23</span>,</span><br><span class="line"><span class="string">&quot;delta&quot;</span>: <span class="number">87</span>, <span class="string">&quot;echo&quot;</span>: <span class="number">56</span>, <span class="string">&quot;foxtrot&quot;</span>: <span class="number">12</span>,</span><br><span class="line"><span class="string">&quot;golf&quot;</span>: <span class="number">34</span>, <span class="string">&quot;hotel&quot;</span>: <span class="number">16</span>, <span class="string">&quot;indio&quot;</span>: <span class="number">87</span>,</span><br><span class="line"><span class="string">&quot;juliet&quot;</span>: <span class="number">65</span>, <span class="string">&quot;kili&quot;</span>: <span class="number">43</span>, <span class="string">&quot;lima&quot;</span>: <span class="number">98</span>&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">invMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>, <span class="built_in">len</span>(barVal))</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> barVal &#123;</span><br><span class="line">invMap[v] = k</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;inverted:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> invMap &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Key: %v, Value: %v / &quot;</span>, k, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="结构体和方法"><a href="#结构体和方法" class="headerlink" title="结构体和方法"></a>结构体和方法</h2><h3 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h3><p>将创建对象的具体过程屏蔽隔离；由工厂创建不同种类的对象</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> File <span class="keyword">struct</span> &#123;</span><br><span class="line">    fd      <span class="type">int</span>     <span class="comment">// 文件描述符</span></span><br><span class="line">    name    <span class="type">string</span>  <span class="comment">// 文件名</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewFile</span><span class="params">(fd <span class="type">int</span>, name <span class="type">string</span>)</span></span> *File &#123;</span><br><span class="line">    <span class="keyword">if</span> fd &lt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;File&#123;fd, name&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f := NewFile(<span class="number">10</span>, <span class="string">&quot;./test.txt&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>若 <code>File</code> 是一个结构体类型，则 <code>new(File)</code> 和 <code>&amp;File&#123;&#125;</code> 是等价的</p><h4 id="强制使用工厂方法"><a href="#强制使用工厂方法" class="headerlink" title="强制使用工厂方法"></a>强制使用工厂方法</h4><h5 id="可见性规则"><a href="#可见性规则" class="headerlink" title="可见性规则"></a>可见性规则</h5><p>当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，则这种形式的标识符的对象就可以被外部包的代码所使用（像面向对象语言中的 public）；标识符如果以小写字母开头，则对包外是不可见的，但是它们在整个包的内部是可见并且可用的（像面向对象语言中的 private ）</p><p>当使用 <code>.</code> 作为包的别名时，可以不通过包名来使用其中的项目：<code>import . &quot;./pack1&quot;</code></p><p><code>import _ &quot;./pack1/pack1&quot;</code></p><p><code>pack1</code> 包只导入其副作用，也就是说，只执行它的 <code>init()</code> 函数并初始化其中的全局变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> matrix <span class="keyword">struct</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMatrix</span><span class="params">(params)</span></span> *matrix &#123;</span><br><span class="line">    m := <span class="built_in">new</span>(matrix) <span class="comment">// 初始化 m</span></span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在其他包中使用工厂方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;matrix&quot;</span></span><br><span class="line">...</span><br><span class="line">wrong := <span class="built_in">new</span>(matrix.matrix)     <span class="comment">// 编译失败（matrix 是私有的）</span></span><br><span class="line">right := matrix.NewMatrix(...)  <span class="comment">// 实例化 matrix 的唯一方式</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="内嵌结构体和匿名字段"><a href="#内嵌结构体和匿名字段" class="headerlink" title="内嵌结构体和匿名字段"></a>内嵌结构体和匿名字段</h3><p>结构体可以包含一个或多个 匿名（或内嵌）字段，只有字段的类型是必须的，此时类型就是字段的名字，因此每种数据类型只能有一个匿名字段</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> innerS <span class="keyword">struct</span> &#123;</span><br><span class="line">in1 <span class="type">int</span></span><br><span class="line">in2 <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> outerS <span class="keyword">struct</span> &#123;</span><br><span class="line">b    <span class="type">int</span></span><br><span class="line">c    <span class="type">float32</span></span><br><span class="line"><span class="type">int</span>  <span class="comment">// anonymous field</span></span><br><span class="line">innerS <span class="comment">//anonymous field</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">outer := <span class="built_in">new</span>(outerS)</span><br><span class="line">outer.b = <span class="number">6</span></span><br><span class="line">outer.c = <span class="number">7.5</span></span><br><span class="line">outer.<span class="type">int</span> = <span class="number">60</span></span><br><span class="line">outer.in1 = <span class="number">5</span></span><br><span class="line">outer.in2 = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;outer.b is: %d\n&quot;</span>, outer.b)</span><br><span class="line">fmt.Printf(<span class="string">&quot;outer.c is: %f\n&quot;</span>, outer.c)</span><br><span class="line">fmt.Printf(<span class="string">&quot;outer.int is: %d\n&quot;</span>, outer.<span class="type">int</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;outer.in1 is: %d\n&quot;</span>, outer.in1)</span><br><span class="line">fmt.Printf(<span class="string">&quot;outer.in2 is: %d\n&quot;</span>, outer.in2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用结构体字面量</span></span><br><span class="line">outer2 := outerS&#123;<span class="number">6</span>, <span class="number">7.5</span>, <span class="number">60</span>, innerS&#123;<span class="number">5</span>, <span class="number">10</span>&#125;&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;outer2 is:&quot;</span>, outer2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="命名冲突"><a href="#命名冲突" class="headerlink" title="命名冲突"></a>命名冲突</h4><p>当两个字段拥有相同的名字（可能是继承来的名字）时：</p><ol><li>外层名字会覆盖内层名字（但是两者的内存空间都保留），这提供了一种重载字段或方法的方式</li><li>如果相同的名字在同一级别出现了两次，如果这个名字被程序使用了，将会引发一个错误（不使用没关系）。没有办法来解决这种问题引起的二义性</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A <span class="keyword">struct</span> &#123;a <span class="type">int</span>&#125;</span><br><span class="line"><span class="keyword">type</span> B <span class="keyword">struct</span> &#123;a, b <span class="type">int</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> C <span class="keyword">struct</span> &#123;A; B&#125;</span><br><span class="line"><span class="keyword">var</span> c C</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> D <span class="keyword">struct</span> &#123;B; b <span class="type">float32</span>&#125;</span><br><span class="line"><span class="keyword">var</span> d D</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时使用<code>c.a</code>是错误的；使用<code>d.b</code>没有问题</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li>类型无需显示声明实现了某个接口，接口可以被隐式地实现，多个类型可以实现同一接口</li><li>实现某个接口的类型（除了实现接口方法外）可以有其他的方法</li><li>一个类型可以实现多个接口</li><li>接口类型可以包含一个实例的引用，该实例类型实现了此接口（接口是动态类型）</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Shaper <span class="keyword">interface</span> &#123;</span><br><span class="line">Area() <span class="type">float32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Square <span class="keyword">struct</span> &#123;</span><br><span class="line">side <span class="type">float32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sq *Square)</span></span> Area() <span class="type">float32</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sq.side * sq.side</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sq1 := <span class="built_in">new</span>(Square)</span><br><span class="line">sq1.side = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> areaIntf Shaper</span><br><span class="line">areaIntf = sq1</span><br><span class="line"><span class="comment">// shorter,without separate declaration:</span></span><br><span class="line"><span class="comment">// areaIntf := Shaper(sq1)</span></span><br><span class="line"><span class="comment">// or even:</span></span><br><span class="line"><span class="comment">// areaIntf := sq1</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;The square has area: %f\n&quot;</span>, areaIntf.Area())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">//The square has area: 25.000000</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述实例中创建了一个<code>Square</code>的实例，且在主程序外定义了一个接受者类型是<code>Square</code>的<code>Area()</code>：结构体<code>Square</code>实现了接口<code>Shaper</code> </p><p>故可将一个 <code>Square</code> 类型的变量赋值给一个接口类型的变量：<code>areaIntf = sq1</code> </p><p>现在接口变量包含一个指向 <code>Square</code> 变量的引用，通过它可以调用 <code>Square</code> 上的方法 <code>Area()</code>；接口变量里包含了接收者实例的值和指向对应方法表的指针；<strong>这是多态的Go版本</strong></p><p>如果 <code>Shaper</code> 有另外一个方法 <code>Perimeter()</code>，但是 <code>Square</code> 没有实现它，即使没有在 <code>Square</code> 实例上调用这个方法，编译器会给出错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cannot use sq1 (type *Square) as type Shaper in assignment:</span><br><span class="line">*Square does not implement Shaper (missing Area method)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="接口嵌套接口"><a href="#接口嵌套接口" class="headerlink" title="接口嵌套接口"></a>接口嵌套接口</h3><p>一个接口可以包含一个或多个其他的接口，相当于直接将这些内嵌接口的方法列举在外层接口中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ReadWrite <span class="keyword">interface</span> &#123;</span><br><span class="line">    Read(b Buffer) <span class="type">bool</span></span><br><span class="line">    Write(b Buffer) <span class="type">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Lock <span class="keyword">interface</span> &#123;</span><br><span class="line">    Lock()</span><br><span class="line">    Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> File <span class="keyword">interface</span> &#123;</span><br><span class="line">    ReadWrite</span><br><span class="line">    Lock</span><br><span class="line">    Close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>在接口值上的操作，用于检查接口类型变量所持有的值是否实现了期望的接口或者具体的类型；语法格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">value,ok := x.(T)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中，x 表示一个接口的类型，T 表示一个具体的类型（也可为接口类型）</p><p>该断言表达式会返回 x 的值（ value）和一个布尔值（ ok），可根据该布尔值判断 x 是否为 T 类型：</p><ul><li>若T是具体某个类型，则检查x的动态类型是否等于具体类型T；若成功，则返回x的动态值，类型为T</li><li>若T 是接口类型，检查 x 的动态类型是否满足 T；若成功，x 的动态值不被提取，返回一个类型为 T 的接口值</li><li>无论 T 是什么类型，如果 x 是 nil 接口值，类型断言都会失败</li></ul><p>通过类型断言可以做到：</p><ul><li>检查<code>i</code>是否为<code>nil</code></li><li>检查<code>i</code>存储的值是否为某个类型</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125; = <span class="number">10</span></span><br><span class="line">t1 := i.(<span class="type">int</span>)</span><br><span class="line">fmt.Println(t1)</span><br><span class="line">fmt.Println(<span class="string">&quot;====分隔线====&quot;</span>)</span><br><span class="line">t2 := i.(<span class="type">string</span>)</span><br><span class="line">fmt.Println(t2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">=====分隔线=====</span><br><span class="line">panic: interface conversion: interface &#123;&#125; is int, not string</span><br><span class="line">goroutine 1 [running]:</span><br><span class="line">main.main()</span><br><span class="line">E:/GoPlayer/src/main.go:12 +0x10e</span><br><span class="line">exit status 2</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Type-Switch"><a href="#Type-Switch" class="headerlink" title="Type Switch"></a>Type Switch</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">classifier</span><span class="params">(items ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i, x := <span class="keyword">range</span> items &#123;</span><br><span class="line"><span class="keyword">switch</span> x.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="type">bool</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;Param #%d is a bool\n&quot;</span>, i)</span><br><span class="line"><span class="keyword">case</span> <span class="type">float64</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;Param #%d is a float64\n&quot;</span>, i)</span><br><span class="line"><span class="keyword">case</span> <span class="type">int</span>, <span class="type">int64</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;Param #%d is a int\n&quot;</span>, i)</span><br><span class="line"><span class="keyword">case</span> <span class="literal">nil</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;Param #%d is a nil\n&quot;</span>, i)</span><br><span class="line"><span class="keyword">case</span> <span class="type">string</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;Param #%d is a string\n&quot;</span>, i)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;Param #%d is unknown\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="接口实例：使用Sorter接口排序"><a href="#接口实例：使用Sorter接口排序" class="headerlink" title="接口实例：使用Sorter接口排序"></a>接口实例：使用Sorter接口排序</h3><p><code>sort</code> 包要对一组数字或字符串排序，需要实现三个方法：反映元素个数的 <code>Len()</code> 方法、比较第 <code>i</code> 和 <code>j</code> 个元素的 <code>Less(i, j)</code> 方法以及交换第 <code>i</code> 和 <code>j</code> 个元素的 <code>Swap(i, j)</code> 方法</p><p>排序函数的算法只会使用到这三个方法（可以使用任何排序算法来实现，此处我们使用冒泡排序）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sort</span><span class="params">(data Sorter)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> pass := <span class="number">1</span>; pass &lt; data.Len(); pass++ &#123;</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>;i &lt; data.Len() - pass; i++ &#123;</span><br><span class="line">            <span class="keyword">if</span> data.Less(i+<span class="number">1</span>, i) &#123;</span><br><span class="line">                data.Swap(i, i + <span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Sort</code> 函数接收一个接口类型的参数：<code>Sorter</code> ，它声明了这些方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Sorter <span class="keyword">interface</span> &#123;</span><br><span class="line">    Len() <span class="type">int</span></span><br><span class="line">    Less(i, j <span class="type">int</span>) <span class="type">bool</span></span><br><span class="line">    Swap(i, j <span class="type">int</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <code>int</code> 是待排序序列长度的类型，而不是说要排序的对象一定要是一组 <code>int</code>，现在若想对一个 <code>int</code> 数组排序：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> IntArray []<span class="type">int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p IntArray)</span></span> Len() <span class="type">int</span>           &#123; <span class="keyword">return</span> <span class="built_in">len</span>(p) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p IntArray)</span></span> Less(i, j <span class="type">int</span>) <span class="type">bool</span> &#123; <span class="keyword">return</span> p[i] &lt; p[j] &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p IntArray)</span></span> Swap(i, j <span class="type">int</span>)      &#123; p[i], p[j] = p[j], p[i] &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data := []<span class="type">int</span>&#123;<span class="number">74</span>, <span class="number">59</span>, <span class="number">238</span>, <span class="number">-784</span>, <span class="number">9845</span>, <span class="number">959</span>, <span class="number">905</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">42</span>, <span class="number">7586</span>, <span class="number">-5467984</span>, <span class="number">7586</span>&#125;</span><br><span class="line">a := sort.IntArray(data) <span class="comment">//conversion to type IntArray from package sort</span></span><br><span class="line">sort.Sort(a)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h3><p><strong>空接口或者最小接口</strong> 不包含任何方法，它对实现不做任何要求：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Any <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以给一个空接口类型的变量 <code>var val interface &#123;&#125;</code> 赋任何类型的值</p><p>每个 <code>interface &#123;&#125;</code> 变量在内存中占据两个字长：一个用来存储它包含的类型，另一个用来存储它包含的数据或者指向数据的指针</p><h4 id="构建通用类型"><a href="#构建通用类型" class="headerlink" title="构建通用类型"></a>构建通用类型</h4><p>前面的排序实例中可以实现对<code>int</code>、<code>float</code>、<code>string</code>数组的排序，对于其他类型的排序可以使用空接口：<code>Element：type Element interface&#123;&#125;</code></p><p>然后定义一个容器类型结构体<code>Vector</code>，包含一个<code>Element</code>类型元素的切片：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Vector <span class="keyword">struct</span> &#123;</span><br><span class="line">    a []Element</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Vector</code> 里能放任何类型的变量，因为任何类型都实现了空接口，实际上 <code>Vector</code> 里放的每个元素可以是不同类型的。我们为它定义一个 <code>At()</code> 方法用于返回第 <code>i</code> 个元素，再定一个 <code>Set()</code> 方法用于设置第 <code>i</code> 个元素的值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Vector)</span></span> At(i <span class="type">int</span>) Element &#123;</span><br><span class="line"><span class="keyword">return</span> p.a[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Vector)</span></span> Set(i <span class="type">int</span>, e Element) &#123;</span><br><span class="line">p.a[i] = e</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Vector</code> 中存储的所有元素都是 <code>Element</code> 类型，要得到它们的原始类型（unboxing：拆箱）需要用到类型断言</p><h5 id="通用类型节点数据结构"><a href="#通用类型节点数据结构" class="headerlink" title="通用类型节点数据结构"></a>通用类型节点数据结构</h5><p>在列表和树等数据结构中定义时使用了节点的递归型结构体类型，现在可以使用空接口作为数据字段的类型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Node <span class="keyword">struct</span> &#123;</span><br><span class="line">le   *Node</span><br><span class="line">data <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">ri   *Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewNode</span><span class="params">(left, right *Node)</span></span> *Node &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Node&#123;left, <span class="literal">nil</span>, right&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Node)</span></span> SetData(data <span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">n.data = data</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">root := NewNode(<span class="literal">nil</span>, <span class="literal">nil</span>)</span><br><span class="line">root.SetData(<span class="string">&quot;root node&quot;</span>)</span><br><span class="line"><span class="comment">// make child (leaf) nodes:</span></span><br><span class="line">a := NewNode(<span class="literal">nil</span>, <span class="literal">nil</span>)</span><br><span class="line">a.SetData(<span class="string">&quot;left node&quot;</span>)</span><br><span class="line">b := NewNode(<span class="literal">nil</span>, <span class="literal">nil</span>)</span><br><span class="line">b.SetData(<span class="string">&quot;right node&quot;</span>)</span><br><span class="line">root.le = a</span><br><span class="line">root.ri = b</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, root) <span class="comment">// Output: &amp;&#123;0x125275f0 root node 0x125275e0&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="复制数据切片至空接口切片"><a href="#复制数据切片至空接口切片" class="headerlink" title="复制数据切片至空接口切片"></a>复制数据切片至空接口切片</h4><p>若有一个 <code>myType</code> 类型的数据切片，将切片中的数据复制到一个空接口切片中：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dataSlice []myType = FuncReturnSlice()</span><br><span class="line"><span class="keyword">var</span> interfaceSlice []<span class="keyword">interface</span>&#123;&#125; = dataSlice</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>此时将会编译出错：</strong><code>cannot use dataSlice (type []myType) as type []interface &#123; &#125; in assignment</code></p><p>因为它们两个在内存中的布局不一样，必须用<code>for-range</code>一个一个显示赋值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dataSlice []myType = FuncReturnSlice()</span><br><span class="line"><span class="keyword">var</span> interfaceSlice []<span class="keyword">interface</span>&#123;&#125; = <span class="built_in">make</span>([]<span class="keyword">interface</span>&#123;&#125;, <span class="built_in">len</span>(dataSlice))</span><br><span class="line"><span class="keyword">for</span> i, d := <span class="keyword">range</span> dataSlice &#123;</span><br><span class="line">    interfaceSlice[i] = d</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="接口到接口"><a href="#接口到接口" class="headerlink" title="接口到接口"></a>接口到接口</h4><p>一个接口的值可以赋值给另一个接口变量，只要底层类型实现了必要的方法。这个转换是在运行时进行检查的，转换失败会导致一个运行时错误：这是 <code>Go</code> 语言动态的一面，可以拿它和 <code>Ruby</code> 和 <code>Python</code> 这些动态语言相比较</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ai AbsInterface<span class="comment">// declares method Abs()</span></span><br><span class="line"><span class="keyword">type</span> SqrInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">    Sqr() float</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> si SqrInterface</span><br><span class="line">pp := <span class="built_in">new</span>(Point)<span class="comment">// say *Point implements Abs, Sqr</span></span><br><span class="line"><span class="keyword">var</span> empty <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">empty = pp<span class="comment">// everything satisfies empty</span></span><br><span class="line">ai = empty.(AbsInterface) <span class="comment">// underlying value pp implements Abs()</span></span><br><span class="line"><span class="comment">// (runtime failure otherwise)</span></span><br><span class="line">si = ai.(SqrInterface) <span class="comment">// *Point has Sqr() even though AbsInterface doesn’t</span></span><br><span class="line">empty = si<span class="comment">// *Point implements empty set</span></span><br><span class="line"><span class="comment">// Note: statically checkable so type assertion not necessary.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> myPrintInterface <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f3</span><span class="params">(x myInterface)</span></span> &#123;</span><br><span class="line">x.(myPrintInterface).<span class="built_in">print</span>() <span class="comment">// type assertion to myPrintInterface</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>x</code> 转换为 <code>myPrintInterface</code> 类型是完全动态的：只要 <code>x</code> 的底层类型（动态类型）定义了 <code>print</code> 方法这个调用就可以正常运行（译注：若 <code>x</code> 的底层类型未定义 <code>print</code> 方法，此处类型断言会导致 <code>panic</code>，最佳实践应该为 <code>if mpi, ok := x.(myPrintInterface); ok &#123; mpi.print() &#125;</code></p><h3 id="反射包"><a href="#反射包" class="headerlink" title="反射包"></a>反射包</h3><h4 id="方法和类型的反射"><a href="#方法和类型的反射" class="headerlink" title="方法和类型的反射"></a>方法和类型的反射</h4><p>反射包的 <code>Type</code> 表示一个 Go 类型，反射包的 <code>Value</code> 为 Go 值提供了反射接口</p><p><code>reflect.TypeOf</code> 和 <code>reflect.ValueOf</code>返回被检查对象的类型和值</p><p>实际上，反射是通过检查一个接口的值，变量首先被转换一个空接口：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TypeOf</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> Type</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ValueOf</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> Value</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>反射可以从接口值反射到对象，也可以从对象反射回接口值</p><p> <code>Type</code> 和 <code>Value</code> 都有 <code>Kind()</code> 方法返回一个常量来表示类型， <code>Kind()</code> 总是返回底层类型，同样 <code>Value</code> 有叫做 <code>Int()</code> 和 <code>Float()</code> 的方法可以获取存储在内部的值</p><p>变量 <code>v</code> 的 <code>Interface()</code> 可以得到还原（接口）值，可以这样打印 <code>v</code> 的值：<code>fmt.Println(v.Interface())</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// blog: Laws of Reflection</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> x <span class="type">float64</span> = <span class="number">3.4</span></span><br><span class="line">fmt.Println(<span class="string">&quot;type:&quot;</span>, reflect.TypeOf(x))</span><br><span class="line">v := reflect.ValueOf(x)</span><br><span class="line">fmt.Println(<span class="string">&quot;value:&quot;</span>, v)</span><br><span class="line">fmt.Println(<span class="string">&quot;type:&quot;</span>, v.Type())</span><br><span class="line">fmt.Println(<span class="string">&quot;kind:&quot;</span>, v.Kind())</span><br><span class="line">fmt.Println(<span class="string">&quot;value:&quot;</span>, v.Float())</span><br><span class="line">fmt.Println(v.Interface())</span><br><span class="line">fmt.Printf(<span class="string">&quot;value is %5.2e\n&quot;</span>, v.Interface())</span><br><span class="line">y := v.Interface().(<span class="type">float64</span>)</span><br><span class="line">fmt.Println(y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span>: <span class="type">float64</span></span><br><span class="line">value: <span class="number">3.4</span></span><br><span class="line"><span class="keyword">type</span>: <span class="type">float64</span></span><br><span class="line">kind: <span class="type">float64</span></span><br><span class="line">value: <span class="number">3.4</span></span><br><span class="line"><span class="number">3.4</span></span><br><span class="line">value is <span class="number">3.40e+00</span></span><br><span class="line"><span class="number">3.4</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="通过反射设置值"><a href="#通过反射设置值" class="headerlink" title="通过反射设置值"></a>通过反射设置值</h4><p>可以使用 <code>CanSet()</code> 方法测试是否可设置反射值，并不是所有的都有该属性</p><p>若要将上述<code>v</code>的值设置为<code>3.1415</code>可以小心使用<code>v.SetFloat(3.1415)</code>，但该方法不一定能够成功</p><p>可以使用 <code>Elem()</code> 函数，这间接地使用指针：<code>v = v.Elem()</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> x <span class="type">float64</span> = <span class="number">3.4</span></span><br><span class="line">v := reflect.ValueOf(x)</span><br><span class="line"><span class="comment">// setting a value:</span></span><br><span class="line"><span class="comment">// v.SetFloat(3.1415) // Error: will panic: reflect.Value.SetFloat using unaddressable value</span></span><br><span class="line">fmt.Println(<span class="string">&quot;settability of v:&quot;</span>, v.CanSet())</span><br><span class="line">v = reflect.ValueOf(&amp;x) <span class="comment">// Note: take the address of x.</span></span><br><span class="line">fmt.Println(<span class="string">&quot;type of v:&quot;</span>, v.Type())</span><br><span class="line">fmt.Println(<span class="string">&quot;settability of v:&quot;</span>, v.CanSet())</span><br><span class="line">v = v.Elem()</span><br><span class="line">fmt.Println(<span class="string">&quot;The Elem of v is: &quot;</span>, v)</span><br><span class="line">fmt.Println(<span class="string">&quot;settability of v:&quot;</span>, v.CanSet())</span><br><span class="line">v.SetFloat(<span class="number">3.1415</span>) <span class="comment">// this works!</span></span><br><span class="line">fmt.Println(v.Interface())</span><br><span class="line">fmt.Println(v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">settability of v: <span class="literal">false</span></span><br><span class="line"><span class="keyword">type</span> of v: *<span class="type">float64</span></span><br><span class="line">settability of v: <span class="literal">false</span></span><br><span class="line">The Elem of v is:  &lt;<span class="type">float64</span> Value&gt;</span><br><span class="line">settability of v: <span class="literal">true</span></span><br><span class="line"><span class="number">3.1415</span></span><br><span class="line">&lt;<span class="type">float64</span> Value&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>反射中有些内容是需要用地址去改变它的状态的</p><h4 id="反射结构"><a href="#反射结构" class="headerlink" title="反射结构"></a>反射结构</h4><p>有时需要反射一个结构类型。<code>NumField()</code> 方法返回结构内的字段数量；通过一个 <code>for</code> 循环用索引取得每个字段的值 <code>Field(i)</code></p><p>可以调用签名在结构上的方法，使用索引 <code>n</code> 来调用：<code>Method(n).Call(nil)</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> NotknownType <span class="keyword">struct</span> &#123;</span><br><span class="line">s1, s2, s3 <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n NotknownType)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n.s1 + <span class="string">&quot; - &quot;</span> + n.s2 + <span class="string">&quot; - &quot;</span> + n.s3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// variable to investigate:</span></span><br><span class="line"><span class="keyword">var</span> secret <span class="keyword">interface</span>&#123;&#125; = NotknownType&#123;<span class="string">&quot;Ada&quot;</span>, <span class="string">&quot;Go&quot;</span>, <span class="string">&quot;Oberon&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">value := reflect.ValueOf(secret) <span class="comment">// &lt;main.NotknownType Value&gt;</span></span><br><span class="line">typ := reflect.TypeOf(secret)    <span class="comment">// main.NotknownType</span></span><br><span class="line"><span class="comment">// alternative:</span></span><br><span class="line"><span class="comment">// typ := value.Type()  // main.NotknownType</span></span><br><span class="line">fmt.Println(typ)</span><br><span class="line">knd := value.Kind() <span class="comment">// struct</span></span><br><span class="line">fmt.Println(knd)</span><br><span class="line"></span><br><span class="line"><span class="comment">// iterate through the fields of the struct:</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; value.NumField(); i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Field %d: %v\n&quot;</span>, i, value.Field(i))</span><br><span class="line"><span class="comment">// error: panic: reflect.Value.SetString using value obtained using unexported field</span></span><br><span class="line"><span class="comment">// value.Field(i).SetString(&quot;C#&quot;)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// call the first method, which is String():</span></span><br><span class="line">results := value.Method(<span class="number">0</span>).Call(<span class="literal">nil</span>)</span><br><span class="line">fmt.Println(results) <span class="comment">// [Ada - Go - Oberon]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">main.NotknownType</span><br><span class="line"><span class="keyword">struct</span></span><br><span class="line">Field <span class="number">0</span>: Ada</span><br><span class="line">Field <span class="number">1</span>: Go</span><br><span class="line">Field <span class="number">2</span>: Oberon</span><br><span class="line">[Ada - Go - Oberon]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是如果尝试更改一个值，会得到一个错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">panic: reflect.Value.SetString using value obtained using unexported field</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是因为结构中只有被导出字段（首字母大写）才是可设置的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">A <span class="type">int</span></span><br><span class="line">B <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">t := T&#123;<span class="number">23</span>, <span class="string">&quot;skidoo&quot;</span>&#125;</span><br><span class="line">s := reflect.ValueOf(&amp;t).Elem()</span><br><span class="line">typeOfT := s.Type()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; s.NumField(); i++ &#123;</span><br><span class="line">f := s.Field(i)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d: %s %s = %v\n&quot;</span>, i,</span><br><span class="line">typeOfT.Field(i).Name, f.Type(), f.Interface())</span><br><span class="line">&#125;</span><br><span class="line">s.Field(<span class="number">0</span>).SetInt(<span class="number">77</span>)</span><br><span class="line">s.Field(<span class="number">1</span>).SetString(<span class="string">&quot;Sunset Strip&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;t is now&quot;</span>, t)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>: A <span class="type">int</span> = <span class="number">23</span></span><br><span class="line"><span class="number">1</span>: B <span class="type">string</span> = skidoo</span><br><span class="line">t is now &#123;<span class="number">77</span> Sunset Strip&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Printf-和反射"><a href="#Printf-和反射" class="headerlink" title="Printf()和反射"></a>Printf()和反射</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Printf</span><span class="params">(format <span class="type">string</span>, args ... <span class="keyword">interface</span>&#123;&#125;)</span></span> (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Printf()</code> 中的 <code>...</code> 参数为空接口类型，它使用反射包来解析这个参数列表，故能够知道它每个参数的类型</p><h3 id="解码任意数据"><a href="#解码任意数据" class="headerlink" title="解码任意数据"></a>解码任意数据</h3><p>json 包使用 <code>map[string]interface&#123;&#125;</code> 和 <code>[]interface&#123;&#125;</code> 储存任意的 JSON 对象和数组；其可以被反序列化为任何的 JSON blob 存储到接口值中</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b := []<span class="type">byte</span>(<span class="string">`&#123;&quot;Name&quot;: &quot;Wednesday&quot;, &quot;Age&quot;: 6, &quot;Parents&quot;: [&quot;Gomez&quot;, &quot;Morticia&quot;]&#125;`</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">err := json.Unmarshal(b, &amp;f)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>f</code>指向的值是一个<code>map</code>，key为字符串，value是自身存储作为空接口类型的值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line"><span class="string">&quot;Name&quot;</span>: <span class="string">&quot;Wednesday&quot;</span>,</span><br><span class="line"><span class="string">&quot;Age&quot;</span>:  <span class="number">6</span>,</span><br><span class="line"><span class="string">&quot;Parents&quot;</span>: []<span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line"><span class="string">&quot;Gomez&quot;</span>,</span><br><span class="line"><span class="string">&quot;Morticia&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>要访问该数据可以使用类型断言</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m := f.(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line"><span class="keyword">switch</span> vv := v.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="type">string</span>:</span><br><span class="line">fmt.Println(k, <span class="string">&quot;is string&quot;</span>, vv)</span><br><span class="line"><span class="keyword">case</span> <span class="type">int</span>:</span><br><span class="line">fmt.Println(k, <span class="string">&quot;is int&quot;</span>, vv)</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> []<span class="keyword">interface</span>&#123;&#125;:</span><br><span class="line">fmt.Println(k, <span class="string">&quot;is an array:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i, u := <span class="keyword">range</span> vv &#123;</span><br><span class="line">fmt.Println(i, u)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(k, <span class="string">&quot;is of a type I don’t know how to handle&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过这种方式可以处理未知的 JSON 数据，同时确保类型安全</p><h3 id="编码和解码流"><a href="#编码和解码流" class="headerlink" title="编码和解码流"></a>编码和解码流</h3><p><code>json</code> 包提供 <code>Decoder</code> 和 <code>Encoder</code> 类型来支持常用 JSON 数据流读写。<code>NewDecoder()</code> 和 <code>NewEncoder()</code> 分别封装了 <code>io.Reader</code> 和 <code>io.Writer</code> 接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewDecoder</span><span class="params">(r io.Reader)</span></span> *Decoder</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewEncoder</span><span class="params">(w io.Writer)</span></span> *Encoder</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>要想把 JSON 直接写入文件，可以使用 <code>json.NewEncoder</code> 初始化文件（或者任何实现 <code>io.Writer</code> 的类型），并调用 <code>Encode()</code>；反过来与其对应的是使用 <code>json.NewDecoder</code> 和 <code>Decode()</code> 函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewDecoder</span><span class="params">(r io.Reader)</span></span> *Decoder</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dec *Decoder)</span></span> Decode(v <span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>目标或源数据要能够被编码就必须实现 <code>io.Writer</code> 或 <code>io.Reader</code> 接口。由于 Go 语言中到处都实现了 Reader 和 Writer，因此 <code>Encoder</code> 和 <code>Decoder</code> 应用场景非常广泛，例如读取或写入 HTTP 连接、websockets 或文件</p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>计算机程序在运行时，可以访问、检测和修改它本身状态或行为的能力</p><p>在reflect包中定义了一个接口和一个结构体，即reflect.Type和reflect.Value结构体，它们提供了很多函数获取存储在接口中的类型信息</p><ul><li>reflect.Type接口主要提供关于类型相关的信息</li><li>reflect.Value结构体主要提供关于值相关的信息，可以获取甚至改变类型的值</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TypeOf</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> Type</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ValueOf</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> Value</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>TypeOf用于提取一个接口中值的类型信息，实参会先被转化为空接口类型，这样，实参的类型信息、方法集、值信息都存储到interface{}中了；ValueOf()返回一个结构体变量，包含类型信息及实际值</p><h4 id="反射的三大法则"><a href="#反射的三大法则" class="headerlink" title="反射的三大法则"></a>反射的三大法则</h4><ul><li><p>反射可以将<code>接口类型变量</code>转换为<code>反射类型对象</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="type">float64</span> = <span class="number">6.8</span></span><br><span class="line">v := reflect.ValueOf(x)</span><br><span class="line">fmt.Println(<span class="string">&quot;type:&quot;</span>,v.Type())</span><br><span class="line">fmt.Println(<span class="string">&quot;Kind is float64:&quot;</span>,v.Kind() == reflect.Float64)</span><br><span class="line">fmt.Println(<span class="string">&quot;value&quot;</span>,v.Float())</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>反射可以将<code>反射类型对象</code>转换为<code>接口类型变量</code></p><p>Go中的反射可以创造自己反面类型的对象，一个<code>reflect.Value</code>类型的变量，可以使用<code>Interface()</code>方法恢复其接口类型的值；该方法会将type和value信息打包并填充到一个接口变量中，然后返回</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">y := v.Interface().(<span class="type">float64</span>)</span><br><span class="line">fmt.Println(y)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>若要修改<code>反射类型对象</code>，则其值必须是<code>可写的</code></p><p>要让反射对象具备可写性需要注意：创建反射对象时传入变量的是指针；使用Elem()方法返回指针指向的数据</p><ul><li><p>不是接收变量指针创建的反射对象，是不具备可写性的</p></li><li><p>是否具备可写性，可使用CanSet方法得知</p></li><li><p>对不具备可写性的对象修改是无意义的，也是不合法的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name <span class="type">string</span> = <span class="string">&quot;Go web&quot;</span></span><br><span class="line"></span><br><span class="line">v1 := reflect.ValueOf(&amp;name)</span><br><span class="line">v2 := v1.Elem()</span><br><span class="line"></span><br><span class="line"><span class="comment">//v1不具有可写性，v2具有可写性</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="修改反射对象"><a href="#修改反射对象" class="headerlink" title="修改反射对象"></a>修改反射对象</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span></span> SetBool(x <span class="type">bool</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span></span> SetBytes(x []<span class="type">byte</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span></span> SetFloat(x <span class="type">float64</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span></span> SetInt(x <span class="type">int64</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span></span> SetString(x <span class="type">string</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="读写数据"><a href="#读写数据" class="headerlink" title="读写数据"></a>读写数据</h2><h3 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h3><h4 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h4><p>标准输入 <code>os.Stdin</code> 和标准输出 <code>os.Stdout</code>的类型都是 <code>*os.File</code>；文件使用指向 <code>os.File</code> 类型的指针表示，也即文件句柄</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bufio&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    inputFile, _ := os.Open(<span class="string">&quot;input.dat&quot;</span>)</span><br><span class="line">    <span class="keyword">defer</span> inputFile.Close()</span><br><span class="line"></span><br><span class="line">    inputReader := bufio.NewReader(inputFile)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        inputString, readerError := inputReader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        fmt.Printf(<span class="string">&quot;The input was: %s&quot;</span>, inputString)</span><br><span class="line">        <span class="keyword">if</span> readerError == io.EOF &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//若文件不存在或无权打开文件，则Open函数会返回一个错误：inputFile, inputError = os.Open</span></span><br><span class="line"><span class="comment">//若文件打开正常，则使用defer inputFile.Close()确保程序退出前关闭该文件；然后使用bufio.NewReader()获得一个读取器变量，通过其可以方便地操作相对高层的string对象，避免操作较底层的字节</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：</strong> Unix 和 Linux 的行结束符是 <code>\n</code>，而 Windows 的行结束符是 <code>\r\n</code>；在使用 <code>ReadString</code> 和 <code>ReadBytes</code> 方法的时候不用关心操作系统类型，直接使用 <code>\n</code> 即可。另外也可以使用 <code>ReadLine()</code> 方法来实现相同的功能</p><p>一旦读取到文件末尾，<code>readerError</code>的值变为常量<code>io.EOF</code></p><h5 id="将文件内容读入字符串"><a href="#将文件内容读入字符串" class="headerlink" title="将文件内容读入字符串"></a>将文件内容读入字符串</h5><p>可以使用 <code>io/ioutil</code> 中的 <code>ioutil.ReadFile()</code> 方法，该方法第一个返回值的类型是 <code>[]byte</code>，里面存放读取到的内容，第二个返回值是错误，如果没有错误发生，第二个返回值为 <code>nil</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">buf, _ := ioutil.ReadFile(inputFile)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, <span class="type">string</span>(buf))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="带缓冲的读取"><a href="#带缓冲的读取" class="headerlink" title="带缓冲的读取"></a>带缓冲的读取</h5><p>有时文件内容不按行划分或为二进制，此时<code>ReadString()</code>无法使用；可以使用<code>bufio.Reader</code>中的<code>Read()</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">1024</span>)</span><br><span class="line">...</span><br><span class="line">n, err := inputReader.Read(buf)<span class="comment">//n表示读取到的字节数</span></span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>) &#123; <span class="keyword">break</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="按列读取文件数据"><a href="#按列读取文件数据" class="headerlink" title="按列读取文件数据"></a>按列读取文件数据</h5><p>若数据按列排列且用空格分隔，可使用<code>fmt</code>中以<code>FScan...</code>开头的系列函数读取</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    file, err := os.Open(<span class="string">&quot;products2.txt&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> col1, col2, col3 []<span class="type">string</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> v1, v2, v3 <span class="type">string</span></span><br><span class="line">        _, err := fmt.Fscanln(file, &amp;v1, &amp;v2, &amp;v3)</span><br><span class="line">        <span class="comment">// scans until newline</span></span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        col1 = <span class="built_in">append</span>(col1, v1)</span><br><span class="line">        col2 = <span class="built_in">append</span>(col2, v2)</span><br><span class="line">        col3 = <span class="built_in">append</span>(col3, v3)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(col1)</span><br><span class="line">    fmt.Println(col2)</span><br><span class="line">    fmt.Println(col3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ABC FUNC GO]</span><br><span class="line">[40 56 45]</span><br><span class="line">[150 280 356]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span> <span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// var outputWriter *bufio.Writer</span></span><br><span class="line"><span class="comment">// var outputFile *os.File</span></span><br><span class="line"><span class="comment">// var outputError os.Error</span></span><br><span class="line"><span class="comment">// var outputString string</span></span><br><span class="line">outputFile, _ := os.OpenFile(<span class="string">&quot;output.dat&quot;</span>, os.O_WRONLY|os.O_CREATE, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">defer</span> outputFile.Close()</span><br><span class="line"></span><br><span class="line">outputWriter := bufio.NewWriter(outputFile)</span><br><span class="line">outputString := <span class="string">&quot;hello world!\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++ &#123;</span><br><span class="line">outputWriter.WriteString(outputString)</span><br><span class="line">&#125;</span><br><span class="line">outputWriter.Flush()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>OpenFile</code> 函数有三个参数：文件名、一个或多个标志（使用逻辑运算符 <code>|</code> 连接），使用的文件权限</p><ul><li><code>os.O_RDONLY</code>：只读  </li><li><code>os.O_WRONLY</code>：只写  </li><li><code>os.O_CREATE</code>：创建：如果指定文件不存在，就创建该文件 </li><li><code>os.O_TRUNC</code>：截断：如果指定文件已存在，就将该文件的长度截为 0</li></ul><p>在读文件的时候，文件的权限是被忽略的，所以在使用 <code>OpenFile()</code> 时传入的第三个参数可以用 0 。而在写文件时，不管是 Unix 还是 Windows，都需要使用 &#96;</p><p>然后创建一个写入器（缓冲区）对象：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">outputWriter := bufio.NewWriter(outputFile)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接着用 <code>for</code> 循环写入缓冲区：<code>outputWriter.WriteString(outputString)</code></p><p>缓冲区的内容紧接着被完全写入文件：<code>outputWriter.Flush()</code></p><p>若写入的东西很简单，可以使用 <code>fmt.Fprintf(outputFile, &quot;Some test data.\n&quot;)</code> 直接将内容写入文件。<code>fmt</code> 包里的 <code>F...</code> 开头的 <code>Print()</code> 函数可以直接写入任何 <code>io.Writer</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不使用fmt.FPrintf()函数写文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">os.Stdout.WriteString(<span class="string">&quot;hello, world\n&quot;</span>)<span class="comment">//可以输出到屏幕</span></span><br><span class="line">f, _ := os.OpenFile(<span class="string">&quot;test&quot;</span>, os.O_CREATE|os.O_WRONLY, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line">f.WriteString(<span class="string">&quot;hello, world in a file\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不使用缓冲区，直接将内容写入文件：f.WriteString()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="XML数据格式"><a href="#XML数据格式" class="headerlink" title="XML数据格式"></a>XML数据格式</h3><p>如同 <code>json</code> 包一样，也有 <code>xml.Marshal()</code> 和 <code>xml.Unmarshal()</code> 从 XML 中编码和解码数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// xml.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/xml&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> t, token xml.Token</span><br><span class="line"><span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">input := <span class="string">&quot;&lt;Person&gt;&lt;FirstName&gt;Laura&lt;/FirstName&gt;&lt;LastName&gt;Lynn&lt;/LastName&gt;&lt;/Person&gt;&quot;</span></span><br><span class="line">inputReader := strings.NewReader(input)</span><br><span class="line">p := xml.NewDecoder(inputReader)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t, err = p.Token(); err == <span class="literal">nil</span>; t, err = p.Token() &#123;</span><br><span class="line"><span class="keyword">switch</span> token := t.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> xml.StartElement:</span><br><span class="line">name := token.Name.Local</span><br><span class="line">fmt.Printf(<span class="string">&quot;Token name: %s\n&quot;</span>, name)</span><br><span class="line"><span class="keyword">for</span> _, attr := <span class="keyword">range</span> token.Attr &#123;</span><br><span class="line">attrName := attr.Name.Local</span><br><span class="line">attrValue := attr.Value</span><br><span class="line">fmt.Printf(<span class="string">&quot;An attribute is: %s %s\n&quot;</span>, attrName, attrValue)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> xml.EndElement:</span><br><span class="line">fmt.Println(<span class="string">&quot;End of token&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> xml.CharData:</span><br><span class="line">content := <span class="type">string</span>([]<span class="type">byte</span>(token))</span><br><span class="line">fmt.Printf(<span class="string">&quot;This is the content: %v\n&quot;</span>, content)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Token name: Person</span><br><span class="line">Token name: FirstName</span><br><span class="line">This is the content: Laura</span><br><span class="line">End of token</span><br><span class="line">Token name: LastName</span><br><span class="line">This is the content: Lynn</span><br><span class="line">End of token</span><br><span class="line">End of token</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>XML 文本被循环处理直到 <code>Token()</code> 返回一个错误，因为已经到达文件尾部，再没有内容可供处理了。通过一个 type-switch 可以根据一些 XML 标签进一步处理。Chardata 中的内容只是一个 <code>[]byte</code>，通过字符串转换让其变得可读性更强</p><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><h3 id="recover"><a href="#recover" class="headerlink" title="recover"></a>recover</h3><p><code>recover()</code>内建函数用于从panic或错误场景中恢复：停止终止过程进而恢复正常执行</p><p><code>recover</code> 只能在 <code>defer</code> 修饰的函数中使用：取得 <code>panic()</code> 调用中传递过来的错误值，如果是正常执行，调用 <code>recover()</code> 会返回 <code>nil</code>，且没有其它效果</p><p>即<code>panic()</code> 会导致栈被展开直到 <code>defer</code> 修饰的 <code>recover()</code> 被调用或程序中止</p><p><code>defer</code>-<code>panic()</code>-<code>recover()</code> 某种意义上也是一种像 <code>if</code>，<code>for</code> 的控制流机制</p><h3 id="闭包处理错误"><a href="#闭包处理错误" class="headerlink" title="闭包处理错误"></a>闭包处理错误</h3><p>每当函数返回时，我们应该检查是否有错误发生：但是这会导致重复乏味的代码。结合 defer&#x2F;panic&#x2F;recover 机制和闭包可以得到一个我们马上要讨论的更加优雅的模式。不过这个模式只有当所有的函数都是同一种签名时可用，这样就有相当大的限制。一个很好的使用它的例子是 web 应用，所有的处理函数都是下面这样：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler1</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123; ... &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>假设所有的函数都有这样的签名：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(a type1, b type2)</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参数的数量和类型是不相关的。给这个类型一个名字：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fType1 = <span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(a type1, b type2)</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在该模式中使用了两个帮助函数：</p><p>1）<code>check()</code>：这是用来检查是否有错误和 panic 发生的函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">check</span><span class="params">(err <span class="type">error</span>)</span></span> &#123; <span class="keyword">if</span> err != <span class="literal">nil</span> &#123; <span class="built_in">panic</span>(err) &#125; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2）<code>errorhandler()</code>：这是一个包装函数。接收一个 <code>fType1</code> 类型的函数 <code>fn</code> 并返回一个调用 <code>fn</code> 的函数。里面就包含有 defer&#x2F;recover 机制</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">errorHandler</span><span class="params">(fn fType1)</span></span> fType1 &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(a type1, b type2)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err, ok := <span class="built_in">recover</span>().(<span class="type">error</span>); ok &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;run time panic: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">fn(a, b)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当错误发生时会 recover 并打印在日志中；<code>check()</code> 函数会在所有的被调函数中调用，像这样：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(a type1, b type2)</span></span> &#123;</span><br><span class="line">...</span><br><span class="line">f, _, err := <span class="comment">// call function/method</span></span><br><span class="line">check(err)</span><br><span class="line">t, err := <span class="comment">// call function/method</span></span><br><span class="line">check(err)</span><br><span class="line">_, err2 := <span class="comment">// call function/method</span></span><br><span class="line">check(err2)</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过这种机制，所有的错误都会被 recover，并且调用函数后的错误检查代码也被简化为调用 <code>check(err)</code> 即可。在这种模式下，不同的错误处理必须对应不同的函数类型；它们（错误处理）可能被隐藏在错误处理包内部。可选的更加通用的方式是用一个空接口类型的切片作为参数和返回值</p><h2 id="协程与通道"><a href="#协程与通道" class="headerlink" title="协程与通道"></a>协程与通道</h2><h3 id="带缓冲通道实现一个信号量"><a href="#带缓冲通道实现一个信号量" class="headerlink" title="带缓冲通道实现一个信号量"></a>带缓冲通道实现一个信号量</h3><p>信号量是实现互斥锁常见的同步机制，限制对资源的访问，解决读写问题；使用带缓冲的通道可以实现：</p><ul><li>带缓冲通道的容量和同步资源容量相同</li><li>通道长度（当前存放元素个数）与当前资源被使用数量相同</li><li>容量减去通道长度即未处理资源个数（标准信号量的整数值）</li></ul><p>创建一个长度可变但容量为0（字节）的通道：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Empty <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="keyword">type</span> semaphore <span class="keyword">chan</span> Empty</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将可用资源数量<code>N</code>初始化信号量<code>semaphore</code>：<code>sem = make(semaphore,N)</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// acquire n resources</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s semaphore)</span></span> P(n <span class="type">int</span>) &#123;</span><br><span class="line">e := <span class="built_in">new</span>(Empty)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">s &lt;- e</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// release n resources</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s semaphore)</span></span> V(n <span class="type">int</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> i:= <span class="number">0</span>; i &lt; n; i++&#123;</span><br><span class="line">&lt;- s</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现互斥的例子</span></span><br><span class="line"><span class="comment">/* mutexes */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s semaphore)</span></span> Lock() &#123;</span><br><span class="line">s.P(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s semaphore)</span></span> Unlock()&#123;</span><br><span class="line">s.V(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* signal-wait */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s semaphore)</span></span> Wait(n <span class="type">int</span>) &#123;</span><br><span class="line">s.P(n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s semaphore)</span></span> Signal() &#123;</span><br><span class="line">s.V(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="任务和worker"><a href="#任务和worker" class="headerlink" title="任务和worker"></a>任务和worker</h3><p>假设需要处理很多任务；一个 worker 处理一项任务。任务可以被定义为一个结构体：</p><h4 id="旧模式：使用共享内存进行同步"><a href="#旧模式：使用共享内存进行同步" class="headerlink" title="旧模式：使用共享内存进行同步"></a>旧模式：使用共享内存进行同步</h4><p>由各个任务组成的任务池共享内存；为了同步各个 worker 以及避免资源竞争，需要对任务池进行加锁保护</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Pool <span class="keyword">struct</span> &#123;</span><br><span class="line">    Musync.Mutex</span><br><span class="line">    Tasks[]*Task</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Worker</span><span class="params">(pool *Pool)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        pool.Mu.Lock()</span><br><span class="line">        <span class="comment">// begin critical section:</span></span><br><span class="line">        task := pool.Tasks[<span class="number">0</span>]        <span class="comment">// take the first task</span></span><br><span class="line">        pool.Tasks = pool.Tasks[<span class="number">1</span>:]  <span class="comment">// update the pool of tasks</span></span><br><span class="line">        <span class="comment">// end critical section</span></span><br><span class="line">        pool.Mu.Unlock()</span><br><span class="line">        process(task)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>加锁保证了同一时间只有一个 go 协程可以进入到 <code>pool</code> 中：一项任务有且只有一个worker；但若任务量较多时，频繁地加锁&#x2F;解锁会导致效率降低</p><h4 id="新模式：使用通道"><a href="#新模式：使用通道" class="headerlink" title="新模式：使用通道"></a>新模式：使用通道</h4><p>使用通道进行同步：使用一个通道接受需要处理的任务，一个通道接受处理完成的任务（及其结果）。worker 在协程中启动，其数量 <code>N</code> 应该根据任务数量进行调整；主线程扮演着 Master 节点角色，可能写成如下形式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">pending, done := <span class="built_in">make</span>(<span class="keyword">chan</span> *Task), <span class="built_in">make</span>(<span class="keyword">chan</span> *Task)</span><br><span class="line">    <span class="keyword">go</span> sendWork(pending)       <span class="comment">// put tasks with work on the channel</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; N; i++ &#123;   <span class="comment">// start N goroutines to do work</span></span><br><span class="line">    <span class="keyword">go</span> Worker(pending, done)</span><br><span class="line">    &#125;</span><br><span class="line">consumeWork(done)          <span class="comment">// continue with the processed tasks</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Worker</span><span class="params">(in,out <span class="keyword">chan</span> *Task)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        t := &lt;-in</span><br><span class="line">        process(t)</span><br><span class="line">        out &lt;- t</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="网络及网页应用"><a href="#网络及网页应用" class="headerlink" title="网络及网页应用"></a>网络及网页应用</h2><h3 id="tcp服务器"><a href="#tcp服务器" class="headerlink" title="tcp服务器"></a>tcp服务器</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Starting the server ...&quot;</span>)</span><br><span class="line"><span class="comment">// 创建 listener</span></span><br><span class="line">listener, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;localhost:50000&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Error listening&quot;</span>, err.Error())</span><br><span class="line"><span class="keyword">return</span> <span class="comment">//终止程序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 监听并接受来自客户端的连接</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">conn, err := listener.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Error accepting&quot;</span>, err.Error())</span><br><span class="line"><span class="keyword">return</span> <span class="comment">// 终止程序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> doServerStuff(conn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doServerStuff</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">512</span>)</span><br><span class="line"><span class="built_in">len</span>, err := conn.Read(buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Error reading&quot;</span>, err.Error())</span><br><span class="line"><span class="keyword">return</span> <span class="comment">//终止程序</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Received data: %v&quot;</span>, <span class="type">string</span>(buf[:<span class="built_in">len</span>]))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用一个无限 <code>for</code> 循环的 <code>listener.Accept()</code> 来等待客户端的请求。客户端的请求将产生一个 <code>net.Conn</code> 类型的连接变量。然后一个独立的协程使用这个连接执行 <code>doServerStuff()</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//打开连接:</span></span><br><span class="line">conn, err := net.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;localhost:50000&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">//由于目标计算机积极拒绝而无法创建连接</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Error dialing&quot;</span>, err.Error())</span><br><span class="line"><span class="keyword">return</span> <span class="comment">// 终止程序</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inputReader := bufio.NewReader(os.Stdin)</span><br><span class="line">fmt.Println(<span class="string">&quot;First, what is your name?&quot;</span>)</span><br><span class="line">clientName, _ := inputReader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment">// fmt.Printf(&quot;CLIENTNAME %s&quot;, clientName)</span></span><br><span class="line">trimmedClient := strings.Trim(clientName, <span class="string">&quot;\r\n&quot;</span>) <span class="comment">// Windows 平台下用 &quot;\r\n&quot;，Linux平台下使用 &quot;\n&quot;</span></span><br><span class="line"><span class="comment">// 给服务器发送信息直到程序退出：</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;What to send to the server? Type Q to quit.&quot;</span>)</span><br><span class="line">input, _ := inputReader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">trimmedInput := strings.Trim(input, <span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line"><span class="comment">// fmt.Printf(&quot;input:--%s--&quot;, input)</span></span><br><span class="line"><span class="comment">// fmt.Printf(&quot;trimmedInput:--%s--&quot;, trimmedInput)</span></span><br><span class="line"><span class="keyword">if</span> trimmedInput == <span class="string">&quot;Q&quot;</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">_, err = conn.Write([]<span class="type">byte</span>(trimmedClient + <span class="string">&quot; says: &quot;</span> + trimmedInput))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>客户端通过 <code>net.Dial()</code> 创建了一个和服务器之间的连接，一旦连接到远程系统，函数就会返回一个<code>Conn</code>类型的接口，此时可以用它发送和接收数据</p><h3 id="web服务器"><a href="#web服务器" class="headerlink" title="web服务器"></a>web服务器</h3><p>http描述了网页服务器如何与客户端浏览器进行通信</p><p>若<code>req</code>是来自html表单的POST请求，<code>&quot;var1&quot;是表单中一个输入域的名称</code>，则可以通过<code>req.FormValue(&quot;var1&quot;)</code>获取；或者先执行<code>request.ParseForm()</code>，然后再获取<code>request.Form[&quot;var1&quot;]</code>的第一个返回参数</p><p><code>var1,found := request.Form[&quot;var1&quot;]</code></p><p>若 <code>var1</code> 并未出现在表单中，<code>found</code> 就是 <code>false</code></p><p>表单属性实际上是 <code>map[string][]string</code> 类型。网页服务器发送一个 <code>http.Response</code> 响应，它是通过 <code>http.ResponseWriter</code> 对象输出的，后者组装了 HTTP 服务器响应，通过对其写入内容，就将数据发送给了 HTTP 客户端</p><p>如何处理请求即是<code>http.HandleFunc()</code>函数完成的</p><h4 id="确保网页健壮性"><a href="#确保网页健壮性" class="headerlink" title="确保网页健壮性"></a>确保网页健壮性</h4><p>当网页的处理函数发生 panic，服务器会简单地终止运行，这会造成严重的影响；我们需要网页能够承受突发问题</p><p>首先想到的是在每个处理函数中使用<code>defer/recover()</code>，但是这样会产生较多重复代码，使用闭包的错误处理模式是更优雅的方案</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">logPanics</span><span class="params">(function HandleFunc)</span></span> HandleFunc &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> x := <span class="built_in">recover</span>(); x != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;[%v] caught panic: %v&quot;</span>, request.RemoteAddr, x)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">function(writer, request)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后用<code>logPanics()</code>包装对处理函数的调用，处理函数现在可以恢复panic调用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http.HandleFunc(<span class="string">&quot;/test1&quot;</span>,logPanics(SimpleServer))</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/test2&quot;</span>,logPanics(FormServer))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> form = <span class="string">`&lt;html&gt;&lt;body&gt;&lt;form action=&quot;#&quot; method=&quot;post&quot; name=&quot;bar&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input type=&quot;text&quot; name=&quot;in&quot;/&gt;</span></span><br><span class="line"><span class="string">&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;/&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;&lt;/html&gt;&lt;/body&gt;`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HandleFnc <span class="function"><span class="keyword">func</span><span class="params">(http.ResponseWriter, *http.Request)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* handle a simple get request */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SimpleServer</span><span class="params">(w http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">io.WriteString(w, <span class="string">&quot;&lt;h1&gt;hello, world&lt;/h1&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* handle a form, both the GET which displays the form</span></span><br><span class="line"><span class="comment">   and the POST which processes it.*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FormServer</span><span class="params">(w http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">w.Header().Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html&quot;</span>)</span><br><span class="line"><span class="keyword">switch</span> request.Method &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;GET&quot;</span>:</span><br><span class="line"><span class="comment">/* display the form to the user */</span></span><br><span class="line">io.WriteString(w, form)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;POST&quot;</span>:</span><br><span class="line"><span class="comment">/* handle the form data, note that ParseForm must</span></span><br><span class="line"><span class="comment">   be called before we can extract form data*/</span></span><br><span class="line"><span class="comment">//request.ParseForm();</span></span><br><span class="line"><span class="comment">//io.WriteString(w, request.Form[&quot;in&quot;][0])</span></span><br><span class="line">io.WriteString(w, request.FormValue(<span class="string">&quot;in&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/test1&quot;</span>, logPanics(SimpleServer))</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/test2&quot;</span>, logPanics(FormServer))</span><br><span class="line"><span class="keyword">if</span> err := http.ListenAndServe(<span class="string">&quot;:8088&quot;</span>, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">logPanics</span><span class="params">(function HandleFnc)</span></span> HandleFnc &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> x := <span class="built_in">recover</span>(); x != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;[%v] caught panic: %v&quot;</span>, request.RemoteAddr, x)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">function(writer, request)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="错误和陷阱"><a href="#错误和陷阱" class="headerlink" title="错误和陷阱"></a>错误和陷阱</h2><h3 id="循环中defer"><a href="#循环中defer" class="headerlink" title="循环中defer"></a>循环中defer</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _, file := <span class="keyword">range</span> files &#123;</span><br><span class="line">    <span class="keyword">if</span> f, err = os.Open(file); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这是错误的方式，当循环结束时文件没有关闭</span></span><br><span class="line">    <span class="keyword">defer</span> f.Close()</span><br><span class="line">    <span class="comment">// 对文件进行操作</span></span><br><span class="line">    f.Process(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在循环内结尾处的 <code>defer</code> 没有执行，所以文件一直没有关闭，不应该使用<code>defer</code></p><p><strong><code>defer</code> 仅在函数返回时才会执行，在循环内的结尾或其他一些有限范围的代码内不会执行</strong></p><h3 id="函数参数传递切片"><a href="#函数参数传递切片" class="headerlink" title="函数参数传递切片"></a>函数参数传递切片</h3><p>切片实际是一个指向潜在数组的指针，以切片为参数时只需如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findBiggest</span><span class="params">( listOfNumbers []<span class="type">int</span> )</span></span> <span class="type">int</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><h3 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h3><p>在RPC的应用中一般至少有三种角色：首先是服务端实现RPC方法的开发人员，其次是客户端调用PRC方法的人员，最后是指定服务端和客户端RPC接口规范</p><p>将RPC服务接口规范分为三个部分：首先是服务的名字，然后是实现的详细方法列表，最后是注册类型服务的函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HelloServiceName = <span class="string">&quot;path/to/pkg.HelloService&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HelloServiceInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">Hello(request <span class="type">string</span>, reply *<span class="type">string</span>) <span class="type">error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RegisterHelloService</span><span class="params">(svc HelloServiceInterface)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> rpc.RegisterName(HelloServiceName, svc)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h2><h3 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改字符串中的一个字符</span></span><br><span class="line">src := <span class="string">&quot;hello&quot;</span></span><br><span class="line">c := []<span class="type">byte</span>(str)</span><br><span class="line">c[<span class="number">0</span>] = <span class="string">&#x27;c&#x27;</span></span><br><span class="line">s2 := <span class="type">string</span>(c)<span class="comment">//s2 == &quot;cello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取字符串的子串</span></span><br><span class="line">substr := str[n:m]</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历字符串</span></span><br><span class="line"><span class="comment">// gives only the bytes:</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i &lt; <span class="built_in">len</span>(str); i++ &#123;</span><br><span class="line">… = str[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// gives the Unicode characters:</span></span><br><span class="line"><span class="keyword">for</span> ix, ch := <span class="keyword">range</span> str &#123;</span><br><span class="line">…</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取一个字符串的字节数</span></span><br><span class="line"><span class="built_in">len</span>(str)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取一个字符串的字符数</span></span><br><span class="line">utf8.RuneCountInString(str)<span class="comment">//len([]rune(str))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如何连接字符串(bytes.Buffer/Strings.Join()/+=)</span></span><br><span class="line"><span class="keyword">var</span> buffer bytes.Buffer</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> s,ok := getNextString(); ok &#123;</span><br><span class="line">        buffer.WriteString(s)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Print(buffer.String(), <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数组和切片-1"><a href="#数组和切片-1" class="headerlink" title="数组和切片"></a>数组和切片</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建（分配内存，未初始化）</span></span><br><span class="line">arr1 := <span class="built_in">new</span>([<span class="built_in">len</span>]<span class="keyword">type</span>)</span><br><span class="line">slice1 := <span class="built_in">make</span>([]<span class="keyword">type</span>,<span class="built_in">len</span>)</span><br><span class="line"><span class="comment">//初始化（赋值）</span></span><br><span class="line">arr1 := [...]<span class="keyword">type</span>&#123;i1,i2,i3,i4,i5&#125;</span><br><span class="line">arrKeyValue := [<span class="built_in">len</span>]<span class="keyword">type</span>&#123;i1:val1,i2:val2&#125;</span><br><span class="line"><span class="keyword">var</span> slice1 []<span class="keyword">type</span> = arr1[start:end]</span><br><span class="line"><span class="comment">//appendInt实现</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">appendInt</span><span class="params">(x []<span class="type">int</span>,y <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> z []<span class="type">int</span></span><br><span class="line">    zlen := <span class="built_in">len</span>(x) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> zlen &lt;= <span class="built_in">cap</span>(x) &#123;</span><br><span class="line">        z = x[:zlen]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        zcap := zlen</span><br><span class="line">        <span class="keyword">if</span> zcap &lt; <span class="number">2</span>*<span class="built_in">len</span>(x) &#123;</span><br><span class="line">            zcap = <span class="number">2</span> * <span class="built_in">len</span>(x)</span><br><span class="line">        &#125;</span><br><span class="line">        z = <span class="built_in">make</span>([]<span class="type">int</span>,zlen,zcap)</span><br><span class="line">        <span class="built_in">copy</span>(z,x)</span><br><span class="line">    &#125;</span><br><span class="line">    z[<span class="built_in">len</span>(x)] = y</span><br><span class="line">    <span class="keyword">return</span> z</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建</span></span><br><span class="line">map1 := <span class="built_in">make</span>(<span class="keyword">map</span>[keytype]valuetype)</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">map1 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;one&quot;</span>:<span class="number">1</span>,<span class="string">&quot;two&quot;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="comment">//检测key1是否存在</span></span><br><span class="line">val1,isPresent = map1[key1]</span><br><span class="line"><span class="comment">//在映射中删除一个键</span></span><br><span class="line"><span class="built_in">delete</span>(map1,key1)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检测一个值v是否实现了接口Stringer</span></span><br><span class="line"><span class="keyword">if</span> v, ok := v.(Stringer); ok &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;implements String(): %s\n&quot;</span>, v.String())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用接口实现一个类型分类函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">classifier</span><span class="params">(items ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i, x := <span class="keyword">range</span> items &#123;</span><br><span class="line">        <span class="keyword">switch</span> x.(<span class="keyword">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">bool</span>:</span><br><span class="line">            fmt.Printf(<span class="string">&quot;param #%d is a bool\n&quot;</span>, i)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">float64</span>:</span><br><span class="line">            fmt.Printf(<span class="string">&quot;param #%d is a float64\n&quot;</span>, i)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">int</span>, <span class="type">int64</span>:</span><br><span class="line">            fmt.Printf(<span class="string">&quot;param #%d is an int\n&quot;</span>, i)</span><br><span class="line">        <span class="keyword">case</span> <span class="literal">nil</span>:</span><br><span class="line">            fmt.Printf(<span class="string">&quot;param #%d is nil\n&quot;</span>, i)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">string</span>:</span><br><span class="line">            fmt.Printf(<span class="string">&quot;param #%d is a string\n&quot;</span>, i)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            fmt.Printf(<span class="string">&quot;param #%d’s type is unknown\n&quot;</span>, i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//内建函数recover()终止panic()过程</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">protect</span><span class="params">(g <span class="keyword">func</span>()</span></span>) &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    log.Println(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> x := <span class="built_in">recover</span>(); x != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Printf(<span class="string">&quot;run time panic: %v&quot;</span>, x)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    log.Println(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">    g()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打开一个文件并读取</span></span><br><span class="line">file,err := os.Open(<span class="string">&quot;input.dat&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;An error occurred on opening the inputfile\n&quot;</span> +</span><br><span class="line">      <span class="string">&quot;Does the file exist?\n&quot;</span> +</span><br><span class="line">      <span class="string">&quot;Have you got acces to it?\n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.<span class="built_in">close</span>()</span><br><span class="line">iReader :+ bufio.NewReader(file)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">str, err := iReader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="comment">// error or EOF</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;The input was: %s&quot;</span>, str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过切片读写文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cat</span><span class="params">(f *file.File)</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> NBUF = <span class="number">512</span></span><br><span class="line">    <span class="keyword">var</span> buf [NBUF]<span class="type">byte</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> nr, er := f.Read(buf[:]); <span class="literal">true</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> nr &lt; <span class="number">0</span>:</span><br><span class="line">            fmt.Fprintf(os.Stderr, <span class="string">&quot;cat: error reading from %s: %s\n&quot;</span>,f.String(), er.String())</span><br><span class="line">      os.Exit(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">case</span> nr == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">case</span> nr &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> nw, ew := file.Stdout.Write(buf[<span class="number">0</span>:nr]); nw != nr &#123;</span><br><span class="line">        fmt.Fprintf(os.Stderr, <span class="string">&quot;cat: error writing from %s: %s\n&quot;</span>,f.String(), ew.String())</span><br><span class="line">      &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="协程与通道-1"><a href="#协程与通道-1" class="headerlink" title="协程与通道"></a>协程与通道</h3><p>在协程内部完成的工作量，必须远远高于协程的创建和相互来回通信的开销</p><ul><li><p>出于性能考虑建议使用带缓存的通道：</p><p>使用带缓存的通道可以轻易提高它的吞吐量，通过调整通道的容量，甚至可以尝试着更进一步的优化其性能</p></li><li><p>限制一个通道的数据数量并将它们封装成一个数组：</p><p>如果使用通道传递大量单独的数据，那么通道将变成性能瓶颈。然而，将数据块打包封装成数组，在接收端解压数据时性能可以提高</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个带缓存的通道</span></span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">type</span>,buf)</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历一个通道</span></span><br><span class="line"><span class="keyword">for</span> v := <span class="keyword">range</span> ch &#123;</span><br><span class="line">    <span class="comment">// do something with v</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检测一个通道是否关闭</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> input,open := &lt;-ch; !open &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%s&quot;</span>, input)</span><br><span class="line">&#125;<span class="comment">//或者遍历通道检测</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过通道让主程序等待，直到协程完成（信号量模式）</span></span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ch &lt;- <span class="number">1</span></span><br><span class="line">&#125;()</span><br><span class="line">doSomethingElseForAWhile()</span><br><span class="line">&lt;-ch<span class="comment">//若希望程序一直阻塞，在匿名函数中省略ch &lt;- 1即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通道的工厂模版</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pump</span><span class="params">()</span></span> <span class="keyword">chan</span> <span class="type">int</span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i++ &#123;</span><br><span class="line">            ch &lt;- i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> ch</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//终止一个协程</span></span><br><span class="line">runtime.Goexit()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="URL映射应用"><a href="#URL映射应用" class="headerlink" title="URL映射应用"></a>URL映射应用</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>变量 <code>URLStore</code> 是中心化的内存存储，当收到很多 <code>Redirect</code> 服务的请求时，这些请求只涉及读操作：以给定的短 URL 作为键，返回对应的长 URL 的值。然而，对 <code>Add</code> 服务的请求则大不相同，它们会更改 <code>URLStore</code>，添加新的键值对。当在瞬间收到大量更新请求时，可能会产生如下问题：添加操作可能被另一个同类请求打断，写入的长 URL 值可能会丢失；另外，读取和更改同时进行，导致可能读到脏数据。 <code>map</code> 并不保证当开始更新数据时，会彻底阻止另一个更新操作的启动，即<code>map</code> 不是线程安全的，要使线程安全最经典的方法是为其增加一个锁</p><p>将<code>URLStore</code>定义为一个结构体：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="keyword">type</span> URLStore <span class="keyword">struct</span> &#123;</span><br><span class="line">urls <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span><span class="comment">// map from short to long URLs</span></span><br><span class="line">mu sync.RWMutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *URLStore)</span></span> Get(key <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line">    s.mu.RLock()</span><br><span class="line">    <span class="keyword">defer</span> s.mu.RUnlock()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> s.urls[key]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *URLStore)</span></span> Set(key,url <span class="type">string</span>) <span class="type">bool</span> &#123;</span><br><span class="line">    s.mu.Lock()</span><br><span class="line">    <span class="keyword">defer</span> s.mu.Unlock()</span><br><span class="line">    _,present := s.urls[key]</span><br><span class="line">    <span class="keyword">if</span> present &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">s.urls[key] = url</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="URLStore工厂函数"><a href="#URLStore工厂函数" class="headerlink" title="URLStore工厂函数"></a>URLStore工厂函数</h4><p><code>URLStore()</code>结构体中包含<code>map</code>类型的字段，使用前需<code>make()</code>初始化；在Go中创建一个结构体实例，一般通过定义一个前缀<code>New</code>（其中锁无需指明初始化）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewURLStore</span><span class="params">()</span></span> *URLStore &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;URLStore&#123; urls: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><h4 id="不考虑并发安全"><a href="#不考虑并发安全" class="headerlink" title="不考虑并发安全"></a>不考虑并发安全</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> singleton</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> singleton <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance *singleton</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetInstance</span><span class="params">()</span></span> *singleton &#123;</span><br><span class="line">    <span class="keyword">if</span> instance == <span class="literal">nil</span> &#123;</span><br><span class="line">        instance = &amp;singleton&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上述情况中，多个goroutine可执行第一个检查，使得创建的<code>singleton</code>类型的实例相互覆盖，无法保证返回哪个实例</p><p>如果有代码保留了对该实例的引用，可能存在具有不同状态的该类型的多个实例</p><h4 id="激进的加锁"><a href="#激进的加锁" class="headerlink" title="激进的加锁"></a>激进的加锁</h4><p>对上述问题加锁能够解决并发安全的问题，但是会使得并发调用变成串行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mu Sync.Mutex</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetInstance</span><span class="params">()</span></span> *singleton &#123;</span><br><span class="line">    mu.Lock()                    <span class="comment">// 如果实例存在没有必要加锁</span></span><br><span class="line">    <span class="keyword">defer</span> mu.Unlock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> instance == <span class="literal">nil</span> &#123;</span><br><span class="line">        instance = &amp;singleton&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Check-Lock-Check模式"><a href="#Check-Lock-Check模式" class="headerlink" title="Check-Lock-Check模式"></a>Check-Lock-Check模式</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">if</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">lock</span>() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">if</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 在这里执行加锁安全的代码</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先进行检查，因为if语句的开销比加锁小，其次，进行等待并获取互斥锁，此时在同一时刻只有一个执行，但是，在第一次检查和获取互斥锁之间可能有其他goroutine获取了锁，故在锁的内部需再次检查</p><p>因此改进后的<code>GetInstance()</code>方法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetInstance</span><span class="params">()</span></span> *singleton &#123;</span><br><span class="line">    <span class="keyword">if</span> instance == <span class="literal">nil</span> &#123;<span class="comment">//不太完美，因为这里不是完全原子的</span></span><br><span class="line">        mu.Lock()</span><br><span class="line">        <span class="keyword">defer</span> mu.Unlock()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> instance == <span class="literal">nil</span> &#123;</span><br><span class="line">            instance = &amp;singleton&#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过使用<code>sync/atomic</code>包，可以原子化加载并设置一个标志，该标志表明是否已初始化实例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;sync/atomic&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> initialized <span class="type">uint32</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetInstance</span><span class="params">()</span></span> *singleton &#123;</span><br><span class="line">    <span class="keyword">if</span> atomic.LoadUint32(&amp;initialized) == <span class="number">1</span> &#123;<span class="comment">// 原子操作</span></span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line">    &#125;</span><br><span class="line">    mu.Lock()</span><br><span class="line">    <span class="keyword">defer</span> mu.Unlock()</span><br><span class="line">    <span class="keyword">if</span> initialized == <span class="number">0</span> &#123;</span><br><span class="line">        instance = &amp;singleton&#123;&#125;</span><br><span class="line">        atomic.StoreUnit32(&amp;initialized,<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Go惯用的单例模式"><a href="#Go惯用的单例模式" class="headerlink" title="Go惯用的单例模式"></a>Go惯用的单例模式</h4><p>在标准库<code>sync</code>中有<code>Once</code>类型，它能保证某个操作只执行一次</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Once <span class="keyword">struct</span> &#123;</span><br><span class="line">    done <span class="type">uint32</span></span><br><span class="line">    m    Mutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *Once)</span></span> Do(f <span class="function"><span class="keyword">func</span><span class="params">()</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> atomic.LoadUint32(&amp;o.done) == <span class="number">0</span> &#123; <span class="comment">// check</span></span><br><span class="line">        o.doSlow(f)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *Once)</span></span> doSlow(f <span class="function"><span class="keyword">func</span><span class="params">()</span></span>) &#123;</span><br><span class="line">    o.m.Lock()                          <span class="comment">// lock</span></span><br><span class="line">    <span class="keyword">defer</span> o.m.Unlock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> o.done == <span class="number">0</span> &#123;                    <span class="comment">// check</span></span><br><span class="line">        <span class="keyword">defer</span> atomic.StoreUint32(&amp;o.done, <span class="number">1</span>)</span><br><span class="line">        f()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因此可以利用<code>sync.Once</code>类型同步对<code>GetInstance()</code>的访问，并确保类型仅被初始化一次</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> singleton</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> singleton <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance *singleton</span><br><span class="line"><span class="keyword">var</span> once sync.Once</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetInstance</span><span class="params">()</span></span> *singleton &#123;</span><br><span class="line">    once.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">        instance = &amp;singleton&#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用<code>sync.Once</code>包是安全地实现此目标的首选方式，类似于Objective-C和Swift（Cocoa）实现<code>dispatch_once</code>方法来执行类似的初始化</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>butterfly主题扩展</title>
      <link href="/2023/10/13/butterfly%E4%B8%BB%E9%A2%98%E6%89%A9%E5%B1%95/"/>
      <url>/2023/10/13/butterfly%E4%B8%BB%E9%A2%98%E6%89%A9%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<h4 id="Butterfly主题配置"><a href="#Butterfly主题配置" class="headerlink" title="Butterfly主题配置"></a>Butterfly主题配置</h4><h5 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h5><ul><li><p>移动到博客所在根目录</p></li><li><p>下载主题代码到themes中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 方式1：git方式安装</span><br><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br><span class="line"></span><br><span class="line"># 方式2：npm方式安装</span><br><span class="line">npm i hexo-themebutterfly</span><br></pre></td></tr></table></figure></li><li><p>修改hexo的_config.yml文件，将主题改为butterfly</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><p>若重启、打开页面报如下错误，因没有<strong>pug</strong>以及 <strong>stylus</strong> 的渲染器，需要安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extends includes/layout.pug block content include ./includes/mixins/post-ui.pug #recent-posts.recent-posts +postUI include includes/pagination.pug</span><br></pre></td></tr></table></figure></li><li><p>安装pub &amp; stylus</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure></li><li><p>最后重启hexo即可</p></li></ul><h5 id="修改主题配置"><a href="#修改主题配置" class="headerlink" title="修改主题配置"></a>修改主题配置</h5><p>主题的配置在 <strong>&#x2F;www&#x2F;wwwroot&#x2F;blog&#x2F;themes&#x2F;butterfly&#x2F;_config.yml</strong> 文件中</p><h5 id="鼠标样式更改"><a href="#鼠标样式更改" class="headerlink" title="鼠标样式更改"></a>鼠标样式更改</h5><p>首先准备想要生成鼠标样式的图片，调整对应的像素大小，将图片类型转换为.cur（或直接在<a href="https://zhutix.com/tag/cursors/">鼠标指针 - 光标 - 电脑鼠标指针下载 - 致美化 - 漫锋网 (zhutix.com)</a>中找想要的样式），在主题路径source的css文件夹中新建一个mouse文件夹用于存放这些图片</p><h6 id="代码引入"><a href="#代码引入" class="headerlink" title="代码引入"></a>代码引入</h6><p>在butterfly主题的<code>_config.yml</code>文件中修改如下：</p><p><img src="https://s1.ax1x.com/2023/01/28/pSUjNCV.png"></p><p>在主题路径source中的css文件夹新建一个<code>mouse.css</code>文件，加入类似下列内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">&#x27;./mouse/alternate.cur&#x27;</span>), auto <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 悬停图片时的鼠标指针 */</span></span><br><span class="line"><span class="comment">/* 选择链接标签时的鼠标指针 */</span></span><br><span class="line"><span class="comment">/* 选中输入框时的鼠标指针 */</span></span><br><span class="line"><span class="comment">/* 悬停按钮时的鼠标指针 */</span></span><br><span class="line"><span class="comment">/* 悬停列表标签时的鼠标指针 */</span></span><br><span class="line"><span class="comment">/* 悬停页脚链接标签（例如页脚徽标）时的鼠标指针 */</span></span><br><span class="line"><span class="comment">/* 悬停页码时的鼠标指针 */</span></span><br><span class="line"><span class="comment">/* 悬停菜单栏时的鼠标指针 */</span></span><br><span class="line"><span class="selector-tag">img</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-tag">i</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-id">#footer-wrap</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-id">#pagination</span> <span class="selector-class">.page-number</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-id">#nav</span> <span class="selector-class">.site-page</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">&#x27;./mouse/link.cur&#x27;</span>), auto <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新刷新即可看到鼠标样式已经生效</p><h5 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h5><h6 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><h6 id="更改配置"><a href="#更改配置" class="headerlink" title="更改配置"></a>更改配置</h6><p>在<code>主配置文件</code>中插入类似下列代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">all</span> <span class="comment"># post:文章范围、page:页面范围、all:覆盖所有</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span> <span class="comment"># 内容是否包含每一篇文章的全部内容</span></span><br><span class="line">  <span class="attr">template:</span>  <span class="comment"># ./search.xml 指定定制的XML模板</span></span><br></pre></td></tr></table></figure><p>将butterfly配置文件中<code>local_search</code>的<code>enable</code>参数设为true表示开启本地搜索</p><h5 id="主题图片的更改"><a href="#主题图片的更改" class="headerlink" title="主题图片的更改"></a>主题图片的更改</h5><p><font color=red>图片的大小最好不要超过3M，否则会影响文章的打开速度</font></p><h6 id="网站logo"><a href="#网站logo" class="headerlink" title="网站logo"></a>网站logo</h6><p>将图片的名称更改为<code>favicon.png</code>替换掉source下的img中的原logo即可</p><h6 id="头像修改"><a href="#头像修改" class="headerlink" title="头像修改"></a>头像修改</h6><p>将图片的名称更改为<code>avatar.png</code>加入source下的img中，并将对应参数修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Avatar (头像)</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">/img/avatar.png</span></span><br><span class="line">  <span class="comment">#是否一直旋转</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h5 id="主图修改"><a href="#主图修改" class="headerlink" title="主图修改"></a>主图修改</h5><p>将图片加入source下的img中，在配置文件中修改<code>index_img</code>参数的值为该路径</p><ul><li><code>default_top_img:</code>后面是当图片显示错误时的代替图片</li><li><code>index_img:</code>后是进入网站时显示的图像</li><li><code>archive_img:</code>是点击头像下面的文章进入的页面的顶部图</li><li><code>tag_img:</code>是点击头像下面的标签进入的页面的顶部图</li><li><code>category_img:</code>是点击头像下面的分类进入的页面的顶部图</li></ul><h6 id="随机图片的匹配"><a href="#随机图片的匹配" class="headerlink" title="随机图片的匹配"></a>随机图片的匹配</h6><p>此时设置了每一个分类，每一个标签页的图片，但是tags主页与categories主页都是原图，需要调整cover属性：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="comment"># display the cover or not</span></span><br><span class="line">  <span class="comment">#首页是否显示文章封面</span></span><br><span class="line">  <span class="attr">index_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#侧边栏是否显示文章封面</span></span><br><span class="line">  <span class="attr">aside_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#归档页是否显示文章封面</span></span><br><span class="line">  <span class="attr">archives_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># the position of cover in home page</span></span><br><span class="line">  <span class="comment"># left/right/both</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">both</span></span><br><span class="line">  <span class="comment">#当没有设置封面的时候，使用以下的照片</span></span><br><span class="line">  <span class="attr">default_cover:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">图片地址1</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">图片地址2</span></span><br><span class="line">     <span class="string">.....</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="错误页面的匹配"><a href="#错误页面的匹配" class="headerlink" title="错误页面的匹配"></a>错误页面的匹配</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Replace Broken Images</span></span><br><span class="line"><span class="comment">#在这里可以自定义所有图片不能显示的情况下显示的图片</span></span><br><span class="line"><span class="attr">error_img:</span></span><br><span class="line">  <span class="attr">flink:</span> <span class="string">/img/404.jpg</span></span><br><span class="line">  <span class="attr">post_page:</span> <span class="string">/img/404.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A simple 404 page</span></span><br><span class="line"><span class="attr">error_404:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">subtitle:</span> <span class="string">&#x27;页面丢失，联系博主进行解决吧&#x27;</span></span><br><span class="line">  <span class="comment">#图片的背景</span></span><br><span class="line">  <span class="attr">background:</span> <span class="string">链接地址</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="主页文章节选"><a href="#主页文章节选" class="headerlink" title="主页文章节选"></a>主页文章节选</h5><p>主页文章节选只支持自动节选和文章页description，修改主题配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">index_post_content:</span></span><br><span class="line">  <span class="attr">method:</span> <span class="number">3</span><span class="comment">#1.只显示description，2.优先description，3.只显示自动节选，4.不显示文章内容</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">500</span> <span class="comment"># if you set method to 2 or 3, the length need to config</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="文章封面"><a href="#文章封面" class="headerlink" title="文章封面"></a>文章封面</h5><p>文章封面的获取顺序<code>Front-matter的cover</code>&gt;<code>配置文件的default_cover</code></p><h5 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在butterfly的配置文件中将wordcount的enable参数设置为true</p><h5 id="标题栏标签完善"><a href="#标题栏标签完善" class="headerlink" title="标题栏标签完善"></a>标题栏标签完善</h5><p>hexo自带的标签包括分类，首页，标签等，且其默认配置了对应的目录：</p><p><img src="https://s1.ax1x.com/2023/01/30/pSdTrqI.png"></p><p>在source目录执行下面命令，建立标签页，其他的categories等也是相同的操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;tags&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在生成路径的文件中增加type属性，内容与title相同并用双引号括住</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: tags</span><br><span class="line">date: 2023-01-30 11:27:08</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打开主题路径下的配置文件配置对应的标签及相应图标：</p><p><img src="https://s1.ax1x.com/2023/01/30/pSdTzLR.png"></p><p>图标可以在阿里图标官网选择：<a href="https://www.iconfont.cn/">iconfont-阿里巴巴矢量图标库</a></p><p>找到想要的图标加入到购物车，添加至项目，将项目下载至本地，在主题的source&#x2F;css文件下将红色标注的移动过去</p><p><img src="https://moonshuo.cn//images/202211011545280.png"></p><p>原css目录下的mouse.css（先前添加的鼠标样式）修改为style.css（将hexo配置文件中的inject参数也做对应修改）；将该iconfont.css中的内容添加进去：</p><p><img src="https://s1.ax1x.com/2023/01/30/pSwYKbV.png"></p><p>调整标题栏格式，重新部署即可：</p><p><img src="https://s1.ax1x.com/2023/01/30/pSwYlUU.png"></p><h5 id="设置透明度"><a href="#设置透明度" class="headerlink" title="设置透明度"></a>设置透明度</h5><p>在<code>style.css</code>中插入类似下列代码，背景图片最好与主图是同一张图片，否则会显得突兀，关于渐变色的设置可以在<a href="https://uigradients.com/#DigitalWater">Gradients</a>中选择：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 背景样式 */</span></span><br><span class="line"><span class="selector-id">#web_bg</span> &#123;</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;../img/index.jpg&quot;</span>),</span><br><span class="line"><span class="built_in">linear-gradient</span>(<span class="number">60deg</span>, <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">165</span>, <span class="number">150</span>, <span class="number">0.5</span>) <span class="number">5%</span>, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">228</span>, <span class="number">255</span>, <span class="number">0.35</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 侧边栏个人信息卡片动态渐变色 */</span></span><br><span class="line"><span class="selector-id">#aside-content</span>&gt;<span class="selector-class">.card-widget</span> &#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(-<span class="number">45deg</span>,</span><br><span class="line"><span class="number">#e8d8b9</span>,</span><br><span class="line"><span class="number">#eccec5</span>,</span><br><span class="line"><span class="number">#a3e9eb</span>,</span><br><span class="line"><span class="number">#bdbdf0</span>,</span><br><span class="line"><span class="number">#eec1ea</span>);</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgb</span>(<span class="number">66</span>, <span class="number">68</span>, <span class="number">68</span>);</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">400%</span> <span class="number">400%</span>;</span><br><span class="line">-webkit-<span class="attribute">animation</span>: Gradient <span class="number">10s</span> ease infinite;</span><br><span class="line">-moz-<span class="attribute">animation</span>: Gradient <span class="number">10s</span> ease infinite;</span><br><span class="line"><span class="attribute">animation</span>: Gradient <span class="number">10s</span> ease infinite <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> Gradient &#123;</span><br><span class="line"><span class="number">0%</span> &#123;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">50%</span> &#123;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">100%</span> &#123;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@-moz-keyframes</span> Gradient &#123;</span><br><span class="line"><span class="number">0%</span> &#123;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">50%</span> &#123;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">100%</span> &#123;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> Gradient &#123;</span><br><span class="line"><span class="number">0%</span> &#123;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">50%</span> &#123;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">100%</span> &#123;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 个人信息Follow me按钮 */</span></span><br><span class="line"><span class="selector-id">#aside-content</span>&gt;<span class="selector-class">.card-widget</span><span class="selector-class">.card-info</span>&gt;<span class="selector-id">#card-info-btn</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#3eb8be</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#aside-content</span>&gt;<span class="selector-class">.sticky_layout</span>&gt;<span class="selector-class">.card-widget</span>,</span><br><span class="line"><span class="comment">/*分类页面*/</span></span><br><span class="line"><span class="selector-class">.layout</span>&gt;<span class="selector-id">#page</span>,</span><br><span class="line"><span class="comment">/*时间轴页面*/</span></span><br><span class="line"><span class="selector-class">.layout</span>&gt;<span class="selector-id">#archive</span> &#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="页脚设置"><a href="#页脚设置" class="headerlink" title="页脚设置"></a>页脚设置</h5><p>进入<code>….themes\butterfly\source\css\_layout\footer.styl</code>，把blue那行删掉</p><h6 id="更改底层文字"><a href="#更改底层文字" class="headerlink" title="更改底层文字"></a>更改底层文字</h6><p>在js文件夹下新建foot.js文件，复制下列代码并添加<a href="https://code.jquery.com/jquery-3.6.1.min.js">jquery.js文件</a>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态心跳</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    $(<span class="string">&#x27;.copyright&#x27;</span>).<span class="title function_">html</span>(<span class="string">&#x27;©2023 &lt;i class=&quot;fa-fw fas fa-heartbeat card-announcement-animation cc_pointer&quot;&gt;&lt;/i&gt; By dany\&#x27;s blog&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="title function_">show_date_time</span>();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//本站运行时间</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">show_date_time</span>(<span class="params"></span>)&#123;</span><br><span class="line">$(<span class="string">&#x27;.framework-info&#x27;</span>).<span class="title function_">html</span>(<span class="string">&#x27;本站已运行&lt;span id=&quot;span_dt_dt&quot; style=&quot;color: #fff;&quot;&gt;&lt;/span&gt;&#x27;</span>);</span><br><span class="line"><span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="string">&quot;show_date_time()&quot;</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="title class_">BirthDay</span>=<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;1/28/2023 0:0:0&quot;</span>);</span><br><span class="line">today=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">timeold=(today.<span class="title function_">getTime</span>()-<span class="title class_">BirthDay</span>.<span class="title function_">getTime</span>());</span><br><span class="line">sectimeold=timeold/<span class="number">1000</span></span><br><span class="line">secondsold=<span class="title class_">Math</span>.<span class="title function_">floor</span>(sectimeold);</span><br><span class="line">msPerDay=<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span></span><br><span class="line">e_daysold=timeold/msPerDay</span><br><span class="line">daysold=<span class="title class_">Math</span>.<span class="title function_">floor</span>(e_daysold);</span><br><span class="line">e_hrsold=(e_daysold-daysold)*<span class="number">24</span>;</span><br><span class="line">hrsold=<span class="title class_">Math</span>.<span class="title function_">floor</span>(e_hrsold);</span><br><span class="line">e_minsold=(e_hrsold-hrsold)*<span class="number">60</span>;</span><br><span class="line">minsold=<span class="title class_">Math</span>.<span class="title function_">floor</span>((e_hrsold-hrsold)*<span class="number">60</span>);</span><br><span class="line">seconds=<span class="title class_">Math</span>.<span class="title function_">floor</span>((e_minsold-minsold)*<span class="number">60</span>);</span><br><span class="line">span_dt_dt.<span class="property">innerHTML</span>=<span class="string">&#x27;&lt;font style=color:#3eb8be&gt;&#x27;</span>+daysold+<span class="string">&#x27;&lt;/font&gt; 天 &lt;font style=color:#f391a9&gt;&#x27;</span>+hrsold+<span class="string">&#x27;&lt;/font&gt; 时 &lt;font style=color:#fdb933&gt;&#x27;</span>+minsold+<span class="string">&#x27;&lt;/font&gt; 分 &lt;font style=color:#a3cf62&gt;&#x27;</span>+seconds+<span class="string">&#x27;&lt;/font&gt; 秒&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在主题配置文件中配置foot和jquery文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/style.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;/js/jquery.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;/js/foot.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="加载动画（butterfly4-5以上方案）"><a href="#加载动画（butterfly4-5以上方案）" class="headerlink" title="加载动画（butterfly4.5以上方案）"></a>加载动画（butterfly4.5以上方案）</h5><p>修改 <code>themes/butterfly/layout/includes/loading/fullpage-loading.pug</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#loading-box(onclick=&#x27;document.getElementById(&quot;loading-box&quot;).classList.add(&quot;loaded&quot;)&#x27;)</span><br><span class="line">  .loading-bg</span><br><span class="line">    div.loading-img</span><br><span class="line">    .loading-image-dot</span><br><span class="line"></span><br><span class="line">script.</span><br><span class="line">  const preloader = &#123;</span><br><span class="line">    endLoading: () =&gt; &#123;</span><br><span class="line">      document.body.style.overflow = &#x27;auto&#x27;;</span><br><span class="line">      document.getElementById(&#x27;loading-box&#x27;).classList.add(&quot;loaded&quot;)</span><br><span class="line">    &#125;,</span><br><span class="line">    initLoading: () =&gt; &#123;</span><br><span class="line">      document.body.style.overflow = &#x27;&#x27;;</span><br><span class="line">      document.getElementById(&#x27;loading-box&#x27;).classList.remove(&quot;loaded&quot;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  window.addEventListener(&#x27;load&#x27;,()=&gt; &#123; preloader.endLoading() &#125;)</span><br><span class="line"></span><br><span class="line">  if (!&#123;theme.pjax &amp;&amp; theme.pjax.enable&#125;) &#123;</span><br><span class="line">    document.addEventListener(&#x27;pjax:send&#x27;, () =&gt; &#123; preloader.initLoading() &#125;)</span><br><span class="line">    document.addEventListener(&#x27;pjax:complete&#x27;, () =&gt; &#123; preloader.endLoading() &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改<code>themes/butterfly/layout/includes/loading/index.pug</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if theme.preloader.source === 1</span><br><span class="line">  include ./fullpage-loading.pug</span><br><span class="line">else if theme.preloader.source === 2</span><br><span class="line">  include ./pace.pug</span><br><span class="line">else</span><br><span class="line">  include ./fullpage-loading.pug</span><br><span class="line">  include ./pace.pug</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改<code>themes/butterfly/source/css/_layout/loading.styl</code>, 注意其中颜色代码<code>--anzhiyu-card-bg</code>等需自行替换为自己的色值</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">hexo-config</span>(<span class="string">&#x27;preloader&#x27;</span>)</span><br><span class="line">  <span class="selector-class">.loading-bg</span></span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(<span class="number">#fff</span>);</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1001</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">transition</span>: .<span class="number">3s</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-id">#loading-box</span></span><br><span class="line">    <span class="selector-class">.loading-img</span></span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">margin</span>: auto;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">4px</span> solid <span class="number">#f0f0f2</span>;</span><br><span class="line">      <span class="attribute">animation-duration</span>: .<span class="number">3s</span>;</span><br><span class="line">      <span class="attribute">animation-name</span>: loadingAction;</span><br><span class="line">      <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">      <span class="attribute">animation-direction</span>: alternate;</span><br><span class="line">    <span class="selector-class">.loading-image-dot</span></span><br><span class="line">      <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#6bdf8f</span>;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">6px</span> solid <span class="number">#fff</span>;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">18px</span>, <span class="number">24px</span>);</span><br><span class="line">    &amp;<span class="selector-class">.loaded</span></span><br><span class="line">      <span class="selector-class">.loading-bg</span></span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: -<span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@keyframes</span> loadingAction</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: .<span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在自定义css文件中加入如下代码，图片最好转换为base64编码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.loading-img</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">../img/avatar.png</span>) no-repeat center center;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后将主题配置文件中的<code>preloader</code>修改为<code>true</code></p><h5 id="导航栏修改"><a href="#导航栏修改" class="headerlink" title="导航栏修改"></a>导航栏修改</h5><p>在自定义css文件中加入下列代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 导航栏修改 */</span></span><br><span class="line"><span class="comment">/* 圆角隐藏 */</span></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.menus_item_child</span> &#123;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/* 一级菜单居中 */</span></span><br><span class="line"><span class="selector-id">#nav</span> <span class="selector-class">.menus_items</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">width</span>: fit-content;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">flex-direction</span>: row;</span><br><span class="line"><span class="attribute">justify-content</span>: center;</span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#nav</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">var</span>(--anzhiyu-main);</span><br><span class="line"><span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="selector-id">#nav-totop</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.totopbtn</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#nav-totop</span> <span class="selector-id">#percent</span> &#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">var</span>(--anzhiyu-white);</span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">var</span>(--anzhiyu-main);</span><br><span class="line"><span class="attribute">width</span>: <span class="number">25px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">35px</span>;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">justify-content</span>: center;</span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br><span class="line"><span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav-fixed</span> <span class="selector-id">#nav-totop</span> <span class="selector-id">#percent</span>,</span><br><span class="line"><span class="selector-class">.page</span> <span class="selector-id">#nav-totop</span> <span class="selector-id">#percent</span> &#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">var</span>(--font-color);</span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">var</span>(--card-bg);</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="selector-id">#nav-totop</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">35px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#page-header</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.is-top-bar</span>) <span class="selector-id">#percent</span> &#123;</span><br><span class="line"><span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#page-header</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.is-top-bar</span>) <span class="selector-id">#nav-totop</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">transition</span>: width <span class="number">0.3s</span>, opacity <span class="number">0.2s</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#nav-totop</span> <span class="selector-id">#percent</span> &#123;</span><br><span class="line"><span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#nav-totop</span><span class="selector-pseudo">:hover</span> <span class="selector-id">#percent</span> &#123;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.5</span>);</span><br><span class="line"><span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#page-header</span> <span class="selector-id">#nav</span> <span class="selector-id">#nav-right</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">0.5rem</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="selector-id">#nav-totop</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br><span class="line"><span class="attribute">justify-content</span>: center;</span><br><span class="line"><span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav-button</span> &#123;</span><br><span class="line"><span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#menus</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#page-header</span> <span class="selector-id">#nav</span> <span class="selector-class">.nav-button</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">35px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">35px</span>;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br><span class="line"><span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="selector-id">#nav</span> <span class="selector-class">.site-page</span> &#123;</span><br><span class="line"><span class="attribute">padding-bottom</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#nav</span> *<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Aplayer音乐插件"><a href="#Aplayer音乐插件" class="headerlink" title="Aplayer音乐插件"></a>Aplayer音乐插件</h5><p>运行以下指令安装<code>hexo-tag-aplayer</code>插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-tag-aplayer --save</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在hexo配置文件中新增配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line"><span class="attr">meting:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">asset_inject:</span> <span class="literal">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改主题配置文件中关于Aplayer的配置内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;div</span> <span class="string">class=&quot;aplayer</span> <span class="literal">no</span><span class="string">-destroy&quot;</span> <span class="string">data-id=&quot;5183531430&quot;</span> <span class="string">data-server=&quot;netease&quot;</span> <span class="string">data-type=&quot;playlist&quot;</span> <span class="string">data-fixed=&quot;true&quot;</span> <span class="string">data-mini=&quot;true&quot;</span> <span class="string">data-listFolded=&quot;false&quot;</span> <span class="string">data-order=&quot;random&quot;</span> <span class="string">data-preload=&quot;none&quot;</span> <span class="string">data-autoplay=&quot;false&quot;</span> <span class="string">muted&gt;&lt;/div&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>\themes\butterfly\source\css</code>中新建一个<code>custom.css</code>添加css样式使Aplayer自动缩进隐藏，且在主题配置文件<code>inject</code>中加入该文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.aplayer</span><span class="selector-class">.aplayer-fixed</span><span class="selector-class">.aplayer-narrow</span> <span class="selector-class">.aplayer-body</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">66px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="comment">/* 默认情况下缩进左侧66px，只留一点箭头部分 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.aplayer</span><span class="selector-class">.aplayer-fixed</span><span class="selector-class">.aplayer-narrow</span> <span class="selector-class">.aplayer-body</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="comment">/* 鼠标悬停是左侧缩进归零，完全显示按钮 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/css/custom.css&quot;</span>  <span class="attr">media</span>=<span class="string">&quot;defer&quot;</span> <span class="attr">onload</span>=<span class="string">&quot;this.media=&#x27;all&#x27;&quot;</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关于Aplayer的部分参数配置如下：</p><table><thead><tr><th>option</th><th>description</th></tr></thead><tbody><tr><td>data-id</td><td>必填，歌单id</td></tr><tr><td>data-server</td><td>必填，服务商：netease, tencent, kugou, xiami, baidu等</td></tr><tr><td>data-type</td><td>必填，歌单类型：song, playlist, album, search, artist等</td></tr><tr><td>data-fixed</td><td>enable fixed mode</td></tr><tr><td>data-mini</td><td>enable mini mode</td></tr><tr><td>data-autoplay</td><td>audio autoplay</td></tr><tr><td>data-theme</td><td><code>#2980b9</code>，main color</td></tr><tr><td>data-preload</td><td>values: ‘none’, ‘metadata’, ‘auto’</td></tr><tr><td>data-order</td><td>player play order, values: ‘list’, ‘random’</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7z工具安装使用</title>
      <link href="/2023/10/13/7z%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/10/13/7z%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>由于windows加密算法与linux不同，导致使用<code>unzip</code>解压windows中加密的压缩文件可能报错，推荐使用<code>7-zip</code></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>yum install p7zip -y</code></p><p>可能会出现没有可用的软件包的问题</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>更新epel第三方软件库</p><blockquote><p>卸载：yum remove epel-release</p><p>清空目录：rm -rf &#x2F;var&#x2F;cache&#x2F;yum&#x2F;x86_64&#x2F;6&#x2F;epel&#x2F;</p><p>安装：yum install  epel-release</p></blockquote><p>重新安装</p><p><code>yum install p7zip -y </code></p><blockquote><p>注：该安装包安装完后有7za程序，支持zip格式，不支持rar等格式</p><p>若要支持其它格式则安装p7zip-full，安装完成后有7z（全功能）、7za（仅适用7zip本身）、7zr（只支持7z格式）三个程序</p></blockquote><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><code>7z [adeltux] [-][SWITCH] …</code></p><ul><li>第一个参数[adeltux]表示执行的功能<ul><li><code>a</code>：创建压缩文件或向压缩文件中添加文件</li><li><code>d</code>：从压缩文件里删除文件</li><li><code>e</code>：解压，但不创建目录结构</li><li><code>l</code>：显示压缩文件中包含的内容</li><li><code>t</code>：测试压缩文件是否有效</li><li><code>u</code>：更新压缩文件中的文件</li><li><code>x</code>：解压，创建目录结构</li></ul></li><li>[-][SWITCH]表示对应的选项<ul><li><code>-t</code>：指定压缩格式</li><li><code>-p</code>：设置密码，如<code>-p123456</code></li><li><code>-o</code>：指定解压后的存放目录</li></ul></li></ul><p>最后接对应的压缩文件名(可以使用通配符，可以有多个文件)</p><p>7-zip退出后也有自己的返回值，在命令执行完成后马上执行echo $?命令查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0正常</span><br><span class="line">1警告（无错误），某些文件在压缩过程中无法读取</span><br><span class="line">2错误</span><br><span class="line">7无法识别命令行参数</span><br><span class="line">8没有足够的内存执行操作</span><br><span class="line">255用户自行按下Ctrl+C来中止程序</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker笔记</title>
      <link href="/2023/10/13/docker%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/10/13/docker%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="Docker存在意义"><a href="#Docker存在意义" class="headerlink" title="Docker存在意义"></a>Docker存在意义</h3><h4 id="docker作用"><a href="#docker作用" class="headerlink" title="docker作用"></a>docker作用</h4><h5 id="虚拟机技术与容器化技术"><a href="#虚拟机技术与容器化技术" class="headerlink" title="虚拟机技术与容器化技术"></a>虚拟机技术与容器化技术</h5><ul><li>虚拟机技术<ol><li>资源占用十分多</li><li>荣誉步骤多</li><li>启动很慢</li></ol></li><li>容器化技术<ol><li>直接运行在宿主机中，容器自身无内核，也没有虚拟出硬件，所以轻便</li><li>每个容器内有自己的文件系统，互不影响</li></ol></li></ul><h5 id="DevOps（开发、运维）"><a href="#DevOps（开发、运维）" class="headerlink" title="DevOps（开发、运维）"></a>DevOps（开发、运维）</h5><ul><li><p>应用更快速的交付和部署</p><ul><li>传统：帮助文档安装程序</li><li>Docker：打包镜像发布测试一键运行</li></ul></li><li><p>更便捷的升级和扩缩容</p></li><li><p>更简单的系统运维</p><p>容器化后，开发和测试环境高度一致</p></li><li><p>更有效的计算资源利用</p></li></ul><h4 id="为什么docker比vm快"><a href="#为什么docker比vm快" class="headerlink" title="为什么docker比vm快"></a>为什么docker比vm快</h4><ol><li>docker抽象层比虚拟机少，无需Hypervisor实现硬件资源虚拟化，运行在docker上的程序使用实际物理机的硬件资源，故docker在效率上更有优势</li><li>docker利用的是宿主机的内核，而不需要Guest OS</li></ol><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNTEwNDExNzMyOS5wbmc?x-oss-process=image/format,png"></p><h4 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h4><h5 id="镜像（image）"><a href="#镜像（image）" class="headerlink" title="镜像（image）"></a>镜像（image）</h5><p>镜像相当于一个目标，通过其创建容器服务</p><h5 id="容器（container）"><a href="#容器（container）" class="headerlink" title="容器（container）"></a>容器（container）</h5><p>镜像创建的单个应用</p><h5 id="仓库（repository）"><a href="#仓库（repository）" class="headerlink" title="仓库（repository）"></a>仓库（repository）</h5><p>仓库是存放镜像的地方，仓库分为公有仓库和私有仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#1.卸载旧版本</span><br><span class="line">yum remove docker \</span><br><span class="line">                   docker-client \</span><br><span class="line">                   docker-client-latest \</span><br><span class="line">                   docker-common \</span><br><span class="line">                   docker-latest \</span><br><span class="line">                   docker-latest-logrotate \</span><br><span class="line">                   docker-logrotate \</span><br><span class="line">                   docker-engine</span><br><span class="line"></span><br><span class="line">#2.需要的安装包</span><br><span class="line">yum install -y yum-utils</span><br><span class="line"></span><br><span class="line">#3.设置镜像的仓库</span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line">#更新yum软件包索引</span><br><span class="line">yum makecache fast</span><br><span class="line"></span><br><span class="line">#4.安装docker相关的docker-ce社区版ee是企业版</span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line">#5.启动docker</span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line">#6.使用docker version查看是否安装成功</span><br><span class="line">docker version </span><br><span class="line"></span><br><span class="line">#7.测试</span><br><span class="line">docker run hello-world</span><br><span class="line"></span><br><span class="line">#8.查看已下载的镜像</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><h4 id="docker卸载"><a href="#docker卸载" class="headerlink" title="docker卸载"></a>docker卸载</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#1.卸载依赖</span><br><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line">#2.删除资源</span><br><span class="line">yum -rf /var/lib/docker//docker默认工作路径</span><br></pre></td></tr></table></figure><h3 id="阿里镜像加速"><a href="#阿里镜像加速" class="headerlink" title="阿里镜像加速"></a>阿里镜像加速</h3><h4 id="登录阿里云找到容器镜像服务"><a href="#登录阿里云找到容器镜像服务" class="headerlink" title="登录阿里云找到容器镜像服务"></a>登录阿里云找到容器镜像服务</h4><p><img src="https://s1.ax1x.com/2023/02/03/pSsYlp8.png"></p><h4 id="找到镜像加速器"><a href="#找到镜像加速器" class="headerlink" title="找到镜像加速器"></a>找到镜像加速器</h4><p><img src="https://s1.ax1x.com/2023/02/03/pSsYMff.png"></p><h4 id="配置使用"><a href="#配置使用" class="headerlink" title="配置使用"></a>配置使用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#1.创建一个目录</span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line"></span><br><span class="line">#2.编写配置文件</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;https://t2wwyxhb.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">#3.重启服务</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h3><ol><li><p>帮助命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version#显示docker的版本信息</span><br><span class="line">docker info#显示docker系统信息，包括镜像和容器的数量</span><br><span class="line">docker 命令 --help   #帮助命令</span><br></pre></td></tr></table></figure></li><li><p>镜像命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker images#查看所有本地主机上的镜像，可以使用docker image ls代替</span><br><span class="line">docker search#搜索镜像</span><br><span class="line">docker pull#下载镜像docker image pull</span><br><span class="line">docker rmi#删除镜像docker image rm</span><br><span class="line"></span><br><span class="line">docker search mysql --filter=STARS=3000#搜索收藏数量大于3000的mysql</span><br><span class="line"></span><br><span class="line">docker pull tomcat:8#若不写tag，默认是latest</span><br><span class="line"></span><br><span class="line">docker rmi -f 镜像id#删除指定id的镜像</span><br><span class="line">docker rmi -f $(docker images -aq)#删除全部镜像</span><br></pre></td></tr></table></figure></li><li><p>容器命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run 镜像id#新建容器并启动</span><br><span class="line">docker ps#列出所有运行的容器</span><br><span class="line">docker rm 容器id#删除指定容器</span><br><span class="line">docker start 容器id#重启容器</span><br><span class="line">docker stop容器id#停止当前正在运行的容器</span><br><span class="line">docker kill 容器id#强制停止当前容器</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#新建容器并启动</span><br><span class="line">docker run [可选参数] image | docker container run [可选参数] image</span><br><span class="line">#参数说明</span><br><span class="line">--name=&quot;Name&quot;#容器名字 tomcat1 tomcat2用于区分容器</span><br><span class="line">-d#后台方式运行</span><br><span class="line">-it#使用交互方式运行，进入容器查看内容</span><br><span class="line">-p#指定容器的端口 -p 8080(宿主机):8080(容器)</span><br><span class="line">-P(大写)#随机指定端口</span><br><span class="line"></span><br><span class="line">#测试，启动并进入容器</span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]# docker run -it centos /bin/bash</span><br><span class="line">[root@241b5abce65e /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@241b5abce65e /]# exit #从容器退回主机</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#列出所有运行的容器</span><br><span class="line">docker ps 命令#列出当前正在运行的容器</span><br><span class="line">-a，--all#列出当前正在运行+历史运行过的容器</span><br><span class="line">-n=?，--last int#列出最近创建的?个容器</span><br><span class="line">-q，--quiet#只列出容器的编号</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#退出容器</span><br><span class="line">exit#容器直接退出</span><br><span class="line">ctrl +P +Q#容器不停止退出</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#删除容器</span><br><span class="line">docker rm 容器id#删除指定容器，强制删除正在运行的容器-rf</span><br><span class="line">docker rm -f $(docker ps -aq)#删除所有的容器</span><br><span class="line">docker ps -a -q | xargs docker rm#删除所有的容器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#启动和停止容器的操作</span><br><span class="line">docker start 容器id#启动容器</span><br><span class="line">docker restart 容器id#重启容器</span><br><span class="line">docker stop 容器id#停止当前正在运行的容器</span><br><span class="line">docker kill 容器id#强制停止当前容器</span><br></pre></td></tr></table></figure></li><li><p>其它常用命令</p><p><strong>后台启动命令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d centos</span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">CONTAINER ID      IMAGE       COMMAND    CREATED     STATUS   PORTS    NAMES</span><br><span class="line"></span><br><span class="line">#发现centos停止了；常见的陷阱，若没有前台进程时，docker发现没有应用就会自动停止</span><br><span class="line">#nginx，容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了</span><br></pre></td></tr></table></figure><p><strong>查看日志</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker logs</span><br><span class="line">#显示日志</span><br><span class="line">-tf#显示日志信息（一直更新）</span><br><span class="line">--tail number #需要显示日志条数</span><br><span class="line">docker logs -t --tail n 容器id#查看n行日志</span><br><span class="line">docker logs -ft容器id#跟着日志</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>查看容器中进程信息ps</strong></p><p><strong>查看镜像的元数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#命令docker top 容器id</span><br><span class="line">#命令docker inspect容器id</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>进入当前正在运行的容器</strong></p><p>docker exec -it 容器id bashshell#进入容器后开启一个新的终端，可以在里面操作（常用）</p><p>docker attach 容器id#进入容器正在执行的终端</p><p><strong>从容器拷贝到主机上</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">docker cp 容器id:容器内路径主机目的路径</span><br><span class="line"></span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]# docker ps</span><br><span class="line">CONTAINER ID     IMAGE    COMMAND     CREATED         STATUS       PORTS      NAMES</span><br><span class="line">56a5583b25b4     centos   &quot;/bin/bash&quot; 7seconds ago    Up 6 seconds      </span><br><span class="line"></span><br><span class="line">#1. 进入docker容器内部</span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]# docker exec -it 56a5583b25b4 /bin/bash</span><br><span class="line">[root@55321bcae33d /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line"></span><br><span class="line">#新建一个文件</span><br><span class="line">[root@55321bcae33d /]# echo &quot;hello&quot; &gt; java.java</span><br><span class="line">[root@55321bcae33d /]# cat hello.java </span><br><span class="line">hello</span><br><span class="line">[root@55321bcae33d /]# exit</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">#hello.java拷贝到home文件加下</span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z /]# docker cp 56a5583b25b4:/hello.java /home </span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z /]# cd /home</span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z home]# ls -l#可以看见java.java存在</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r-- 1 root root    0 May 19 22:09 haust.java</span><br><span class="line">-rw-r--r-- 1 root root    6 May 22 11:12 java.java</span><br><span class="line">drwx------ 3 www  www  4096 May  8 12:14 www</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNDIxNDMxMzk2Mi5wbmc?x-oss-process=image/format,png"></p></li></ol><h3 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h3><p>如果数据都在容器中，那么容器删除数据就会丢失；此时容器之间需要有一个数据共享的技术，Docker中产生的数据同步到本地；<strong>容器的持久化和同步操作，容器间实现数据共享</strong></p><p>卷技术：目录的挂载，将容器内的目录挂载到Linux上面</p><h4 id="方式一：直接使用命令挂载-v"><a href="#方式一：直接使用命令挂载-v" class="headerlink" title="方式一：直接使用命令挂载-v"></a>方式一：直接使用命令挂载-v</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v 主机目录:容器内目录  -p 主机端口:容器内端口</span><br><span class="line">docker inspect 容器id</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNTE5MTY0Nzk3MC5wbmc?x-oss-process=image/format,png"></p><p><strong>测试文件的同步</strong>（停止容器，在宿主机中修改文件，启动容器，数据依然同步）</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNTE5MTcxODQ3MC5wbmc?x-oss-process=image/format,png"></p><h5 id="安装MySQL挂载连接测试"><a href="#安装MySQL挂载连接测试" class="headerlink" title="安装MySQL挂载连接测试"></a>安装MySQL挂载连接测试</h5><p><strong>思考：MySQL的数据持久化的问题</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#获取mysql镜像</span><br><span class="line">docker pull mysql:5.7</span><br><span class="line"></span><br><span class="line">#启动mysql并做数据挂载</span><br><span class="line">-d 后台运行</span><br><span class="line">-p 端口映射</span><br><span class="line">-v 卷挂载</span><br><span class="line">-e 环境配置</span><br><span class="line">--name 容器名字</span><br><span class="line"></span><br><span class="line">docker run -d -p 主机端口:容器内端口 -v 主机配置文件路径:/etc/mysql/conf.d -v 主机数据文件路径:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw --name 容器名字 mysql:tag</span><br><span class="line"></span><br><span class="line">#此时在本地新建数据库时，容器也会创建对应的数据库；若将容器内mysql删除，挂载到本地的数据卷依旧没有丢失，实现了容器数据持久化功能</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 匿名挂载（在-v中只写了容器内的路径，没有写容器外的路径）</span><br><span class="line">docker run -d -P --name nginx01 -v /etc/nginx nginx</span><br><span class="line"># 查看所有的volume(卷)的情况</span><br><span class="line">docker volume ls</span><br><span class="line">DRIVER              VOLUME NAME # 容器内的卷名(匿名卷挂载)</span><br><span class="line">local               21159a8518abd468728cdbe8594a75b204a10c26be6c36090cde1ee88965f0d0</span><br><span class="line">local               b17f52d38f528893dd5720899f555caf22b31bf50b0680e7c6d5431dbda2802c</span><br><span class="line"></span><br><span class="line"># 具名挂载 -P:表示随机映射端口</span><br><span class="line">docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx</span><br><span class="line"># 查看所有的volume(卷)的情况</span><br><span class="line">$ docker volume ls                  </span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               21159a8518abd468728cdbe8594a75b204a10c26be6c36090cde1ee88965f0d0</span><br><span class="line">local               b17f52d38f528893dd5720899f555caf22b31bf50b0680e7c6d5431dbda2802c</span><br><span class="line">local               juming-nginx #多了一个名字</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所有的docker容器内的卷，未指定目录时都是在**&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;自定义的卷名&#x2F;_data**下</p><p><strong>如果指定了目录，docker volume ls 是查看不到的</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjExNDIzMTQzNS5wbmc?x-oss-process=image/format,png"></p><h4 id="区分三种挂载方式"><a href="#区分三种挂载方式" class="headerlink" title="区分三种挂载方式"></a>区分三种挂载方式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 三种挂载： 匿名挂载、具名挂载、指定路径挂载</span><br><span class="line">-v 容器内路径#匿名挂载</span><br><span class="line">-v 卷名：容器内路径  #具名挂载</span><br><span class="line">-v /宿主机路径：容器内路径 #指定路径挂载 docker volume ls 是查看不到的</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 通过 -v 容器内路径： ro rw 改变读写权限</span><br><span class="line">ro #readonly 只读rw #readwrite 可读可写</span><br><span class="line">docker run -d -P --name nginx05 -v juming:/etc/nginx:ro nginx</span><br><span class="line">docker run -d -P --name nginx05 -v juming:/etc/nginx:rw nginx</span><br><span class="line"></span><br><span class="line"># ro 只要看到ro就说明这个路径只能通过宿主机来操作，容器内部是无法操作！</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p><strong>Dockerfile 就是用来构建docker镜像的构建文件</strong></p><p>镜像是一层一层的，脚本是一个个的命令，每个命令都是一层</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 文件中的内容： 指令(大写) + 参数</span><br><span class="line">$ vim dockerfile1</span><br><span class="line">    FROM centos # 当前镜像是以centos为基础的</span><br><span class="line"></span><br><span class="line">    VOLUME [&quot;volume01&quot;,&quot;volume02&quot;] # 挂载卷的卷目录列表(多个目录)</span><br><span class="line"></span><br><span class="line">    CMD echo &quot;-----end-----&quot;# 输出一下用于测试</span><br><span class="line">    CMD /bin/bash# 默认走bash控制台</span><br><span class="line">    </span><br><span class="line">$ docker build -f dockerfile1 -t dockerfiletest/centos .</span><br><span class="line"># -f 代表当前文件的地址（这里是当前目录下的dockerfile1）</span><br><span class="line"># -t 代表target，指目标目录（dockerfiletest镜像名前不能加斜杠&#x27;/&#x27;）</span><br><span class="line"># .表示生成在当前目录下</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="容器间的数据同步"><a href="#容器间的数据同步" class="headerlink" title="容器间的数据同步"></a>容器间的数据同步</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 创建docker01</span><br><span class="line">docker run -it --name docker01 dockerfiletest/centos</span><br><span class="line"># 查看docker01的内容</span><br><span class="line">ls</span><br><span class="line">bin  home   lost+foundopt   run   sys  var</span><br><span class="line">dev  lib    mediaproc  sbin  tmp  volume01</span><br><span class="line">etc  lib64  mntroot  srv   usr  volume02</span><br><span class="line"># 不关闭该容器退出</span><br><span class="line">ctrl + Q + P</span><br><span class="line"></span><br><span class="line"># 创建docker02：并让docker02继承docker01</span><br><span class="line">docker run -it --name docker02 --volumes-from docker01 dockerfiletest/centos</span><br><span class="line"># 查看docker02内容</span><br><span class="line">ls</span><br><span class="line">bin  home   lost+foundopt   run   sys  var</span><br><span class="line">dev  lib    mediaproc  sbin  tmp  volume01</span><br><span class="line">etc  lib64  mntroot  srv   usr  volume02</span><br><span class="line"></span><br><span class="line">#在docker01的volume01下创建docker01.txt；在docker02中查看文件已同步</span><br><span class="line"></span><br><span class="line"># 新建一个docker03同样继承docker01，发现volume01卷下也有docker01.txt</span><br><span class="line">docker run -it --name docker03 --volumes-from docker01 dockerfiletest/centos</span><br><span class="line"></span><br><span class="line"># 删除docker01，发现docker02和docker03中没有删除</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="实现多个mysql的数据共享"><a href="#实现多个mysql的数据共享" class="headerlink" title="实现多个mysql的数据共享"></a>实现多个mysql的数据共享</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3306:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root --name mysql01 mysql:5.7</span><br><span class="line"></span><br><span class="line">docker run -d -p 3310:3306 -e MYSQL_ROOT_PASSWORD=root --name mysql02 --volumes-from mysql01 mysql:5.7</span><br><span class="line"></span><br><span class="line"># 这个时候可以实现两个容器数据同步</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>容器之间的配置信息的传递，数据卷容器的生命周期一直持续到没有容器使用为止；一旦持久化到了本地，此时本地的数据是不会删除的</strong></p><h4 id="DockerFile构建过程"><a href="#DockerFile构建过程" class="headerlink" title="DockerFile构建过程"></a>DockerFile构建过程</h4><h5 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h5><ol><li>每个保留关键字（指令）都必须是大写字母</li><li>执行顺序从上到下</li><li>#表示注释</li><li>每个指令都会创建提交一个新的镜像层，并提交</li></ol><h5 id="DockerFile指令"><a href="#DockerFile指令" class="headerlink" title="DockerFile指令"></a>DockerFile指令</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FROM#from：基础镜像，一切从这里开始构建</span><br><span class="line">MAINTAINER#maintainer：镜像作者，姓名+邮箱</span><br><span class="line">RUN#run：镜像构建时需要运行的命令</span><br><span class="line">ADD#add：步骤，tomcat镜像，这个tomcat压缩包！添加内容 添加同目录</span><br><span class="line">WORKDIR#workdir：镜像的工作目录</span><br><span class="line">VOLUME#volume：挂载的目录</span><br><span class="line">EXPOSE#expose：保留端口配置</span><br><span class="line">CMD#cmd：指定该容器启动时要运行的命令，只有最后一个会生效，可被替代</span><br><span class="line">ENTRYPOINT#entrypoint：指定容器启动时运行命令，可以追加命令</span><br><span class="line">ONBUILD#onbuild：构建被继承DockerFile时运行onbuild</span><br><span class="line">COPY#copy：类似ADD，将文件拷贝到镜像中</span><br><span class="line">ENV#env：构建时设置环境变量</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/02/03/pSsY11S.png"></p><h5 id="镜像发布"><a href="#镜像发布" class="headerlink" title="镜像发布"></a>镜像发布</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjE3MTE1NTY2Ny5wbmc?x-oss-process=image/format,png"></p><h3 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h3><h4 id="理解Docker-0"><a href="#理解Docker-0" class="headerlink" title="理解Docker 0"></a>理解Docker 0</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNTIyMzIzNjc3Mi5wbmc?x-oss-process=image/format,png"></p><h4 id="Docker容器互联"><a href="#Docker容器互联" class="headerlink" title="Docker容器互联"></a>Docker容器互联</h4><p>docker 有一个连接系统允许将多个容器连接在一起，共享连接信息，其会创建一个父子关系，父容器可以看到子容器的信息</p><h5 id="容器创建"><a href="#容器创建" class="headerlink" title="容器创建"></a>容器创建</h5><p><code>docker run -d -P --name coonote training/webapp python app.py</code></p><h5 id="新建网络"><a href="#新建网络" class="headerlink" title="新建网络"></a>新建网络</h5><p><code>docker network create -d bridge test-net</code></p><p><img src="https://s1.ax1x.com/2023/03/20/ppNM5Hf.png"></p><h5 id="连接容器"><a href="#连接容器" class="headerlink" title="连接容器"></a>连接容器</h5><p>运行一个容器并连接到新建的 test-net 网络</p><p><code>docker run -itd --name test1 --network test-net ubuntu /bin/bash</code></p><p>再运行一个容器并加入到 test-net 网络</p><p><code>docker run -itd --name test2 --network test-net ubuntu /bin/bash</code></p><p><img src="https://s1.ax1x.com/2023/03/20/ppNMTUS.png"></p><h5 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt install iputils-ping</span><br><span class="line"><span class="comment">#在 test1 容器输入以下命令</span></span><br><span class="line">ping test2</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="配置DNS"><a href="#配置DNS" class="headerlink" title="配置DNS"></a>配置DNS</h5><p>可以在宿主机的<code>/etc/docker/daemon.json</code>文件中增加以下内容来设置全部容器的 DNS：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;dns&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;114.114.114.114&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;8.8.8.8&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置完后重启docker才生效，查看容器的DNS信息：</p><p><code>/etc/init.d/docker restart</code></p><p><code>docker run -it --rm ubuntu cat etc/resolv.conf</code></p><h6 id="手动指定容器的配置"><a href="#手动指定容器的配置" class="headerlink" title="手动指定容器的配置"></a>手动指定容器的配置</h6><p><code>docker run -it --rm -h host_ubuntu  --dns=114.114.114.114 --dns-search=test.com ubuntu</code></p><ul><li><code>--rm</code>：容器退出时自动清理内部的文件系统</li><li><code>-h 或 --hostname</code>：设定容器主机名，会被写到容器内的<code>/etc/hostname</code>和<code>/etc/hosts</code></li><li><code>--dns</code>：添加 DNS 服务器到容器的 <code>/etc/resolv.conf</code> 中，让容器用这个服务器来解析所有不在 <code>/etc/hosts</code>中的主机名</li><li><code>--dns-search</code>：设定容器搜索域，在搜索一个名为 host 的主机时，DNS 不仅搜索 host，还会搜索 host.example.com</li></ul><p>若容器启动时未指定 <strong>–dns</strong> 和 <strong>–dns-search</strong>，会默认用宿主主机上的<code>/etc/resolv.conf</code>来配置容器的 DNS</p><h4 id="Docker网络实现"><a href="#Docker网络实现" class="headerlink" title="Docker网络实现"></a>Docker网络实现</h4><p>在本地主机和容器内分别创建一个虚拟接口，并让它们彼此连通</p><h5 id="创建网络参数"><a href="#创建网络参数" class="headerlink" title="创建网络参数"></a>创建网络参数</h5><p>Docker创建一个容器时执行的操作：</p><ul><li>创建一对虚拟接口，分别放在本地主机和新容器中</li><li>本地主机一端桥接到默认的docker0或指定网桥上，并具有一个唯一的名字</li><li>容器一端放到新容器中并修改名字为eth0，该接口只在容器的名字空间可见</li><li>从网桥可用地址段中获取一个空闲地址分配给容器的eth0，并配置默认路由到桥接网卡</li></ul><p>完成这些之后，容器就可以使用eth0虚拟网卡连接其他容器和其他网络</p><p>也可以在<code>docker run</code>时通过<code>--net</code>指定容器的网络配置：</p><ul><li><code>--net=bridge</code>：默认值，连接到默认的网桥</li><li><code>--net=host</code>：不将容器网络放到隔离的<code>namespace</code>中，此时容器使用本地主机的网络，若进一步使用<code>--privileged=true</code>，容器会被允许直接配置主机的网络堆栈</li><li><code>--net=container:NAME_or_ID</code>：将新建容器的进程放到一个已存在容器的网络栈中，新容器进程有自己的文件系统、进程列表和资源限制，但会和已存在的容器共享IP地址和端口等网络资源，两者进程可以直接通过 lo环回接口通信</li><li><code>--net=none</code>：将新容器放到隔离的网络栈中，但是不进行网络配置，之后由用户自己配置</li></ul><h5 id="网络配置细节"><a href="#网络配置细节" class="headerlink" title="网络配置细节"></a>网络配置细节</h5><p>首先启动一个 &#x2F;bin&#x2F;bash 容器，指定 –net&#x3D;none 参数</p><p><code>sudo docker run -i -t --rm --net=none base /bin/bash</code></p><p>在本地主机查找容器进程id，并为它创建网络命名空间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker inspect -f <span class="string">&#x27;&#123;&#123;.State.Pid&#125;&#125;&#x27;</span> 63f36fc01b5f</span><br><span class="line">2778</span><br><span class="line">$ pid=2778</span><br><span class="line">$ sudo <span class="built_in">mkdir</span> -p /var/run/netns</span><br><span class="line">$ sudo <span class="built_in">ln</span> -s /proc/<span class="variable">$pid</span>/ns/net /var/run/netns/<span class="variable">$pid</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>检查桥接网卡的IP和子网掩码信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ip addr show docker0</span><br><span class="line">21: docker0: ...</span><br><span class="line">inet 172.17.42.1/16 scope global docker0</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建一对 “veth pair” 接口 A 和 B，绑定 A 到网桥 docker0，并启用它</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ip <span class="built_in">link</span> add A <span class="built_in">type</span> veth peer name B</span><br><span class="line">$ sudo brctl addif docker0 A</span><br><span class="line">$ sudo ip <span class="built_in">link</span> <span class="built_in">set</span> A up</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将B放到容器的网络命名空间，命名为 eth0，启动它并配置一个可用 IP（桥接网段）和默认网关</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ip <span class="built_in">link</span> <span class="built_in">set</span> B netns <span class="variable">$pid</span></span><br><span class="line">$ sudo ip netns <span class="built_in">exec</span> <span class="variable">$pid</span> ip <span class="built_in">link</span> <span class="built_in">set</span> dev B name eth0</span><br><span class="line">$ sudo ip netns <span class="built_in">exec</span> <span class="variable">$pid</span> ip <span class="built_in">link</span> <span class="built_in">set</span> eth0 up</span><br><span class="line">$ sudo ip netns <span class="built_in">exec</span> <span class="variable">$pid</span> ip addr add 172.17.42.99/16 dev eth0</span><br><span class="line">$ sudo ip netns <span class="built_in">exec</span> <span class="variable">$pid</span> ip route add default via 172.17.42.1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Docker数据卷"><a href="#Docker数据卷" class="headerlink" title="Docker数据卷"></a>Docker数据卷</h3><p>即可供一个或多个容器使用的特殊目录，绕过UFS（UNIX文件系统），可提供：</p><ul><li><code>数据卷</code>在容器间的共享和重用</li><li>对<code>数据卷</code>的修改会立马生效</li><li>对<code>数据卷</code>的更新不会影响镜像</li><li><code>数据卷</code>默认一直存在，即使容器被删除</li></ul><blockquote><p>数据卷的使用类似Linux下对目录或文件进行mount，镜像中被指定为挂载点的目录中的文件会复制到数据卷中（仅数据卷为空时会复制）</p></blockquote><h4 id="创建数据卷"><a href="#创建数据卷" class="headerlink" title="创建数据卷"></a>创建数据卷</h4><p><code>docker volume create my-vol</code></p><h4 id="查看数据卷"><a href="#查看数据卷" class="headerlink" title="查看数据卷"></a>查看数据卷</h4><p><code>docker volume inspect my-vol</code></p><h4 id="挂载数据卷"><a href="#挂载数据卷" class="headerlink" title="挂载数据卷"></a>挂载数据卷</h4><p><code>docker run -d -P --name web -v my-vol:/usr/share/nginx/html nginx</code></p><p><code>docker inspect web</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&quot;Mounts&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">              &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">              &quot;Name&quot;: &quot;my-vol&quot;,</span><br><span class="line">              &quot;Source&quot;: &quot;/var/lib/docker/volumes/my-vol/_data&quot;,</span><br><span class="line">              &quot;Destination&quot;: &quot;/usr/share/nginx/html&quot;,</span><br><span class="line">              &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">              &quot;Mode&quot;: &quot;z&quot;,</span><br><span class="line">              &quot;RW&quot;: true,</span><br><span class="line">              &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">          &#125;</span><br><span class="line">      ],</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="删除数据卷"><a href="#删除数据卷" class="headerlink" title="删除数据卷"></a>删除数据卷</h4><p><code>docker volume rm my-vol</code></p><h3 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h3><p>实现对docker容器集群的快速编排，允许用户通过一个单独的 <code>docker-compose.yml</code> 模板文件定义一组相关联的应用容器为一个项目</p><p><code>Compose</code> 中有两个重要的概念：</p><ul><li>服务 (<code>service</code>)：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例</li><li>项目 (<code>project</code>)：由一组关联的应用容器组成的一个完整业务单元，在 <code>docker-compose.yml</code> 文件中定义</li></ul><p><code>Compose</code> 默认管理对象是项目，通过子命令对项目中一组容器进行生命周期管理</p><h4 id="安装与卸载"><a href="#安装与卸载" class="headerlink" title="安装与卸载"></a>安装与卸载</h4><h5 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/1.25.5/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line">sudo <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="window"><a href="#window" class="headerlink" title="window"></a>window</h5><p>可以通过 Python 的包管理工具 pip 进行安装，也可以直接下载编译好的二进制文件使用，甚至能够直接在 Docker 容器中运行</p><h5 id="bash命令补全"><a href="#bash命令补全" class="headerlink" title="bash命令补全"></a>bash命令补全</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -L https://raw.githubusercontent.com/docker/compose/1.25.5/contrib/completion/bash/docker-compose &gt; /etc/bash_completion.d/docker-compose</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h5><p>若是二进制包安装的，删除二进制文件即可</p><p><code>rm /usr/local/bin/docker-compose </code></p><h5 id="测试安装成功"><a href="#测试安装成功" class="headerlink" title="测试安装成功"></a>测试安装成功</h5><p><code>docker-compose --version</code></p><h4 id="docker-compose使用"><a href="#docker-compose使用" class="headerlink" title="docker compose使用"></a>docker compose使用</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.0&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysqldb:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7.19</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/mysql/conf:/etc/mysql/conf.d</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/mysql/logs:/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/mysql/data:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ems</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:4.0.14</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6379:6379&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ems</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/redis/data:/data</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">ems:</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>docker-compose up</code>：前台启动一组服务</p><p>每个服务都必须通过 <code>image</code> 指令指定镜像或 <code>build</code> 指令（需要 Dockerfile）等来自动构建生成镜像</p><p>如果使用 <code>build</code> 指令，在 <code>Dockerfile</code> 中设置的选项(例如：<code>CMD</code>, <code>EXPOSE</code>, <code>VOLUME</code>, <code>ENV</code> 等) 将会自动被获取，无需在 <code>docker-compose.yml</code> 中重复设置</p><ul><li><p><code>build</code>：指定<code>dockerfile</code>所在文件夹的路径；也可使用<code>context</code>指定路径，使用<code>dockerfile</code>指定<code>dockerfile</code>文件名</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">build:</span> <span class="string">./dir</span></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./dir</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile-alternate</span></span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="attr">buildno:</span> <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>command</code>：覆盖容器启动后默认执行的命令</p></li><li><p><code>container_name</code>：指定容器名称，默认使用<code>项目名称_服务名称_序号</code>格式</p></li><li><p><code>depends_on</code>：解决容器的依赖、启动先后问题，下列例子会先启动<code>redis db</code>再启动<code>web</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#web服务不会等待redis db完全启动后才启动</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>env_file</code>：从文件中获取环境变量，如果有变量名称与 <code>environment</code> 指令冲突，以后者为准</p></li><li><p><code>environment</code> ：设置环境变量，可以使用数组或字典格式；只给定名称的变量会自动获取运行compose主机上对应变量的值</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="attr">RACK_ENV:</span> <span class="string">development</span></span><br><span class="line">  <span class="attr">SESSION_SECRET:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RACK_ENV=development</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">SESSION_SECRET</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>healthcheck</code>：通过命令检查容器是否健康运行</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">healthcheck:</span></span><br><span class="line">  <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;http://localhost&quot;</span>]</span><br><span class="line">  <span class="attr">interval:</span> <span class="string">1m30s</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>image</code>：指定为镜像名称或镜像 ID，若在本地不存在将会尝试拉取这个镜像</p></li><li><p><code>networks</code>：配置容器连接的网络</p></li><li><p><code>ports</code>：暴露端口信息，使用宿主端口：容器端口 <code>(HOST:CONTAINER)</code> 格式，或者仅仅指定容器的端口（宿主将会随机选择端口）</p><blockquote><p>当使用 HOST:CONTAINER 格式来映射端口时，若使用的容器端口小于 60 并且没放到引号里，可能会得到错误结果，因为 YAML 会自动解析 xx:yy 这种数字格式为 60 进制。为避免出现这种问题，建议数字串都采用引号包括起来的字符串格式</p></blockquote></li><li><p><code>sysctls</code>：配置容器内核参数</p></li><li><p><code>ulimits</code>：指定容器的限制值</p></li><li><p><code>volumes</code>：数据卷挂载路径设置，可以设置为宿主机路径(<code>HOST:CONTAINER</code>)或者数据卷名称(<code>VOLUME:CONTAINER</code>)，并且可以设置访问模式 （<code>HOST:CONTAINER:ro</code>）</p><blockquote><p>若路径为数据卷名称，必须在文件中配置数据卷</p></blockquote></li></ul><h4 id="docker-compose常用命令"><a href="#docker-compose常用命令" class="headerlink" title="docker compose常用命令"></a>docker compose常用命令</h4><p><code>docker-compose [-f=&lt;arg&gt;...] [options] [COMMAND] [ARGS...]</code></p><h5 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h5><ul><li><code>-f，--file FILE</code>：指定使用的 Compose 模板文件，默认为 <code>docker-compose.yml</code>，可以多次指定</li><li><code>-p，--project-name NAME</code>：指定项目名称，默认使用所在目录名称作为项目名</li><li><code>--x-networking</code>：使用docker的可拔插网络后端特性</li><li><code>--x-network-driver DRIVER</code>：指定网络后端的驱动，默认为<code>bridge</code></li><li><code>--verbose</code>：输出更多调试信息</li><li><code>-v --version</code>：打印版本并退出</li></ul><h5 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h5><ul><li><p><code>up</code>：<code>docker-compose up [options] [SERVICE...]</code></p><p>它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作</p><p>链接的服务都将会被自动启动，除非已经处于运行状态</p><p>默认情况启动的容器都在前台</p><p>当通过 <code>Ctrl-C</code> 停止命令时，所有容器将会停止</p><p>如果使用 <code>docker-compose up -d</code>，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项</p><p>默认情况下如果服务容器已经存在，将会尝试停止容器，然后重新创建，以保证新启动的服务匹配 <code>docker-compose.yml</code> 文件的最新内容</p></li><li><p><code>down</code>：停止<code>up</code>启动的容器，并移除网络</p></li><li><p><code>exec</code>：进入指定的容器</p></li><li><p><code>ps</code>：列出项目中目前所有的容器</p><p><code>-q</code>：只打印容器的ID信息</p></li><li><p><code>restart</code>：重启项目中的服务</p><p><code>-t</code>：指定重启前停止容器的超时</p></li><li><p><code>rm</code>：删除所有（停止状态的）服务容器</p><p><code>-f，--force</code>：强制删除</p><p><code>-v</code>：删除容器挂载的数据卷</p></li><li><p><code>start</code>：启动已存在的服务容器</p></li><li><p><code>stop</code>：停止已经处于运行状态的容器</p><p><code>-t，--timeout TIMEOUT</code>：停止容器时候的超时（默认为 10 秒）</p></li><li><p><code>top</code>：查看各个服务容器内运行的进程</p></li><li><p><code>unpause</code>：恢复处于暂停状态中的服务</p></li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="连接docker中的mysql"><a href="#连接docker中的mysql" class="headerlink" title="连接docker中的mysql"></a>连接docker中的mysql</h3><h4 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h4><h5 id="Docker下载mysql"><a href="#Docker下载mysql" class="headerlink" title="Docker下载mysql"></a>Docker下载mysql</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="启动mysql实例"><a href="#启动mysql实例" class="headerlink" title="启动mysql实例"></a>启动mysql实例</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 13306:3306 -v /usr/local/mysql/conf:/etc/mysql/conf.d </span><br><span class="line">-v /usr/local/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root --name  mysql mysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># --name为mysql的实例设置别名-p 13306对外暴露的端口，3306内部端口</span><br><span class="line"># -e MYSQL_ROOT_PASSWORD 初始化设置mysql登录密码 -d 表示后台运行</span><br><span class="line"># 最后的mysql是镜像名称-v为挂载（etc为配置文件，log为日志文件，lib为配置文件，将mysql容器内部文件挂载到linux中，每次变动都会在linux显示，而不用进入到容器内部查看）</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="进入容器内部-mysql为容器名字"><a href="#进入容器内部-mysql为容器名字" class="headerlink" title="进入容器内部(mysql为容器名字)"></a>进入容器内部(mysql为容器名字)</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql bash</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="登录mysql"><a href="#登录mysql" class="headerlink" title="登录mysql"></a>登录mysql</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p root</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="创建用户授予权限"><a href="#创建用户授予权限" class="headerlink" title="创建用户授予权限"></a>创建用户授予权限</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grant all on *.* to root@&#x27;%&#x27;;</span><br><span class="line">flush privileges;#刷新权限</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld.service#开启防火墙</span><br><span class="line">firewall-cmd --list-ports#查看开启的端口号</span><br><span class="line">firewall-cmd --zone=public --add-port=13306/tcp --permanent</span><br><span class="line">#永久开启一个端口号</span><br><span class="line">firewall-cmd --reload#重启防火墙</span><br><span class="line">firewall-cmd --list-ports#再次查看端口号是否开启</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="本地可以使用docker地址加暴露ip连接mysql"><a href="#本地可以使用docker地址加暴露ip连接mysql" class="headerlink" title="本地可以使用docker地址加暴露ip连接mysql"></a>本地可以使用docker地址加暴露ip连接mysql</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip addr#查看虚拟机ip地址，使用工具连接ip加端口</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><h5 id="docker启动mysql失败"><a href="#docker启动mysql失败" class="headerlink" title="docker启动mysql失败"></a>docker启动mysql失败</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@ecs-kc1-small-1-linux:~# docker run -p 3306:3306 mysql:8-oracle</span><br><span class="line">2022-03-05 13:40:49+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.0.28-1.el8 started.</span><br><span class="line">2022-03-05 13:40:50+00:00 [Note] [Entrypoint]: Switching to dedicated user &#x27;mysql&#x27;</span><br><span class="line">2022-03-05 13:40:50+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.0.28-1.el8 started.</span><br><span class="line">2022-03-05 13:40:50+00:00 [ERROR] [Entrypoint]: Database is uninitialized and password option is not specified</span><br><span class="line">    You need to specify one of the following:</span><br><span class="line">    - MYSQL_ROOT_PASSWORD</span><br><span class="line">    - MYSQL_ALLOW_EMPTY_PASSWORD</span><br><span class="line">    - MYSQL_RANDOM_ROOT_PASSWORD</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>此问题的原因是启动命令中缺少密码，由于使用的是Linux的root用户，因此将启动命令修改为如下所示：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql -d -it -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="连接docker中的elasticsearch7-6-2"><a href="#连接docker中的elasticsearch7-6-2" class="headerlink" title="连接docker中的elasticsearch7.6.2"></a>连接docker中的elasticsearch7.6.2</h3><h4 id="主要步骤-1"><a href="#主要步骤-1" class="headerlink" title="主要步骤"></a>主要步骤</h4><h5 id="docker下载相关镜像"><a href="#docker下载相关镜像" class="headerlink" title="docker下载相关镜像"></a>docker下载相关镜像</h5><p><code>docker pull elasticsearch:7.6.2</code></p><h5 id="创建持久化文件"><a href="#创建持久化文件" class="headerlink" title="创建持久化文件"></a>创建持久化文件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /mydata/elasticsearch/config</span><br><span class="line">mkdir -p /mydata/elasticsearch/data</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h5><p><code>echo &quot;http.host: 0.0.0.0&quot; &gt;&gt; /mydata/elasticsearch/config/elasticsearch.yml</code></p><h5 id="启动镜像"><a href="#启动镜像" class="headerlink" title="启动镜像"></a>启动镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker run --name elasticsearch -p 9200:9200 -p 9300:9300 \</span><br><span class="line">-e &quot;discovery.type=single-node&quot; \</span><br><span class="line">-e ES_JAVA_OPTS=&quot;-Xms84m -Xmx512m&quot; \</span><br><span class="line">-v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \</span><br><span class="line">-v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \</span><br><span class="line">-v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">-d elasticsearch:7.6.2</span><br><span class="line"></span><br><span class="line"># -p:端口映射</span><br><span class="line"># -e discovery.type=single-node 单点模式启动</span><br><span class="line"># -e ES_JAVA_OPTS=&quot;-Xms84m -Xmx512m&quot;：设置启动占用的内存范围（实验环境启动后可能因为云服务器内存过小而占满）</span><br><span class="line"># -v 目录挂载</span><br><span class="line"># -d 后台运行</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="安装kibana"><a href="#安装kibana" class="headerlink" title="安装kibana"></a>安装kibana</h5><h6 id="下载同版本镜像"><a href="#下载同版本镜像" class="headerlink" title="下载同版本镜像"></a>下载同版本镜像</h6><p><code>docker pull kibana:7.6.2</code></p><h6 id="初始化配置-1"><a href="#初始化配置-1" class="headerlink" title="初始化配置"></a>初始化配置</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /mydata/kibana</span><br><span class="line">touch /mydata/kibana/kibana.yml</span><br><span class="line">vim /mydata/kibana/kibana.yml</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">elasticsearch.hosts:</span> <span class="string">http://你的ip:9200</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="启动kibana"><a href="#启动kibana" class="headerlink" title="启动kibana"></a>启动kibana</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --name kibana -v /mydata/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml -p 5601:5601 -d kibana:7.6.2 </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="常见问题-1"><a href="#常见问题-1" class="headerlink" title="常见问题"></a>常见问题</h4><h5 id="文件权限问题"><a href="#文件权限问题" class="headerlink" title="文件权限问题"></a>文件权限问题</h5><p>elasticsearch启动后使用docker ps查看发现未正常启动，查看启动日志</p><p><code>docker logs elasticsearch</code></p><p><img src="https://s1.ax1x.com/2023/02/17/pSqCzhn.png"></p><p>发现是文件拒绝访问异常,为该文件夹设置所有用户都有读写执行权限</p><p><code>chmod -R 777 /mydata/elasticsearch/</code></p><p>重新启动elasticsearch</p><p><code>docker restart elasticsearch</code></p><h5 id="jdk版本过低"><a href="#jdk版本过低" class="headerlink" title="jdk版本过低"></a>jdk版本过低</h5><p>启动日志中也有可能报以下错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OpenJDK 64-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated in version 9.0 and will likely be removed in a future release.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>原因是jdk版本过低，需要将jdk升级到9.0以上；去镜像网站下载jdk(这里是去华为云下载的)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line"></span><br><span class="line">wget https://repo.huaweicloud.com/java/jdk/9.0.1+11/jdk-9.0.1_linux-x64_bin.tar.gz</span><br><span class="line"></span><br><span class="line"># 解压</span><br><span class="line">tar -zxvf jdk-9.0.1_linux-x64_bin.tar.gz </span><br><span class="line"></span><br><span class="line"># 配置JAVA_HOME</span><br><span class="line">vim /etc/profile</span><br><span class="line"># 内容如下</span><br><span class="line">export JAVA_HOME=/usr/local/jdk-9.0.1</span><br><span class="line">export JRE_HOME=/usr/local/jdk-9.0.1/jre</span><br><span class="line">export CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JRE_HOME/lib</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br><span class="line"></span><br><span class="line"># 删除原jdk环境</span><br><span class="line"># 此时执行java-version可能显示的还是jdk1.8</span><br><span class="line"># 执行which java，会输出一个目录，删除之</span><br><span class="line"># 执行which javac，也会输出一个目录，删除之</span><br><span class="line"># 执行 ln -s $JAVA_HOME/bin/java /usr/bin/java</span><br><span class="line"># 执行 ln -s $JAVA_HOME/bin/javac /usr/bin/javac</span><br><span class="line"># 执行 source /etc/profile再次查看java版本即可</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="连接docker中的redis"><a href="#连接docker中的redis" class="headerlink" title="连接docker中的redis"></a>连接docker中的redis</h3><h4 id="主要步骤-2"><a href="#主要步骤-2" class="headerlink" title="主要步骤"></a>主要步骤</h4><h5 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h5><p><code>docker pull redis</code></p><h5 id="挂载配置文件"><a href="#挂载配置文件" class="headerlink" title="挂载配置文件"></a>挂载配置文件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/redis/myredis</span><br><span class="line">cd /home/redis/myredis</span><br><span class="line">mkdir data</span><br><span class="line">vim redis.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"># bind 192.168.1.100 10.0.0.1</span><br><span class="line"># bind 127.0.0.1 ::1</span><br><span class="line"># bind 127.0.0.1</span><br><span class="line"># redis.conf</span><br><span class="line"></span><br><span class="line">protected-mode no</span><br><span class="line">port 6379</span><br><span class="line">tcp-backlog 511</span><br><span class="line">requirepass 123456#设置密码</span><br><span class="line">timeout 0</span><br><span class="line">tcp-keepalive 300</span><br><span class="line">daemonize no</span><br><span class="line">supervised no</span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line">loglevel notice</span><br><span class="line">logfile &quot;&quot;</span><br><span class="line">databases 30</span><br><span class="line">always-show-logo yes</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line">rdbcompression yes</span><br><span class="line">rdbchecksum yes</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">dir ./</span><br><span class="line">replica-serve-stale-data yes</span><br><span class="line">replica-read-only yes</span><br><span class="line">repl-diskless-sync no</span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line">replica-priority 100</span><br><span class="line">lazyfree-lazy-eviction no</span><br><span class="line">lazyfree-lazy-expire no</span><br><span class="line">lazyfree-lazy-server-del no</span><br><span class="line">replica-lazy-flush no</span><br><span class="line">appendonly yes#开启redis持久化</span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line">aof-load-truncated yes</span><br><span class="line">aof-use-rdb-preamble yes</span><br><span class="line">lua-time-limit 5000</span><br><span class="line">slowlog-max-len 128</span><br><span class="line">notify-keyspace-events &quot;&quot;</span><br><span class="line">hash-max-ziplist-entries 512</span><br><span class="line">hash-max-ziplist-value 64</span><br><span class="line">list-max-ziplist-size -2</span><br><span class="line">list-compress-depth 0</span><br><span class="line">set-max-intset-entries 512</span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line">hll-sparse-max-bytes 3000</span><br><span class="line">stream-node-max-bytes 4096</span><br><span class="line">stream-node-max-entries 100</span><br><span class="line">activerehashing yes</span><br><span class="line">hz 10</span><br><span class="line">dynamic-hz yes</span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br><span class="line">rdb-save-incremental-fsync yes</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="启动redis容器"><a href="#启动redis容器" class="headerlink" title="启动redis容器"></a>启动redis容器</h5><p><code>docker run --restart=always --log-opt max-file=2 -p 6379:6379 --name myredis -v /home/redis/myredis/myredis.conf:/etc/redis/redis.conf -v /home/redis/myredis/data:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes --requirepass 123456 </code></p><h5 id="进入容器内部测试"><a href="#进入容器内部测试" class="headerlink" title="进入容器内部测试"></a>进入容器内部测试</h5><p><code>docker exec -it myredis redis-cli</code></p><p><code>auth 123456</code></p><p><code>ping</code></p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>在启动redis时不要修改防火墙，可能会出现报错</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法笔记</title>
      <link href="/2023/10/13/markdown%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/10/13/markdown%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<ul><li>一级标题：（#+空格+对应内容）（ctrl+1）（以此类推）（使用ctrl+或ctrl-调整标题等级）</li><li>下划线：（ctrl+u）（u标签）</li><li>删除线：（~~）（Alt+shift+5）</li><li>字体加粗：（__或**）（ctrl+b）</li><li>字体倾斜：（*或_）（ctrl+i）</li><li>加粗斜体：（***）</li><li>图片插入：（直接拖入想要插入的图片）</li><li>超链接：（[描述](地址)）(ctrl+k)</li><li>代码区：（`&#96;&#96;+类型+回车）</li><li>有序序列：（1.+空格+内容+回车 或 ctrl+shift+[）</li><li>无序序列：（+、-、* + 空格 或 ctrl+shift+]）</li><li>引用：（&gt;+空格）</li><li>表情：（:+单词）</li><li>高亮：（&#x3D;&#x3D;）</li><li>调整字体：（font标签）</li><li>插入表格：（ctrl+t）</li><li>清除样式：（ctrl+\）</li><li>缩进：（减少缩进：ctrl+[）（增加缩进：ctrl+]）</li><li>选中当前词：（ctrl+d）</li><li>选中当前行：（ctrl+l）</li><li>选中当前格式文本：（ctrl+e）</li><li>替换：（ctrl+h）</li><li>关闭：（ctrl+w）</li><li>复制为MarkDown格式：（Ctrl + shift + C）</li><li>粘贴为纯文本格式：（Ctrl + shift + V ）</li><li>显示&#x2F;隐藏侧边栏：（Ctrl + shift + L）</li><li>插入代码块：（Ctrl + shift + K）</li><li>插入公式：（Ctrl + shift + M）</li><li>引用：（Ctrl + shift + Q）</li><li>正常输入对应符号需要在前面添加转义符\</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建笔记</title>
      <link href="/2023/10/13/hexo%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/10/13/hexo%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="Hexo初步搭建"><a href="#Hexo初步搭建" class="headerlink" title="Hexo初步搭建"></a>Hexo初步搭建</h3><h4 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h4><p>hexo是基于node.js的静态博客框架，可以方便地生成静态网页托管在GitHub和Coding上，下列是<a href="https://hexo.io/zh-cn/">hexo官网</a></p><h4 id="Hexo搭建步骤"><a href="#Hexo搭建步骤" class="headerlink" title="Hexo搭建步骤"></a>Hexo搭建步骤</h4><ol><li>安装Git</li><li>安装Node.js</li><li>安装Hexo</li><li>Github创建个人仓库</li><li>生成SSH添加到GitHub</li><li>将hexo部署到GitHub</li><li>设置个人域名</li><li>发布文章</li></ol><h5 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h5><p><strong>windows：</strong>到git官网上下载，<a href="https://gitforwindows.org/">Download git</a>，下载后会有一个Git Bash的命令行工具可供使用</p><p><strong>linux：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p>安装好以后可使用<code>git --version</code>查看版本</p><h5 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h5><p><strong>windows：</strong><a href="https://nodejs.org/en/download/">nodejs</a>官网下载</p><p><strong>linux：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure><p>安装完成后可以使用<code>node -v</code>或<code>npm -v</code>查看对应的版本，检查是否安装成功</p><h5 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h5><p>首先创建一个blog文件夹，在该文件夹下使用git bash输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>使用<code>hexo -v</code>查看版本</p><p>初始化hexo：<code>hexo init myblogname</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd myblogname</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h6 id="hexo创建文件夹目录介绍"><a href="#hexo创建文件夹目录介绍" class="headerlink" title="hexo创建文件夹目录介绍"></a>hexo创建文件夹目录介绍</h6><ul><li>node_modules：依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：存放自己的文章</li><li>themes：主题</li><li>_config.yml：博客的配置文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>打开hexo服务后，在浏览器中输入localhost:4000可以看到本地生成的博客</p><h5 id="github创建个人仓库"><a href="#github创建个人仓库" class="headerlink" title="github创建个人仓库"></a>github创建个人仓库</h5><p>首先注册一个github账户，通过<code>New repository</code>新建仓库；创建一个和用户名相同的仓库，后面加<code>.github.io</code>便于后续部署到github page的时候识别</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d002150a2eb02a0358d1c88199e4e726.png"></p><h5 id="生成SSH添加到github"><a href="#生成SSH添加到github" class="headerlink" title="生成SSH添加到github"></a>生成SSH添加到github</h5><p>回到git bash中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>可以用以下两条检验是否输入正确</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>然后创建ssh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>在对应的路径中找到ssh存放目录，其中<code>id_rsa</code>是私人秘钥，<code>id_rsa.pub</code>是公共秘钥，将该公钥放在github上，当链接github自己的账户时，它会根据公钥匹配私钥，从而判断是否能够通过git上传文件</p><p>在GitHub的setting中找到SSH keys的设置选项，点击<code>New SSH key</code><br>将<code>id_rsa.pub</code>里面的信息复制进去</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3194ad0a9d04d94c09485122932968f3.png"></p><p>通过<code>ssh -T git@github.com</code>查看是否成功</p><h5 id="将hexo部署到github中"><a href="#将hexo部署到github中" class="headerlink" title="将hexo部署到github中"></a>将hexo部署到github中</h5><p>在<code>_config.yml</code>的最后修改为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/YourgithubName/YourgithubName.github.io.git</span></span><br><span class="line">  <span class="comment"># 若后续部署失败，可以尝试更改为ssh方式,将上述链接替换成下面：</span></span><br><span class="line">  <span class="comment"># git@github.com:YourgithubName/YourgithubName.github.io.git（推荐）</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>安装deploy-git，即部署命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>其中<code>hexo clean</code>表示清除之前生成的东西，可以不加</p><p><code>hexo generate</code>表示生成静态文章，可以用<code>hexo g</code>缩写</p><p><code>hexo deploy</code>部署文章，可以用<code>hexo d</code>缩写</p><p>出现下图表示部署成功，稍后可以在<code>http://yourname.github.io</code>看到博客</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a4eba29bb7c185169228b596e636422f.png"></p><h5 id="设置个人域名"><a href="#设置个人域名" class="headerlink" title="设置个人域名"></a>设置个人域名</h5><p>在阿里云上购买一个域名，然后在域名控制台中查看购买的域名，点<strong>解析</strong>进去，添加解析<strong>，解析线路选择默认</strong>；登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入域名</p><p>然后在博客文件source中创建一个名为CNAME文件；写上域名</p><p>最后在gitbash中输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>过一段时间输入域名就可以看到网站了；接下来可以正式开始写文章了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new newpapername</span><br></pre></td></tr></table></figure><p>然后在source&#x2F;_post中打开markdown文件开始编辑，写完后输入下列指令可以看到已经更新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><h3 id="Hexo基本配置"><a href="#Hexo基本配置" class="headerlink" title="Hexo基本配置"></a>Hexo基本配置</h3><p>在文件根目录下的<code>_config.yml</code>就是整个hexo框架的配置文件了。可以在里面修改大部分的配置</p><h4 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h4><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>网站标题</td></tr><tr><td>subtitle</td><td>网站副标题</td></tr><tr><td>description</td><td>网站描述</td></tr><tr><td>author</td><td>作者</td></tr><tr><td>language</td><td>网站使用的语言</td></tr><tr><td>timezone</td><td>网站时区，默认使用用户电脑的时区</td></tr></tbody></table><h4 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h4><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>url</td><td>网址</td></tr><tr><td>root</td><td>网站根目录</td></tr><tr><td>permalink</td><td>文章的永久链接格式</td></tr><tr><td>permalink_defaults</td><td>永久链接各部分的默认值</td></tr></tbody></table><p>将<code>url</code>改成自己的网站域名，permalink即生成文章时的链接格式；如新建一个文章<code>test.md</code>，此时自动生成的地址是<code>http://yoursite.com/年/月/日/test</code></p><p>以下是官方给出的示例，更多变量可以去官网上查找 <a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a> </p><table><thead><tr><th>参数</th><th>结果</th></tr></thead><tbody><tr><td>:year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;</td><td>2013&#x2F;07&#x2F;14&#x2F;hello-world</td></tr><tr><td>:year-:month-:day-:title.html</td><td>2013-07-14-hello-world.html</td></tr><tr><td>:category&#x2F;:title</td><td>foo&#x2F;bar&#x2F;hello-world</td></tr></tbody></table><p><code>theme</code>即选择的主题，默认为<code>landscape</code>，需要更换主题时可以在官网上下载，把主题的文件放在<code>theme</code>文件夹下，再修改这个参数就可以了；</p><p>接下来这个<code>deploy</code>就是网站的部署的，<code>repo</code>就是仓库(<code>Repository</code>)的简写。<code>branch</code>选择仓库的哪个分支</p><h4 id="git分支进行多端工作"><a href="#git分支进行多端工作" class="headerlink" title="git分支进行多端工作"></a>git分支进行多端工作</h4><p>使用场景：部署博客和想要操作的文件不一样；利用git的分支系统进行多端工作，只需简单的配置和在github上将文件同步下来即可操作</p><h5 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h5><p><code>hexo d</code>上传部署到github的是hexo编译后的文件，是用来生成网页的，不包含源文件；即上传的是本地目录中自动生成的<code>.deploy_git</code>里的，其它文件都没有上传到github；故利用git的分支管理，将源文件上传到github的另一个分支即可</p><h5 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h5><ol><li><p>创建新分支</p></li><li><p>在该仓库的settings中选择默认分支为新分支（这样同步时无需指定分支）</p></li><li><p>在本地的任意目录下打开git bash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:YourgithubName/YourgithubName.github.io.git</span><br></pre></td></tr></table></figure></li></ol><p>将其克隆到本地，把除了.git 文件夹外的所有文件都删掉，把之前我们写的博客源文件全部复制过来，除了<code>.deploy_git</code>。复制过来的源文件应该有一个<code>.gitignore</code>，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下，表示这些类型文件不需要git：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure><p>   注意，若之前克隆过theme中的主题文件，则应把主题文件中的<code>.git</code>删掉</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">   git commit –m &quot;add branch&quot;</span><br><span class="line">   git push </span><br></pre></td></tr></table></figure><p>   这样就上传完了，可以去github上看一看新分支有没有上传上去，其中<code>node_modules</code>、<code>public</code>、<code>db.json</code>已经被忽略掉了，没有关系，不需要上传的，因为在别的电脑上需要重新输入命令安装。</p><h5 id="更换电脑操作"><a href="#更换电脑操作" class="headerlink" title="更换电脑操作"></a>更换电脑操作</h5><p>和之前的环境搭建一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git#安装git</span><br><span class="line"></span><br><span class="line">git config --global user.name &quot;yourgithubname&quot;</span><br><span class="line">git config --global user.email &quot;yourgithubemail&quot;#设置邮箱用户名</span><br><span class="line"></span><br><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br><span class="line">#生成后填到github和coding上（有coding平台的话）</span><br><span class="line">#验证是否成功</span><br><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T git@git.coding.net #(有coding平台的话)#设置ssh key</span><br><span class="line"></span><br><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm#安装nodejs</span><br><span class="line"></span><br><span class="line">sudo npm install hexo-cli -g#安装hexo</span><br><span class="line"></span><br><span class="line">#此时无需初始化，直接在任意文件夹下</span><br><span class="line">git clone git@github.com:YourgithubName/YourgithubName.github.io.git</span><br><span class="line"></span><br><span class="line">#进入克隆到的文件夹</span><br><span class="line">cd xxx.github.io</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line">#生成，部署</span><br><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><h4 id="coding-page部署实现国内外分流"><a href="#coding-page部署实现国内外分流" class="headerlink" title="coding page部署实现国内外分流"></a>coding page部署实现国内外分流</h4><p>若希望博客能被百度收录且更快的访问，则可以在国内的coding page做一个托管，这样在国内访问就是coding page，国外就走github page</p><ol><li><p>申请coding账户，新建项目</p></li><li><p>添加ssh key，该步骤和github一样</p></li><li><p>修改_config.yml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: </span><br><span class="line">    coding: git@git.coding.net:yourgithubname/yourgithubname.git,master</span><br><span class="line">    github: git@github.com:yourgithubname/yourgithubname.github.io.git,master</span><br></pre></td></tr></table></figure></li><li><p>部署</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></li><li><p>开启coding pages服务，绑定域名</p><p><img src="https://img-blog.csdnimg.cn/img_convert/10a1bbb64e8a644bafb91a2cc772e5a3.png"></p></li><li><p>阿里云添加解析，将github的解析改为境外，将coding的解析设为默认</p></li></ol><h3 id="Hexo添加功能"><a href="#Hexo添加功能" class="headerlink" title="Hexo添加功能"></a>Hexo添加功能</h3><p>包括搜索的SEO，阅读量统计，访问量统计和评论系统等功能；参考 <a href="http://visugar.com/2017/08/01/20170801HexoPlugins/">visugar.com</a></p><h4 id="SEO（Search-Engine-Optimization）优化"><a href="#SEO（Search-Engine-Optimization）优化" class="headerlink" title="SEO（Search Engine Optimization）优化"></a>SEO（Search Engine Optimization）优化</h4><ol><li><p>登录百度站长平台添加网站</p></li><li><p>提交链接</p><p>使用npm自动生成网站的sitemap，然后将生成的sitemap提交到百度和其他搜索引擎</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generation-sitemap --save</span><br><span class="line">npm install hexo-generation-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>在根目录下的_config.xml&#96;中看看url有没有改成自己的</p><p>重新部署后，就可以在public文件夹下看到生成的sitemap.xml和baidusitemap.xml，然后就可以向百度提交你的站点地图了，建议使用自动提交，自动提交又分为三种：主动推送、自动推送、sitemap</p><ul><li>自动推送：把百度生成的自动推送代码，放在主题文件<code>/layout/common/head.ejs</code>的适当位置，然后验证一下就可以了</li><li>sitemap：把两个sitemap地址，提交上去，看到状态正常就OK了</li><li>隔一段时间去<code>site:&lt;域名&gt;</code>查看是否被收录</li></ul></li></ol><h4 id="添加百度统计"><a href="#添加百度统计" class="headerlink" title="添加百度统计"></a>添加百度统计</h4><p>在<a href="https://tongji.baidu.com/">百度统计</a>中，注册一下；将代码复制到<code>head.ejs</code>文件中，再进行安装检查</p><h4 id="文章阅读量统计leanCloud"><a href="#文章阅读量统计leanCloud" class="headerlink" title="文章阅读量统计leanCloud"></a>文章阅读量统计leanCloud</h4><p><a href="https://leancloud.cn/">leanCloud</a>，进去后注册一下，进入后创建一个应用：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fda4f72f190ff5910ff790b05641096c.png"></p><p>在<code>存储</code>中创建Class，命名为Counter</p><p><img src="https://img-blog.csdnimg.cn/img_convert/16843063bfd1ae6f2e743001bc06067e.png"></p><p>然后在设置页面看到应用Key&#96;，在主题的配置文件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">leancloud_visitors:</span><br><span class="line">  enable: true</span><br><span class="line">  app_id: yourid</span><br><span class="line">  app_key: yourkey</span><br></pre></td></tr></table></figure><p>在<code>article.ejs</code>中适当的位置添加如下，设置文章阅读量统计显示位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">阅读数量:&lt;span id=&quot;&lt;%= url_for(post.path) %&gt;&quot; class=&quot;leancloud_visitors&quot; data-flag-title=&quot;&lt;%- post.title %&gt;&quot;&gt;&lt;/span&gt;次</span><br></pre></td></tr></table></figure><p>然后在<code>footer.ejs</code>的最后添加如下，重新部署即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;//cdn1.lncld.net/static/js/2.5.0/av-min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var APP_ID = &#x27;你的app id&#x27;;</span><br><span class="line">    var APP_KEY = &#x27;你的app key&#x27;;</span><br><span class="line">    AV.init(&#123;</span><br><span class="line">        appId: APP_ID,</span><br><span class="line">        appKey: APP_KEY</span><br><span class="line">    &#125;);</span><br><span class="line">    // 显示次数</span><br><span class="line">    function showTime(Counter) &#123;</span><br><span class="line">        var query = new AV.Query(&quot;Counter&quot;);</span><br><span class="line">        if($(&quot;.leancloud_visitors&quot;).length &gt; 0)&#123;</span><br><span class="line">            var url = $(&quot;.leancloud_visitors&quot;).attr(&#x27;id&#x27;).trim();</span><br><span class="line">            // where field</span><br><span class="line">            query.equalTo(&quot;words&quot;, url);</span><br><span class="line">            // count</span><br><span class="line">            query.count().then(function (number) &#123;</span><br><span class="line">                // There are number instances of MyClass where words equals url.</span><br><span class="line">                $(document.getElementById(url)).text(number?  number : &#x27;--&#x27;);</span><br><span class="line">            &#125;, function (error) &#123;</span><br><span class="line">                // error is an instance of AVError.</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 追加pv</span><br><span class="line">    function addCount(Counter) &#123;</span><br><span class="line">        var url = $(&quot;.leancloud_visitors&quot;).length &gt; 0 ? $(&quot;.leancloud_visitors&quot;).attr(&#x27;id&#x27;).trim() : &#x27;icafebolger.com&#x27;;</span><br><span class="line">        var Counter = AV.Object.extend(&quot;Counter&quot;);</span><br><span class="line">        var query = new Counter;</span><br><span class="line">        query.save(&#123;</span><br><span class="line">            words: url</span><br><span class="line">        &#125;).then(function (object) &#123;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    $(function () &#123;</span><br><span class="line">        var Counter = AV.Object.extend(&quot;Counter&quot;);</span><br><span class="line">        addCount(Counter);</span><br><span class="line">        showTime(Counter);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php笔记</title>
      <link href="/2023/10/13/php%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/10/13/php%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="PHP符号"><a href="#PHP符号" class="headerlink" title="PHP符号"></a>PHP符号</h3><p>当解析一个文件时，PHP会寻找起始和结束标记，即&lt;?php和?&gt;，这告诉PHP开始和停止解析二者之间的代码，此种解析方式使得PHP可以被嵌入到各种不同的文档中，任何起始和结束之外的部分都会被PHP解析器忽略；</p><p>若文件内容是纯PHP代码，最好在文件末尾删除PHP结束标记，避免在PHP结束标记之后意外加了空格或换行符导致PHP开始输出这些空白，而脚本中此时并无输出的意图</p><p><code>-&gt;</code>是“插入式解引用操作符”，调用由&#x3D;&#x3D;引用&#x3D;&#x3D;传递参数的子程序的方法</p><p><code>=&gt;</code>用于数组中key指向value</p><p><code>::</code>是范围解析操作符，又名域运算符，与C的<code>.</code>相似，php调用类的内部静态成员，或是类之间的调用就用<code>::</code></p><p><code>@</code>在@mysql_num_rows($res)中会忽略后面的表达式的错误</p><p><code>&#123;&#125;</code>：</p><p>将多个语句合并为一个复合语句，如在if…else…中的使用；</p><p>变量间接引用中定界，避免歧义，如：${$my_var[8]}与${$my_var}[8]的区分</p><p>用于只是字符串变量中单个字符（下标从0开始），如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$my_str</span>=<span class="string">&quot;1234&quot;</span>;</span><br><span class="line"><span class="variable">$my_str</span>&#123;<span class="number">1</span>&#125;=<span class="string">&quot;5&quot;</span>;<span class="comment">//现在$my_str内容为&#x27;1534&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="指针和引用的区别"><a href="#指针和引用的区别" class="headerlink" title="指针和引用的区别"></a>指针和引用的区别</h4><p><code>指针</code>：一个存储地址的变量，即指针是一个实体</p><p><code>引用</code>：跟原来的变量实质上是同一个东西，是原变量的一个别名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">1</span>; <span class="type">int</span> *p=&amp;a;</span><br><span class="line"><span class="type">int</span> a=<span class="number">1</span>; <span class="type">int</span> &amp;b=a;</span><br></pre></td></tr></table></figure><p><code>此用法为PHP5之后的特性，用于消除使用中括号引起的歧义</code></p><ul><li>可以有const指针，但是没有const引用</li><li>指针可以多级，引用只能一级</li><li>指针的值可以为空，但是引用的值不能为NULL</li><li>指针的值在初始化后可以改变，引用在初始化后就不会再改变了</li><li>“sizeof引用“得到的是指向的变量的大小，而”sizeof指针“得到的是指针大小</li></ul><h3 id="PDO"><a href="#PDO" class="headerlink" title="PDO"></a>PDO</h3><p>PHP数据对象（PHP Data Object）的缩写，用于统一各种数据库的访问接口</p><h4 id="创建PDO类的对象"><a href="#创建PDO类的对象" class="headerlink" title="创建PDO类的对象"></a>创建PDO类的对象</h4><p><em><strong>PDO::__construct ( string $dsn [, string $username [, string $password]] )</strong></em></p><ul><li>$dsn:表示数据源名称，包含了连接到数据库的信息，通常一个DSN由PDO驱动名、冒号以及具体PDO驱动的连接语法组成，例如：$dsn &#x3D; “mysql : host&#x3D;127.0.0.1; port&#x3D;3306; dbname&#x3D;db; charset&#x3D;utf8”</li></ul><p><img src="https://img-blog.csdnimg.cn/20200928230132532.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTkzNDUyMA==,size_16,color_FFFFFF,t_70"></p><h4 id="PDO对象常用方法"><a href="#PDO对象常用方法" class="headerlink" title="PDO对象常用方法"></a>PDO对象常用方法</h4><h5 id="PDO-exec-方法"><a href="#PDO-exec-方法" class="headerlink" title="PDO::exec()方法"></a>PDO::exec()方法</h5><ul><li>表示执行一条SQL语句并返回受影响的行数</li><li>语法：int PDO::exec(string $sql)；$sql表示要被预处理和执行的SQL语句，<font color=red>不会从SELECT语句返回结果</font></li><li>返回受修改或删除SQL语句影响的行数，若没有受影响的行，则返回0</li></ul><p><img src="https://img-blog.csdnimg.cn/20200930162053250.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTkzNDUyMA==,size_16,color_FFFFFF,t_70"></p><h5 id="PDO-query-方法"><a href="#PDO-query-方法" class="headerlink" title="PDO::query()方法"></a>PDO::query()方法</h5><ul><li>表示执行一条SQL语句，返回一个结果集对象（<strong>PDOStatement</strong> ）</li><li>语法：public PDOStatement PDO::query ( string $statement )</li><li>主要用于SELECT、SHOW语句</li><li>执行成功返回PDOstatement对象，执行失败返回FALSE</li></ul><p><img src="https://img-blog.csdnimg.cn/20200930162138986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTkzNDUyMA==,size_16,color_FFFFFF,t_70"></p><h5 id="PDO-lastInsertId-方法"><a href="#PDO-lastInsertId-方法" class="headerlink" title="PDO::lastInsertId()方法"></a>PDO::lastInsertId()方法</h5><ul><li>返回最后插入成功记录的id或序列值</li><li>语法：string PDO::lastInsertId ( void )</li></ul><p><img src="https://img-blog.csdnimg.cn/20200930162219957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTkzNDUyMA==,size_16,color_FFFFFF,t_70"></p><h5 id="PDO-setAttribute-方法"><a href="#PDO-setAttribute-方法" class="headerlink" title="PDO::setAttribute()方法"></a>PDO::setAttribute()方法</h5><ul><li>设置数据库句柄属性</li><li>语法：bool PDO::setAttribute ( int $attribute , mixed $value )</li><li>PDO内置的一些可用的通用属性<ul><li>PDO::ATTR_CASE：强制列名为指定的大小写</li><li>PDO::ATTR_ERRMODE：错误报告</li><li>PDO::ATTR_DEFAULT_FETCH_MODE： 设置默认的提取模式</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/20200930162258378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTkzNDUyMA==,size_16,color_FFFFFF,t_70"></p><h4 id="Statement对象常用方法"><a href="#Statement对象常用方法" class="headerlink" title="Statement对象常用方法"></a>Statement对象常用方法</h4><h5 id="PDOStatement-fetch-方法"><a href="#PDOStatement-fetch-方法" class="headerlink" title="PDOStatement::fetch()方法"></a>PDOStatement::fetch()方法</h5><ul><li>从结果集中获取一行，并向下移动指针</li><li>语法：mixed PDOStatement::fetch ([ int $fetch_style ] )</li><li>参数：$fetch_style控制下一行如何返回给调用者<ul><li>PDO::FETCH_ASSOC，返回一个索引为结果集列名的数组</li><li>PDO::FETCH_BOTH(默认)，返回一个索引为结果集列名和以0开始的列号的数组</li><li>PDO::FETCH_NUM：返回一个索引为以0开始的结果集列号的数组</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/20200930162354370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTkzNDUyMA==,size_16,color_FFFFFF,t_70"></p><h5 id="PDOStatement-fetchAll-方法"><a href="#PDOStatement-fetchAll-方法" class="headerlink" title="PDOStatement::fetchAll()方法"></a>PDOStatement::fetchAll()方法</h5><ul><li>返回一个包含结果集中所有行的数组</li><li>语法：array PDOStatement::fetchAll ([ int $fetch_style ] (同上))</li></ul><p><img src="https://img-blog.csdnimg.cn/20200930162432177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTkzNDUyMA==,size_16,color_FFFFFF,t_70"></p><h5 id="PDOStatement-rowCount-方法"><a href="#PDOStatement-rowCount-方法" class="headerlink" title="PDOStatement::rowCount()方法"></a>PDOStatement::rowCount()方法</h5><ul><li>返回受上一个SQL语句影响的行数</li><li>语法：int PDOStatement::rowCount ( void )</li><li>想要使用该函数，必须使用$pdo-&gt;query()返回PDOStatement对象</li></ul><h4 id="PDO错误处理"><a href="#PDO错误处理" class="headerlink" title="PDO错误处理"></a>PDO错误处理</h4><h5 id="PDO支持三种错误模式"><a href="#PDO支持三种错误模式" class="headerlink" title="PDO支持三种错误模式"></a>PDO支持三种错误模式</h5><ul><li><p>静默模式（Slient）：错误发生后不会主动报错，是默认的模式；此时不会讲错误显示在页面上，可以通过PDO的PDO::errorCode()和PDO::errorInfo()两个方法，来获取错误信息</p><p><img src="https://img-blog.csdnimg.cn/20200930162617497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTkzNDUyMA==,size_16,color_FFFFFF,t_70"></p></li><li><p>警告模式（Warning）：错误发生后通过PHP标准来报告错误；使用setAttribute()方法提前设置</p><p><img src="https://img-blog.csdnimg.cn/20200930162807547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTkzNDUyMA==,size_16,color_FFFFFF,t_70"></p></li><li><p>异常模式（Exception)：错误发生后抛出异常，需要捕捉和处理，需要setAttribute()方法提前设置</p></li></ul><p><img src="https://img-blog.csdnimg.cn/2020093016283844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTkzNDUyMA==,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20200930162903378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTkzNDUyMA==,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20200930162940298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTkzNDUyMA==,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20200930162953217.png"></p><h4 id="SQL语句预处理"><a href="#SQL语句预处理" class="headerlink" title="SQL语句预处理"></a>SQL语句预处理</h4><h5 id="SQL语句执行过程"><a href="#SQL语句执行过程" class="headerlink" title="SQL语句执行过程"></a>SQL语句执行过程</h5><p>SQL语句执行分为编译和执行两个阶段；第一次执行先编译再执行，耗用系统资源，相对不安全；若是第二次执行直接从缓存中读取，执行效率高且安全，有效避免SQL注入等安全问题</p><h5 id="预处理步骤"><a href="#预处理步骤" class="headerlink" title="预处理步骤"></a>预处理步骤</h5><p>先提取并编译相同部分，将编译结果保存，再将不同数据部分替换，执行即可</p><p><img src="https://img-blog.csdnimg.cn/20200930163212958.png"></p><p><img src="https://img-blog.csdnimg.cn/20200930163243759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTkzNDUyMA==,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20200930163411181.png"></p><p><code>PDO的SQL语句预处理实例</code></p><p><img src="https://img-blog.csdnimg.cn/20200930163444103.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTkzNDUyMA==,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20200930163500100.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTkzNDUyMA==,size_16,color_FFFFFF,t_70"></p><h4 id="单例模式封装PDO"><a href="#单例模式封装PDO" class="headerlink" title="单例模式封装PDO"></a>单例模式封装PDO</h4><h5 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h5><p>只会最多产生一个对象的设计思想，单例模式是为了保护资源的唯一性</p><ul><li>单例模式为了解决如何只产生一个对象用到以下解决方案，简称<code>三私一公</code><ul><li><strong>私有化构造方法</strong>：不让在外部产生多个对象</li><li><strong>私有化克隆方法</strong>：不允许对象被克隆产生新的对象</li><li><strong>公有化静态方法</strong>：运行进入类内部产生对象</li><li><strong>私有化静态属性</strong>：保存已经产生的对象</li></ul></li></ul><p><code>实例</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//对象的产生是通过实例化产生的，而实例化是一种不可控行为，即可以产生无限多个对象，所以应该“禁止实例化”，即仅禁止在类外部实例化对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123; <span class="keyword">echo</span> <span class="string">&#x27;hello world&#x27;</span>;&#125;</span><br><span class="line">    <span class="comment">//此时外部不能实例化对象，所以应在还未产生对象的时候进入“类内部”，通过“静态方法”让类直接进入到类内部</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//此时依然没有对象，需要在内部进行对象实例化，且将对象返回给外部</span></span><br><span class="line">        <span class="comment"># 判断内部属性是否存在对象（is_object函数）：最好的判定是存的对象是当前类的instanceof</span></span><br><span class="line">        <span class="keyword">if</span>(!(<span class="built_in">self</span>::<span class="variable">$object</span> <span class="keyword">instanceof</span> <span class="built_in">self</span>))&#123;</span><br><span class="line">            <span class="comment"># 当前保存的内容不是当前类的对象</span></span><br><span class="line">            <span class="built_in">self</span>::<span class="variable">$object</span> = <span class="keyword">new</span> <span class="built_in">self</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 返回对象给外部</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$object</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//上一步开启了实例化对象的窗口，但无限调用静态方法依然可以得到多个对象，若想只返回一个对象，就得保证类内部有办法存某个产生的对象，第一次产生新的，后面返回旧的，此时需要使用静态属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$object</span> = <span class="literal">NULL</span>;<span class="comment">#初始化为NULL，没有对象</span></span><br><span class="line"><span class="comment">//判断内部是否存在对象，根据$object修改getInstance()中返回的内容</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//此时可以保证外部无论多少次调用公有静态方法获取实例都会只得到一个对象，但此时外部对象依然可以产生新的对象：因为克隆，因此必须禁止对象的克隆，即在类内部私有化克隆方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试外部实例化</span></span><br><span class="line"><span class="comment">// $demo = new Singleton();    //报错</span></span><br><span class="line"><span class="comment">// 外部获取对象</span></span><br><span class="line"><span class="variable">$s</span> = <span class="title class_">Singleton</span>::<span class="title function_ invoke__">getInstance</span>();</span><br></pre></td></tr></table></figure><p><code>使用单例模式PDO连接数据库</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQLPDO</span></span>&#123;</span><br><span class="line">    <span class="comment">//数据库默认连接信息</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$dbConfig</span> = <span class="keyword">array</span>(</span><br><span class="line"><span class="string">&#x27;db&#x27;</span>   =&gt; <span class="string">&#x27;mysql&#x27;</span>, <span class="comment">//数据库类型</span></span><br><span class="line"><span class="string">&#x27;host&#x27;</span> =&gt; <span class="string">&#x27;localhost&#x27;</span>, <span class="comment">//服务器地址</span></span><br><span class="line"><span class="string">&#x27;port&#x27;</span> =&gt; <span class="string">&#x27;3306&#x27;</span>, <span class="comment">//端口</span></span><br><span class="line"><span class="string">&#x27;user&#x27;</span> =&gt; <span class="string">&#x27;root&#x27;</span>, <span class="comment">//用户名</span></span><br><span class="line"><span class="string">&#x27;pass&#x27;</span> =&gt; <span class="string">&#x27;weicunbin123&#x27;</span>, <span class="comment">//密码</span></span><br><span class="line"><span class="string">&#x27;charset&#x27;</span> =&gt; <span class="string">&#x27;utf8&#x27;</span>, <span class="comment">//字符集</span></span><br><span class="line"><span class="string">&#x27;dbname&#x27;</span> =&gt; <span class="string">&#x27;testguest&#x27;</span>, <span class="comment">//默认数据库</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">//单例模式 本类对象引用</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$instance</span>;</span><br><span class="line">    <span class="comment">//PDO实例</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$db</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 私有构造方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $params array 数据库连接信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$params</span></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//初始化属性</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;dbConfig = <span class="title function_ invoke__">array_merge</span>(<span class="variable">$this</span>-&gt;dbConfig,<span class="variable">$params</span>);</span><br><span class="line">        <span class="comment">//连接服务器</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">connect</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获得单例对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $params array 数据库连接信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> object 单例的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"><span class="variable">$params</span> = <span class="keyword">array</span>(<span class="params"></span>)</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">self</span>::<span class="variable">$instance</span> <span class="keyword">instanceof</span> <span class="built_in">self</span>)&#123;</span><br><span class="line">            <span class="built_in">self</span>::<span class="variable">$instance</span> = <span class="keyword">new</span> <span class="built_in">self</span>(<span class="variable">$params</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$instance</span>;<span class="comment">//返回对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 私有克隆</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 连接目标服务器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//连接信息</span></span><br><span class="line">            <span class="variable">$dsn</span> = <span class="string">&quot;<span class="subst">&#123;$this-&gt;dbConfig[&#x27;db&#x27;]&#125;</span>:host=<span class="subst">&#123;$this-&gt;dbConfig[&#x27;host&#x27;]&#125;</span>;port=<span class="subst">&#123;$this-&gt;dbConfig[&#x27;host&#x27;]&#125;</span>;dbname=<span class="subst">&#123;$this-&gt;dbConfig[&#x27;dbname&#x27;]&#125;</span>;charset=<span class="subst">&#123;$this-&gt;dbConfig[&#x27;charset&#x27;]&#125;</span>&quot;</span>;<span class="string">&quot;;</span></span><br><span class="line"><span class="string">            //实例化PDO</span></span><br><span class="line"><span class="string">            <span class="subst">$this</span>-&gt;db = new PDO(<span class="subst">$dsn</span>,<span class="subst">$this</span>-&gt;dbConfig[&#x27;user&#x27;],<span class="subst">$this</span>-&gt;dbConfig[&#x27;pass&#x27;])</span></span><br><span class="line"><span class="string">            //设定字符集</span></span><br><span class="line"><span class="string">            <span class="subst">$this</span>-&gt;db-&gt;query(&quot;</span>set names &#123;<span class="variable language_">$this</span>-&gt;dbConfig[<span class="string">&#x27;charset&#x27;</span>]&#125;<span class="string">&quot;);</span></span><br><span class="line"><span class="string">            echo 1;</span></span><br><span class="line"><span class="string">        &#125;catch (PDOException <span class="subst">$e</span>)&#123;</span></span><br><span class="line"><span class="string">            //错误提示</span></span><br><span class="line"><span class="string">            die(&quot;</span>数据库操作失败：&#123;<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>()&#125;<span class="string">&quot;);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string"> * 执行SQL</span></span><br><span class="line"><span class="string"> * @param <span class="subst">$sql</span> string 执行的SQL语句</span></span><br><span class="line"><span class="string"> * @return object PDOStatement</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string"> public function query(<span class="subst">$sql</span>)&#123;</span></span><br><span class="line"><span class="string"> <span class="subst">$rst</span> = <span class="subst">$this</span>-&gt;db-&gt;query(<span class="subst">$sql</span>);</span></span><br><span class="line"><span class="string"> if(<span class="subst">$rst</span>===false)&#123;</span></span><br><span class="line"><span class="string"> <span class="subst">$error</span> = <span class="subst">$this</span>-&gt;db-&gt;errorInfo();</span></span><br><span class="line"><span class="string"> die(&quot;</span>数据库操作失败：ERROR &#123;<span class="variable">$error</span>[<span class="number">1</span>]&#125;(&#123;<span class="variable">$error</span>[<span class="number">0</span>]&#125;): &#123;<span class="variable">$error</span>[<span class="number">2</span>]&#125;<span class="string">&quot;);</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string"> return <span class="subst">$rst</span>;</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string"> /**</span></span><br><span class="line"><span class="string"> * 取得一行结果</span></span><br><span class="line"><span class="string"> * @param <span class="subst">$sql</span> string 执行的SQL语句</span></span><br><span class="line"><span class="string"> * @return array 关联数组结果 </span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string"> public function fetchRow(<span class="subst">$sql</span>)&#123;</span></span><br><span class="line"><span class="string"> return <span class="subst">$this</span>-&gt;query(<span class="subst">$sql</span>)-&gt;fetch(PDO::FETCH_ASSOC);</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string"> /**</span></span><br><span class="line"><span class="string"> * 取得所有结果</span></span><br><span class="line"><span class="string"> * @param <span class="subst">$sql</span> string 执行的SQL语句</span></span><br><span class="line"><span class="string"> * @return array 关联数组结果 </span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string"> public function fetchAll(<span class="subst">$sql</span>)&#123;</span></span><br><span class="line"><span class="string"> return <span class="subst">$this</span>-&gt;query(<span class="subst">$sql</span>)-&gt;fetchAll(PDO::FETCH_ASSOC);</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="对象的克隆"><a href="#对象的克隆" class="headerlink" title="对象的克隆"></a>对象的克隆</h5><p>即对象的复制操作，分为浅克隆和深克隆</p><p><code>浅克隆和深克隆的区别</code></p><ul><li><p>浅克隆：若源对象成员变量是值类型将复制一份给克隆对象，若是引用类型则将引用对象的地址复制给目标对象，即将源对象和目标对象成员变量指向相同的内存地址；只复制对象本身和包含的值类型，引用类型的成员对象并没有复制</p><p><img src="https://img-blog.csdnimg.cn/bfa467e4c146470d9660e621b9aeba72.png"></p></li><li><p>深克隆：</p><p><img src="https://img-blog.csdnimg.cn/11d8d2b4f89246a290d2b86d8e2d5642.png"></p></li></ul><h6 id="php中的浅克隆"><a href="#php中的浅克隆" class="headerlink" title="php中的浅克隆"></a>php中的浅克隆</h6><p>只能克隆对象中的“非对象非资源”的数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$o</span> = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$obj1</span> = <span class="keyword">clone</span> <span class="variable">$obj</span>;</span><br><span class="line"><span class="variable">$obj</span>-&gt;o = <span class="number">2</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$obj</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$obj1</span>);</span><br></pre></td></tr></table></figure><p>输出结果如下图：</p><p><img src="https://img-blog.csdnimg.cn/20200330222553144.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$b</span> = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$a</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;c = <span class="keyword">new</span> <span class="title function_ invoke__">B</span>(); <span class="comment">// 此时c中存储的是对象</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$obj1</span> = <span class="keyword">clone</span> <span class="variable">$obj</span>;</span><br><span class="line"><span class="variable">$obj</span>-&gt;a = <span class="number">10</span>;</span><br><span class="line"><span class="variable">$obj</span>-&gt;c-&gt;b = <span class="number">12</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$obj</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$obj1</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020033022453997.png"></p><p>修改了obj中c的值发现obj1的c的值也跟着变了，这就是克隆不完全</p><h6 id="php中的深克隆"><a href="#php中的深克隆" class="headerlink" title="php中的深克隆"></a>php中的深克隆</h6><p>一个对象所有属性都实现“复制”，在PHP中默认浅克隆，实现深克隆需对该类使用魔术方法__clone()，并在里面实现深克隆：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$b</span> = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$a</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;c = <span class="keyword">new</span> <span class="title function_ invoke__">B</span>(); <span class="comment">// 此时c中存储的是对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;c = <span class="keyword">clone</span> <span class="variable language_">$this</span>-&gt;c; <span class="comment">// 此方法会在对象克隆时调用</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$obj1</span> = <span class="keyword">clone</span> <span class="variable">$obj</span>;</span><br><span class="line"><span class="variable">$obj</span>-&gt;a = <span class="number">10</span>;</span><br><span class="line"><span class="variable">$obj</span>-&gt;c-&gt;b = <span class="number">12</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$obj</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$obj1</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200330230013943.png"></p><h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><p>可扩展标记语言，主要用来存储数据、作为配置文件、在网络中传输</p><h4 id="XML语法"><a href="#XML语法" class="headerlink" title="XML语法"></a>XML语法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">（1）xml文档的后缀为.xml</span><br><span class="line">（2）xml第一行必须定义为文档声明</span><br><span class="line">（3）xml文档中有且仅有一个根标签</span><br><span class="line">（4）属性值必须使用单引号（单双都可）引起来且属性值是唯一的</span><br><span class="line">（5）xml标签必须正确关闭，即要么是自闭和标签，要么是围堵标签</span><br><span class="line">（6）xml标签名称区别大小写</span><br></pre></td></tr></table></figure><h4 id="XML的约束"><a href="#XML的约束" class="headerlink" title="XML的约束"></a>XML的约束</h4><h5 id="DTD约束"><a href="#DTD约束" class="headerlink" title="DTD约束"></a>DTD约束</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个完整的DTD声明主要由三个基本部分组成：元素声明、属性声明、实体声明</span><br></pre></td></tr></table></figure><p>元素声明基本语法为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT 元素名 元素内容模型&gt;</span><br></pre></td></tr></table></figure><p>XML元素中可以有子元素，可以通过DTD定义某个元素中包含哪些子元素，若department标签下有dname和address标签，即：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ELEMENT <span class="keyword">department</span> (<span class="keyword">dname</span>,<span class="keyword">address</span>)&gt;</span></span><br></pre></td></tr></table></figure><p>若hr标签下有多个employee标签，可以在（）后加个*代表有0个或多个employee标签：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ELEMENT <span class="keyword">hr</span> (<span class="keyword">employee</span>)*&gt;</span></span><br></pre></td></tr></table></figure><p>使用<code>,</code>分隔代表子元素必须按照这样的顺序出现，否则报错，若对于顺序无要求，可以使用<code>|</code>分隔子元素，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ELEMENT <span class="keyword">employee</span> (<span class="keyword">name</span>,<span class="keyword">age</span>,<span class="keyword">salary</span>,<span class="keyword">department</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="keyword">employee</span> (<span class="keyword">name</span>|<span class="keyword">age</span>|<span class="keyword">salary</span>|<span class="keyword">department</span>)&gt;</span></span><br></pre></td></tr></table></figure><h5 id="XSD约束"><a href="#XSD约束" class="headerlink" title="XSD约束"></a>XSD约束</h5><p>XSD的作用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">（1）定义可出现在文档中的元素</span><br><span class="line">（2）定义可出现在文档中的属性</span><br><span class="line">（3）定义哪个元素是子元素</span><br><span class="line">（4）定义子元素的次序</span><br><span class="line">（5）定义子元素的数目</span><br><span class="line">（6）定义元素是否为空，或者是否可包含文本</span><br><span class="line">（7）定义元素和属性的数据类型</span><br><span class="line">（8）定义元素和属性的默认值及固定值</span><br></pre></td></tr></table></figure><p>定义简易元素的语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;element name=&quot;标签名&quot; type=&quot;元素类型&quot;/&gt;</span><br></pre></td></tr></table></figure><p>定义属性的语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;attribute name=&quot;属性名&quot; type=&quot;属性的数据类型&quot;/&gt;</span><br></pre></td></tr></table></figure><h4 id="PHP-XML-Expat-解析器（基于事件的XML解析器）"><a href="#PHP-XML-Expat-解析器（基于事件的XML解析器）" class="headerlink" title="PHP XML Expat 解析器（基于事件的XML解析器）"></a>PHP XML Expat 解析器（基于事件的XML解析器）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br></pre></td></tr></table></figure><p>基于事件的解析器将上面的XML报告为一连串的三个事件：</p><ul><li>开始元素：from</li><li>开始CDATA部分值：Jani</li><li>关闭元素：from</li></ul><p>工作原理：</p><ol><li>通过 xml_parser_create() 函数初始化XML解析器</li><li>创建配合不同事件处理程序的函数</li><li>添加xml_set_element_handler() 函数来定义，当解析器遇到开始和结束标签时执行哪个函数</li><li>添加xml_set_character_data_handler() 函数来定义，当解析器遇到字符数据时执行哪个函数</li><li>通过xml_parse()函数解析文件“test.html”</li><li>添加xml_error_string() 函数将XML错误转换为文本说明</li><li>调用xml_parser_free()函数释放分配给 xml_parser_create()函数的内存</li></ol><h4 id="PHP-XML-DOM-解析器（基于树的解析器）"><a href="#PHP-XML-DOM-解析器（基于树的解析器）" class="headerlink" title="PHP XML DOM 解析器（基于树的解析器）"></a>PHP XML DOM 解析器（基于树的解析器）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;ISO-8859-1&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br></pre></td></tr></table></figure><p>XML DOM将上面的XML视为一个树形结构：</p><ul><li>level 1：XML文档</li><li>level 2：根元素&lt;from&gt;</li><li>level 3：文本元素Jani</li></ul><p><code>示例</code></p><p><code>note.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;ISO-8859-1&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>Tove<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget me this weekend!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>遍历XML</code></p><p>初始化XML解析器，加载XML，遍历&lt;note&gt;元素的所有元素</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$xmlDoc</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line"><span class="variable">$xmlDoc</span>-&gt;<span class="title function_ invoke__">load</span>(<span class="string">&quot;note.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$xmlDoc</span>-&gt;documentElement;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$x</span>-&gt;childNotes AS <span class="variable">$item</span>)&#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="variable">$item</span>-&gt;nodeName . <span class="string">&quot; = &quot;</span> . <span class="variable">$item</span>-&gt;nodeValue . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#text =</span><br><span class="line">to = Tove</span><br><span class="line">#text =</span><br><span class="line">from = Jani</span><br><span class="line">#text =</span><br><span class="line">heading = Reminder</span><br><span class="line">#text =</span><br><span class="line">body = Don&#x27;t forget me this weekend!</span><br><span class="line">#text =</span><br></pre></td></tr></table></figure><p>在上面的实例中每个元素间存在空的文本节点，当XML生成时，通常会在节点间包含空白。XML DOM解析器将它们当做普通的元素</p><h4 id="PHP-SimpleXML"><a href="#PHP-SimpleXML" class="headerlink" title="PHP SimpleXML"></a>PHP SimpleXML</h4><p>处理最普遍的XML任务，其余任务交由其它扩展处理；SimpleXML提供了一种获取XML元素的名称和文本的简单方式；与 DOM 或 Expat 相比，SimpleXML 更容易从 XML 元素中读取文本数据，它可以将XML文档转换为对象：</p><ul><li>元素被转换为SimpleXMLElement 对象的单一属性，当同级别存在多个元素时，它们会被置于数组中</li><li>属性通过关联数组进行访问，索引对应属性名称</li><li>元素内部文本被转换为字符串，若一个元素拥有多个文本节点，则按照它们被找到的顺序进行排列</li></ul><p>当执行类似以下基础任务时，SimpleXML用起来非常快捷：</p><ul><li>读取XML文件的数据</li><li>编辑文本节点或属性</li></ul><p><code>示例</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;ISO-8859-1&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>Tove<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget me this weekend!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$xml</span>=<span class="title function_ invoke__">simplexml_load_file</span>(<span class="string">&quot;note.xml&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$xml</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SimpleXMLElement Object ( [to] =&gt; Tove [from] =&gt; Jani [heading] =&gt; Reminder [body] =&gt; Don&#x27;t forget me this weekend! )</span><br></pre></td></tr></table></figure><h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><p>无需重新加载整个网页的情况下更新部分网页的技术，通过后台与服务器进行少量数据交换，使网页实现异步更新</p><p><img src="http://run.jb51.net/uploadfile/2017/0524/20170524053007405.gif"></p><p>AJAX基于因特网标准，并使用以下技术组合：</p><ul><li>XMLHttpRequest 对象（与服务器异步交互数据）</li><li>JavaScript&#x2F;DOM（显示&#x2F;取回信息）</li><li>CSS（设置数据的样式）</li><li>XML（常用作数据传输的格式）</li></ul><p><code>AJAX PHP实例</code></p><p><img src="https://s1.ax1x.com/2023/02/03/pSs3AVx.png"></p><p>当用户在上面的输入框中键入字符时会执行“showHint()”函数，该函数由“onkeyup”事件触发：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">showHint</span>(<span class="params">str</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (str.<span class="property">length</span> == <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;txtHint&quot;</span>).<span class="property">innerHTML</span>=<span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//IE7+, Firefox, Chrome, Opera, Safari 浏览器执行的代码</span></span></span><br><span class="line"><span class="language-javascript">                    xmlhttp = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//IE6, IE5 浏览器执行的代码</span></span></span><br><span class="line"><span class="language-javascript">                    xmlhttp = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                xmlhttp.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span>==<span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span>==<span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                       <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;txtHint&quot;</span>).<span class="property">innerHTML</span>=xmlhttp.<span class="property">responseText</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;gethint.php?q=&quot;</span>+str,<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">                xmlhttp.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>在输入框中输入一个姓名：<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">from</span>&gt;</span>姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onkeyup</span>=<span class="string">&quot;showHint(this.value)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>返回值：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;txtHint&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>若输入框为空（str.length&#x3D;&#x3D;0）,该函数会清空txtHint占位符的内容并退出，若非空，则showHint()会执行以下步骤：</p><ul><li>创建XMLHttpRequest对象</li><li>创建在服务器响应就绪时执行的函数</li><li>向服务器上的文件发送请求</li><li>请注意添加URL末端的参数（q）（包含输入框的内容）</li></ul><p><code>gethint.php</code></p><p>检查姓名数组，然后向浏览器（上述html）返回对应的姓名：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 将姓名填充到数组中</span></span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Anna&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Brittany&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Cinderella&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Diana&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Eva&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Fiona&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Gunda&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Hege&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Inga&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Johanna&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Kitty&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Linda&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Nina&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Ophelia&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Petunia&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Amanda&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Raquel&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Cindy&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Doris&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Eve&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Evita&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Sunniva&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Tove&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Unni&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Violet&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Liza&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Elizabeth&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Ellen&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Wenche&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Vicky&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从请求URL地址中获取q参数</span></span><br><span class="line"><span class="variable">$q</span>=<span class="variable">$_GET</span>[<span class="string">&quot;q&quot;</span>];</span><br><span class="line"><span class="comment">//查找是否有匹配值，若q&gt;0</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$q</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable">$hint</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">count</span>(<span class="variable">$a</span>);<span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strtolower</span>(<span class="variable">$q</span>)==<span class="title function_ invoke__">strtolower</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$a</span>[<span class="variable">$i</span>],<span class="number">0</span>,<span class="title function_ invoke__">strlen</span>(<span class="variable">$q</span>))))&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$hint</span>==<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                <span class="variable">$hint</span>=<span class="variable">$a</span>[<span class="variable">$i</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable">$hint</span>=<span class="variable">$hint</span>.<span class="string">&quot;,&quot;</span>.<span class="variable">$a</span>[<span class="variable">$i</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//若没有匹配值设置输出为“no suggestion”</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$hint</span> == <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">    <span class="variable">$response</span> = <span class="string">&quot;no suggestion&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$response</span> = <span class="variable">$hint</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出返回值</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$response</span>;</span><br></pre></td></tr></table></figure><p>若JS发送了任何文本，则：</p><ol><li>查找匹配JS发送的字符的姓名</li><li>若未找到匹配，则将响应字符串设置为 “no suggestion”</li><li>若找到一个或多个匹配姓名，则用所有姓名设置响应字符串</li><li>把响应发送到“txtHint”占位符</li></ol><h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><p>通过函数指针调用的函数，若将函数的指针作为参数传递给另一个函数，当该指针被用来调用所指向的函数时称为回调函数（将一段可执行的代码像参数传递一样传给其它代码，且其会在某个时刻被调用执行就叫做回调；若立即被执行称为同步回调，如果在之后某个时间再执行则称为异步回调）</p><h5 id="回调函数与普通函数的区别"><a href="#回调函数与普通函数的区别" class="headerlink" title="回调函数与普通函数的区别"></a>回调函数与普通函数的区别</h5><ol><li>将回调函数像参数一样传入库函数，改变传进库函数的参数可以实现不同的功能，且无需修改库函数的实现，实现了解耦</li><li>主函数和回调函数在同一层，库函数在另外一层，如果库函数不可见，则只能传入不同的回调函数</li></ol><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>在<code>php.ini</code>配置文件中修改三个配置：</p><ul><li><p>session.use_cookies</p><p>把该值设置为1，利用cookie传递sessionid</p></li><li><p>session.cookie_lifetime</p><p>表示<code>SessionID</code>在客户端<code>Cookie</code>储存的时间（秒），默认为0，代表浏览器一关闭SessionID就作废，将它设置为自定义如：<code>86400</code>即<code>1天</code></p></li><li><p>session.gc_maxlifetime</p><p>该值为Session在服务器端储存的时间，若超过这个时间，则Session数据自动删除，默认为1440即24分钟，也可以设置为86400即1天</p></li><li><p>session.save_path</p><p>session文件保存路径，linux默认<code>var/lib/php/session</code>，Windows需要配置并创建对应目录，如<code>D:/php/php7.4/tmp</code></p></li></ul><p>超过设置的时间后gc并不一定会工作，gc启动的概率为<code>session.gc_probaility / session.gc_divisor</code>，默认为<code>1/100</code></p><h4 id="通过php修改失效时间"><a href="#通过php修改失效时间" class="headerlink" title="通过php修改失效时间"></a>通过php修改失效时间</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$lifeTime</span> = <span class="number">24</span> * <span class="number">3600</span>;</span><br><span class="line"><span class="title function_ invoke__">session_set_cookie_params</span>(<span class="variable">$lifeTime</span>);</span><br><span class="line">    </span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;username&quot;</span>] = <span class="string">&quot;peter&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;登记的用户名为：&quot;</span>.<span class="variable">$_SESSION</span>[<span class="string">&quot;username&quot;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="通过php修改gc-maxlifetime"><a href="#通过php修改gc-maxlifetime" class="headerlink" title="通过php修改gc_maxlifetime"></a>通过php修改gc_maxlifetime</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$LifeTime</span> = <span class="number">3600</span>;</span><br><span class="line"><span class="variable">$DirectoryPath</span> = <span class="string">&quot;./tmp&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">is_dir</span>(<span class="variable">$DirectoryPath</span>) <span class="keyword">or</span> <span class="title function_ invoke__">mkdir</span>(<span class="variable">$DirectoryPath</span>,<span class="number">0777</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否开启基于url传递sessionid,这里是不开启，发现开启也要关闭掉</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">ini_get</span>(<span class="string">&quot;session.use_trans_sid&quot;</span>) == <span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;url_rewriter.tags&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;session.use_trans_sid&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;session.gc_maxlifetime&quot;</span>,<span class="variable">$Lifetime</span>);<span class="comment">//设置session生存时间</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;session.gc_divisor&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;session.gc_probability&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;session.cookie_lifetime&quot;</span>, <span class="string">&quot;0&quot;</span>);<span class="comment">//sessionID在cookie中的生存时间</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;session.save_path&quot;</span>, <span class="variable">$DirectoryPath</span>);<span class="comment">//session文件存储的路径</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>若网站自定义了<code>session_save_path</code>，则需要给<code>session.gc_probability</code>设置值，否则的话，session产生的sessionID永远不会被删除</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git笔记</title>
      <link href="/2023/10/13/git%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/10/13/git%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="Git命令用法"><a href="#Git命令用法" class="headerlink" title="Git命令用法"></a>Git命令用法</h3><h4 id="git-add和git-stash"><a href="#git-add和git-stash" class="headerlink" title="git add和git stash"></a>git add和git stash</h4><h5 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h5><p>将未提交的修改（工作区和暂存区）保存至堆栈中用于后续恢复当前工作目录，故<code>stash</code>的内容可以恢复任意分支</p><h6 id="git-stash两种应用场景"><a href="#git-stash两种应用场景" class="headerlink" title="git stash两种应用场景"></a>git stash两种应用场景</h6><ul><li><p>改动同一分支</p><p>本地修改后发现远程被改动造成冲突，此时无法<code>push</code>和<code>pull</code>，但是可以使用<code>git stash</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git stash save &quot;本地缓存内容标识&quot;//将本地改动暂存</span><br><span class="line">git pull//拉取远端分支</span><br><span class="line">git stash pop //将栈顶改动内容重新加回本地分支，此时可以继续修改</span><br></pre></td></tr></table></figure></li><li><p>不小心改动其它分支</p><p>当正在<code>dev</code>上开发，此时项目中出现一个bug需要紧急修复，但是正在开发的内容只完成一半还不想提交，此时可以用<code>git stash</code>将修改的内容保存至堆栈区，然后切换到<code>fixbug</code>分支进行修复；</p><p>或者本该在<code>dev</code>分支开发的内容却在<code>master</code>上进行了开发，需要重新切回<code>master</code>,用<code>git stash</code>将内容存至堆栈，切回<code>dev</code>后再次恢复内容即可，如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git stash save &quot;本地缓存内容标识&quot;//将本地内容暂存，此时master分支恢复到上次拉取时状态</span><br><span class="line">git checkout dev//切换到需要改动的分支</span><br><span class="line">git stash pop//将改动pop到当前的分支</span><br></pre></td></tr></table></figure></li></ul><h6 id="git-stash用法"><a href="#git-stash用法" class="headerlink" title="git stash用法"></a>git stash用法</h6><ul><li><code>git stash save “save message”</code>：执行存储时，添加备注，方便查找</li><li><code>git stash list</code>：查看<code>stash</code>了哪些存储</li><li><code>git stash show</code>：显示做了哪些改动，默认show第一个存储，若要显示其它存储，后面加<code>satsh@&#123;$num&#125;</code>，比如第二个 <code>git stash show stash@&#123;1&#125;</code></li><li><code>git stash apply</code>：取出栈顶内容，不会把存储从存储列表中删除，默认第一个存储，即<code>stash@&#123;0&#125;</code>，若要使用第二个：<code>git stash apply stash@&#123;1&#125;</code></li><li><code>git stash pop</code>：取出栈顶内容并删除，默认第一个 <code>stash</code>即 <code>stash@&#123;0&#125;</code>，若要应用并删除第二个：<code>git stash pop stash@&#123;1&#125;</code>。</li><li><code>git stash drop stash@&#123;$num&#125;</code>：丢弃<code>stash@&#123;$num&#125;</code>存储，列表中删除</li><li><code>git stash clear</code>：删除所有缓存的<code>satsh</code></li></ul><h5 id="git-add和git-stash的关系"><a href="#git-add和git-stash的关系" class="headerlink" title="git add和git stash的关系"></a>git add和git stash的关系</h5><p><code>git add</code>只是将文件加到版本控制中，<code>git stash</code>能正确存储的前提是文件必须在版本控制中才行；常规<code>git stash</code>的一个限制是会暂存所有文件，有时，只想备份某些文件的方法如下：</p><ol><li>add&#96;不想备份的文件</li><li>调用<code>git stash --keep-index</code>只会备份没有被add的文件</li><li>调用<code>git reset</code>取消已经<code>add</code>的文件的备份，继续自己的工作</li></ol><h4 id="git-revert-和-git-reset-版本回退"><a href="#git-revert-和-git-reset-版本回退" class="headerlink" title="git revert 和 git reset 版本回退"></a>git revert 和 git reset 版本回退</h4><h5 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h5><p>创建一个新的版本，该版本内容与要回退的目标版本一致，HEAD指针指向新生成的版本，而不是目标版本</p><ul><li><code>git revert HEAD</code>撤销前一次commit</li><li><code>git revert HEAD^</code>撤销前前一次commit</li><li><code>git revert CommitVersionNum</code>撤销指定的版本</li></ul><h5 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h5><p>用于回退版本，可以指定退回某一次提交的版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset [--soft | --mixed | --hard] [HEAD]</span><br></pre></td></tr></table></figure><p><strong>–mixed</strong> 为默认，可以不用带该参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD^            # 回退所有内容到上一个版本  </span><br><span class="line">$ git reset HEAD^ hello.php  # 回退 hello.php 文件的版本到上一个版本 </span><br><span class="line">$ git  reset  052e           # 回退到指定版本</span><br></pre></td></tr></table></figure><p><strong>–soft</strong> 参数用于回退到某个版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --soft HEAD~3   # 回退上上上一个版本 </span><br></pre></td></tr></table></figure><p><strong>–hard</strong> 参数撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard HEAD~3  # 回退上上上一个版本  </span><br><span class="line">$ git reset –hard bae128  # 回退到某个版本回退点之前的所有信息。 </span><br><span class="line">$ git reset --hard origin/master    # 将本地的状态回退到和远程的一样 </span><br></pre></td></tr></table></figure><p>谨慎使用 <strong>–-hard</strong> 参数，它会删除回退点之前的所有信息</p><h5 id="git-revert和git-reset的区别"><a href="#git-revert和git-reset的区别" class="headerlink" title="git revert和git reset的区别"></a>git revert和git reset的区别</h5><ul><li><code>git revert</code>是用一次新的<code>commit</code>回滚之前的<code>commit</code>，<code>git reset</code>是直接删除指定的<code>commit</code>，操作后HEAD指针的指向不同</li><li>在回滚操作上看，效果差不多，但在日后继续<code>merge</code>以前的老版本时有区别，<code>git revert</code>是用一次逆向的<code>commit</code>“中和”，因此合并老<code>branch</code>时导致这部分改变不会再次出现，但<code>git reset</code>是把某些<code>commit</code>在某个<code>branch</code>上删除，和老<code>branch</code>再次<code>merge</code>时，这些被回滚的<code>commit</code>应该还会被引入</li></ul><h4 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote -v#显示所有远程仓库</span><br><span class="line">git remote rm name#删除远程仓库</span><br><span class="line">git remote rename old_name new_name#修改仓库名</span><br></pre></td></tr></table></figure><h4 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git branch#列举所有分支，与git branch --list同义</span><br><span class="line">git branch &lt;branch&gt;#创建一个名为branch的分支，不自动检出新创建的分支</span><br><span class="line">git branch -d &lt;branch&gt;#删除指定分支，当分支中有未合并的变更时，git会阻止这一次的删除操作</span><br><span class="line">git branch -D &lt;branch&gt;#强制删除指定分支，即便其中含有未合并的变更，该命令常见于当开发者希望永久删除某一开发过程中的所有commit</span><br><span class="line">git branch -m &lt;branch&gt;#将当前分支重命名为&lt;branch&gt;</span><br><span class="line">git branch -a#列举所有远程分支</span><br></pre></td></tr></table></figure><h4 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git checkout branchname （切换到本地分支）</span><br><span class="line">git checkout -b 本地分支名 origin/远程分支名//切换远程分支（需要将远程分支与本地分支关联）</span><br><span class="line">//该命令可以将远程仓库指定的分支拉到本地，并在本地创建一个分支与指定远程仓库分支关联起来，并切换到新建的本地分支中</span><br><span class="line"></span><br><span class="line">//放弃所有工作区的修改</span><br><span class="line">git checkout .</span><br><span class="line">git checkout – filename//放弃对指定文件的修改</span><br><span class="line">git checkout -f//放弃工作区和暂存区的所有修改</span><br></pre></td></tr></table></figure><h4 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h4><ul><li><p>开发分支（dev）上的代码达到上线标准后，合并到master分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev</span><br><span class="line">git pull </span><br><span class="line">git checkout master</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"># merge --no-ff参数，表示Fast forward；可以保存之前的分支历史。能够更好地查看merge历史以及branch分支状态；保证版本提交、分支结构清晰</span><br><span class="line"></span><br><span class="line">git merge --no-ff dev</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>当<code>master</code> 分支为保护分支时，执行<code>git push -u origin master</code>会提示远程服务器拒绝，此时需要在浏览器进行远程仓库<code>merge</code>操作</p></li><li><p>当master代码改动，需要更新开发分支（dev）上的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git checkout master </span><br><span class="line">git pull </span><br><span class="line">git checkout dev</span><br><span class="line"></span><br><span class="line"># merge --no-ff参数，表示禁用Fast forward;可以保存之前的分支历史能够更好的查看merge历史，以及branch状态;保证版本提交、分支结构清晰</span><br><span class="line"></span><br><span class="line">git merge --no-ff  master</span><br><span class="line">git push -u origin dev</span><br></pre></td></tr></table></figure></li></ul><h4 id="Git命令图解"><a href="#Git命令图解" class="headerlink" title="Git命令图解"></a>Git命令图解</h4><p><img src="https://img-blog.csdnimg.cn/2020010917233675.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9zaHE1Nzg1LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70"></p><h5 id="删除远程仓库文件及文件夹"><a href="#删除远程仓库文件及文件夹" class="headerlink" title="删除远程仓库文件及文件夹"></a>删除远程仓库文件及文件夹</h5><p>在<code>github</code>上只能删除仓库，无法删除文件夹或文件，只能通过命令解决</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin master# 将远程仓库的项目拉下来</span><br><span class="line">$ dir# 查看有哪些文件夹</span><br><span class="line">$ git rm -r --cached .idea# 删除.idea文件夹</span><br><span class="line">$ git commit -m &#x27;删除.idea&#x27;# 提交，添加操作说明</span><br><span class="line">$ git push -u origin master# 将本次更改更新到github上</span><br></pre></td></tr></table></figure><h3 id="常见操作"><a href="#常见操作" class="headerlink" title="常见操作"></a>常见操作</h3><h4 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h4><h5 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a # 查看所有分支：本地分支白色，当前分支绿色，远程分支红色</span><br></pre></td></tr></table></figure><h5 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h5><h6 id="进入合并分支"><a href="#进入合并分支" class="headerlink" title="进入合并分支"></a>进入合并分支</h6><p><code>.git</code>同文件夹下进入<code>git bash</code>，进入要合并的分支（如develop分支合并到release，进入release目录）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout release # 切换分支</span><br><span class="line">git pull# 拉取最新的代码</span><br></pre></td></tr></table></figure><h6 id="合并分支-1"><a href="#合并分支-1" class="headerlink" title="合并分支"></a>合并分支</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge develop# develop在上一步是白色的，不建议直接合并远程分支</span><br></pre></td></tr></table></figure><h6 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status# 查看是否有冲突</span><br></pre></td></tr></table></figure><h6 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h6><p>在编辑器中解决冲突后<code>git add</code>提交至暂存区，之后<code>git commit</code>提交</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;说点什么&quot;（-m后面的是本次提交的信息，如果不填，直接使用git commit,系统会自动生成）</span><br></pre></td></tr></table></figure><h6 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push# 已提交的变动推送至远程</span><br></pre></td></tr></table></figure><h5 id="命令集"><a href="#命令集" class="headerlink" title="命令集"></a>命令集</h5><h6 id="刷新分支"><a href="#刷新分支" class="headerlink" title="刷新分支"></a>刷新分支</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote update origin --prune</span><br></pre></td></tr></table></figure><h6 id="查看所有分支"><a href="#查看所有分支" class="headerlink" title="查看所有分支"></a>查看所有分支</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure><h6 id="查看远程分支"><a href="#查看远程分支" class="headerlink" title="查看远程分支"></a>查看远程分支</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure><h6 id="查看本地分支所关联的远程分支"><a href="#查看本地分支所关联的远程分支" class="headerlink" title="查看本地分支所关联的远程分支"></a>查看本地分支所关联的远程分支</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -vv</span><br></pre></td></tr></table></figure><h6 id="修改本地分支名称"><a href="#修改本地分支名称" class="headerlink" title="修改本地分支名称"></a>修改本地分支名称</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m old_branch new_branch</span><br></pre></td></tr></table></figure><h6 id="删除远程旧分支"><a href="#删除远程旧分支" class="headerlink" title="删除远程旧分支"></a>删除远程旧分支</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin :old_branch</span><br></pre></td></tr></table></figure><h6 id="将新分支推送到远程仓库"><a href="#将新分支推送到远程仓库" class="headerlink" title="将新分支推送到远程仓库"></a>将新分支推送到远程仓库</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push --set-upstream origin new_branch</span><br><span class="line">或者git push -u origin new_branch </span><br></pre></td></tr></table></figure><h6 id="分支切换、合并"><a href="#分支切换、合并" class="headerlink" title="分支切换、合并"></a>分支切换、合并</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout --track origin/dev切换到远程dev分支</span><br><span class="line">git branch -D master develop删除本地库develop</span><br><span class="line">git checkout -b dev建立一个新的本地分支dev</span><br><span class="line">git merge origin/dev将dev与当前分支合并</span><br><span class="line">git checkout dev切换到本地dev分支</span><br></pre></td></tr></table></figure><h5 id="命令图"><a href="#命令图" class="headerlink" title="命令图"></a>命令图</h5><p><img src="https://img-blog.csdnimg.cn/f4d4bbb3de864cb882e9cf9faff30bca.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATm8gU2lsdmVyIEJ1bGxldA==,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h4 id="提交指定文件"><a href="#提交指定文件" class="headerlink" title="提交指定文件"></a>提交指定文件</h4><ul><li><p>应用场景：本地代码未完成需要紧急修复bug，某些开发阶段代码不想提交</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git status -s# 查看仓库状态</span><br><span class="line">git add 文件名# 添加需要提交的文件名</span><br><span class="line">git stash -u -k# 提交时不提交未被add的文件</span><br><span class="line">git commit -m# 提交备注信息</span><br><span class="line">git pull# 拉取合并</span><br><span class="line">git push# 推送到远程仓库</span><br><span class="line">git stash pop# 恢复之前忽略的文件</span><br></pre></td></tr></table></figure></li></ul><h4 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h4><p>当需要重命名文件时，可以使用<code>git mv [oldFileName] [new FileName]</code>，<code>Git</code>对于重命名操作分为三步进行，第一步首先重命名文件，然后再从仓库中删除原有文件，最后将新文件添加进暂存区等待提交</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mv README.md LOOKME.md</span><br><span class="line">$ git rm README.md</span><br><span class="line">$ git add LOOKME.md</span><br></pre></td></tr></table></figure><p>若通过软件进行批量修改文件时，也要按照该流程先删除原文件再添加新文件</p><h4 id="查看操作历史"><a href="#查看操作历史" class="headerlink" title="查看操作历史"></a>查看操作历史</h4><p>使用<code>git log</code>打印所有参与者的提交记录</p><ul><li><p><code>-p --patch</code>显示每次提交所引入的差异，也可以限制显示条目数量，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log -p --patch -2</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2021072010075819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmh1YXFpYW5nMQ==,size_16,color_FFFFFF,t_70"></p></li><li><p><code>--stat</code>：在每次提交的下面列出所有被修改的文件、有多少文件被修改了以及被修改的文件哪些行被移除或是添加了。在每次提交的最后还有一个总结</p><p><img src="https://img-blog.csdnimg.cn/20210720100637195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmh1YXFpYW5nMQ==,size_16,color_FFFFFF,t_70"></p></li></ul><h5 id="将日志信息显示在一行上"><a href="#将日志信息显示在一行上" class="headerlink" title="将日志信息显示在一行上"></a>将日志信息显示在一行上</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty=oneline</span><br></pre></td></tr></table></figure><h5 id="以short格式输出仓库修改信息"><a href="#以short格式输出仓库修改信息" class="headerlink" title="以short格式输出仓库修改信息"></a>以short格式输出仓库修改信息</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty=short</span><br></pre></td></tr></table></figure><h5 id="以-full-格式输出仓库修改信息"><a href="#以-full-格式输出仓库修改信息" class="headerlink" title="以 full 格式输出仓库修改信息"></a>以 full 格式输出仓库修改信息</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty=full</span><br></pre></td></tr></table></figure><h5 id="以-fuller-格式输出仓库修改信息"><a href="#以-fuller-格式输出仓库修改信息" class="headerlink" title="以 fuller 格式输出仓库修改信息"></a>以 fuller 格式输出仓库修改信息</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty=fuller</span><br></pre></td></tr></table></figure><p>修改文件与提交文件可以不是同一个人，故在查询日志时会区分修改人与提交人</p><h4 id="修改分支名称"><a href="#修改分支名称" class="headerlink" title="修改分支名称"></a>修改分支名称</h4><h5 id="修改本地分支名称-1"><a href="#修改本地分支名称-1" class="headerlink" title="修改本地分支名称"></a>修改本地分支名称</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m oldBranchName newBranchName</span><br></pre></td></tr></table></figure><h5 id="将本地分支的远程分支删除"><a href="#将本地分支的远程分支删除" class="headerlink" title="将本地分支的远程分支删除"></a>将本地分支的远程分支删除</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin :oldBranchName</span><br></pre></td></tr></table></figure><h5 id="将改名后的本地分支推送到远程，并将本地分支与之关联"><a href="#将改名后的本地分支推送到远程，并将本地分支与之关联" class="headerlink" title="将改名后的本地分支推送到远程，并将本地分支与之关联"></a>将改名后的本地分支推送到远程，并将本地分支与之关联</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --set-upstream origin newBranchName</span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><h4 id="文件颜色"><a href="#文件颜色" class="headerlink" title="文件颜色"></a>文件颜色</h4><ul><li>红褐色：创建之后没有<code>add</code>，没提交，不在版本控制范围内，需要先<code>add</code>文件</li><li>绿色：<code>add</code>之后文件为绿色，没有提交</li><li>蓝色：原本有一个文件，改动之后没有提交为蓝色</li></ul><h4 id="git分支管理策略"><a href="#git分支管理策略" class="headerlink" title="git分支管理策略"></a>git分支管理策略</h4><h5 id="企业项目一般分支策略"><a href="#企业项目一般分支策略" class="headerlink" title="企业项目一般分支策略"></a>企业项目一般分支策略</h5><h6 id="主分支master"><a href="#主分支master" class="headerlink" title="主分支master"></a>主分支master</h6><p>代码库应有且仅有一个主分支。所有给用户使用的正式版本都在该主分支上发布</p><h6 id="开发分支develop"><a href="#开发分支develop" class="headerlink" title="开发分支develop"></a>开发分支develop</h6><p>主分支只用于发布重大版本。日常开发应在开发分支上生成代码最新版本</p><h6 id="功能分支feature"><a href="#功能分支feature" class="headerlink" title="功能分支feature"></a>功能分支feature</h6><p>为了开发某种特定功能，从<code>develop</code>上分出来的，开发完成后再次并入，功能分支的名字，可以采用<code>feature-*</code>的形式命名</p><h6 id="预发布分支release"><a href="#预发布分支release" class="headerlink" title="预发布分支release"></a>预发布分支release</h6><p>在合并到<code>master</code>分支前，可能需要一个预发布版本进行测试，预发布分支从<code>develop上分出来</code>，预发布结束后必须合并进<code>develop</code>和<code>master</code>分支，它的命名可以采用<code>release-*</code>的形式</p><h6 id="bug分支fixbug"><a href="#bug分支fixbug" class="headerlink" title="bug分支fixbug"></a>bug分支fixbug</h6><p>该分支用于bug修补，从<code>master</code>分支上分出来，修补结束以后，再合并进<code>Master</code>和<code>Develop</code>分支，它的命名可以采用<code>fixbug-*</code>的形式</p><h6 id="其它分支other"><a href="#其它分支other" class="headerlink" title="其它分支other"></a>其它分支other</h6><h4 id="仓库文件状态"><a href="#仓库文件状态" class="headerlink" title="仓库文件状态"></a>仓库文件状态</h4><h5 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a>工作区</h5><p>编写代码文件、管理资源文件的区域，细分为受版本控制和不受版本控制的文件</p><h5 id="暂存区"><a href="#暂存区" class="headerlink" title="暂存区"></a>暂存区</h5><p>该区域和<code>index</code>文件取得了联系，实际执行<code>git add</code>的文件都生成了对应的object对象，放在<code>.git/objects</code>目录下，状态变为<code>staged</code>，当提交到版本库时，分支会引用这些对象</p><h5 id="版本库"><a href="#版本库" class="headerlink" title="版本库"></a>版本库</h5><p>最终的修改提交到版本库，此时提交的文件状态变成<code>committed</code>，其实也是一种<code>unmodified</code>状态，版本库会记录每一次提交，可以追溯每次修改的内容</p><p>文件状态通常可以分为：</p><ul><li>不受版本控制的<code>untracked</code>状态</li><li>受版本控制且已修改的<code>modified</code>状态</li><li>受版本控制已修改并提交到暂存区的 <code>staged</code> 状态</li><li>从暂存区已经提交到本地仓库的 <code>committed</code> 状态</li><li>提交到本地仓库未修改或者从远程仓库克隆下来的 <code>unmodified</code> 状态</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">·Changes to be committed为暂存区已存在，需要进行提交进仓库的文件；</span><br><span class="line">·Changes not staged for commit为文件被操作尚未提交至暂存区的文件，此类文件需要使用add将其添加至缓存区再提交进仓库；</span><br><span class="line">·Untracked files为未入暂存区文件；</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git status 只能查看未传送提交的次数，不能查看具体文件信息</span><br><span class="line">git cherry -v 只能查看未传送提交的描述/说明</span><br><span class="line">git log master ^origin/master 则可以查看未传送提交的详细信息</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
